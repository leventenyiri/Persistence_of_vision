
Persistence_of_vision.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043cc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004590  08004590  00005590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a8  080045a8  00006140  2**0
                  CONTENTS
  4 .ARM          00000008  080045a8  080045a8  000055a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b0  080045b0  00006140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045b4  080045b4  000055b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000140  20000000  080045b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000140  080046f8  00006140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080046f8  000062a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c1f  00000000  00000000  00006170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c9  00000000  00000000  0001dd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0001fe58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f6d  00000000  00000000  00021258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cb1  00000000  00000000  000221c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cfa  00000000  00000000  00043e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d15ae  00000000  00000000  00054b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012611e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005578  00000000  00000000  00126164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0012b6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000140 	.word	0x20000140
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004578 	.word	0x08004578

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000144 	.word	0x20000144
 8000200:	08004578 	.word	0x08004578

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <OutputEnable>:

	 would look like this, now i write each column into a vector, and i will light up these leds
	 with a delay to display the character
	 */

void OutputEnable(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Set PB2 low to enable output
 80004f8:	2200      	movs	r2, #0
 80004fa:	2104      	movs	r1, #4
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <OutputEnable+0x14>)
 80004fe:	f002 faa3 	bl	8002a48 <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020400 	.word	0x40020400

0800050c <OutputDisable>:

void OutputDisable(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Set PB2 high to disable output
 8000510:	2201      	movs	r2, #1
 8000512:	2104      	movs	r1, #4
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <OutputDisable+0x14>)
 8000516:	f002 fa97 	bl	8002a48 <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020400 	.word	0x40020400

08000524 <LatchEnable>:

void LatchEnable(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // Set PB1 high
 8000528:	2201      	movs	r2, #1
 800052a:	2102      	movs	r1, #2
 800052c:	4806      	ldr	r0, [pc, #24]	@ (8000548 <LatchEnable+0x24>)
 800052e:	f002 fa8b 	bl	8002a48 <HAL_GPIO_WritePin>
	HAL_Delay(1);  // Short delay to ensure the latch pulse is detected
 8000532:	2001      	movs	r0, #1
 8000534:	f001 feca 	bl	80022cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Set PB1 low again
 8000538:	2200      	movs	r2, #0
 800053a:	2102      	movs	r1, #2
 800053c:	4802      	ldr	r0, [pc, #8]	@ (8000548 <LatchEnable+0x24>)
 800053e:	f002 fa83 	bl	8002a48 <HAL_GPIO_WritePin>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40020400 	.word	0x40020400

0800054c <SendLEDData>:


void SendLEDData(uint8_t *data) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 8000554:	2305      	movs	r3, #5
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	e00a      	b.n	8000570 <SendLEDData+0x24>
		HAL_SPI_Transmit(&hspi2, &data[i], 1, 100);  // Send 1 byte per driver
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	18d1      	adds	r1, r2, r3
 8000560:	2364      	movs	r3, #100	@ 0x64
 8000562:	2201      	movs	r2, #1
 8000564:	4807      	ldr	r0, [pc, #28]	@ (8000584 <SendLEDData+0x38>)
 8000566:	f003 f93a 	bl	80037de <HAL_SPI_Transmit>
	for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3b01      	subs	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b00      	cmp	r3, #0
 8000574:	daf1      	bge.n	800055a <SendLEDData+0xe>
	}
	LatchEnable();  // Latch data once all have been transmitted
 8000576:	f7ff ffd5 	bl	8000524 <LatchEnable>
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000015c 	.word	0x2000015c

08000588 <CombineLEDData>:

void CombineLEDData(uint8_t *result, uint8_t ledIdx) {
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]

	for (int j = 0; j < 6; j++) {   // Each LED configuration is 6 bytes
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e016      	b.n	80005c8 <CombineLEDData+0x40>
		result[j] |= LED_ARRAY[ledIdx][j];
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	7819      	ldrb	r1, [r3, #0]
 80005a2:	78fa      	ldrb	r2, [r7, #3]
 80005a4:	480d      	ldr	r0, [pc, #52]	@ (80005dc <CombineLEDData+0x54>)
 80005a6:	4613      	mov	r3, r2
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	4413      	add	r3, r2
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	18c2      	adds	r2, r0, r3
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4413      	add	r3, r2
 80005b4:	781a      	ldrb	r2, [r3, #0]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	4403      	add	r3, r0
 80005bc:	430a      	orrs	r2, r1
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 6; j++) {   // Each LED configuration is 6 bytes
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3301      	adds	r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	dde5      	ble.n	800059a <CombineLEDData+0x12>
	}

}
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	20000014 	.word	0x20000014

080005e0 <CombineAndSendNEW>:
		result[j] += LED_ARRAY[ledIdx][j];
	}

}

void CombineAndSendNEW(uint16_t ledMask,uint8_t color) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	80fb      	strh	r3, [r7, #6]
 80005ec:	4613      	mov	r3, r2
 80005ee:	717b      	strb	r3, [r7, #5]

	//if the value of a variable is 1, concatenate that LED into the sum
	char a = (ledMask & 0b1000000000000000) >> 15;
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	0bdb      	lsrs	r3, r3, #15
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	77fb      	strb	r3, [r7, #31]
	char b = (ledMask & 0b0100000000000000) >> 14;
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	139b      	asrs	r3, r3, #14
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	77bb      	strb	r3, [r7, #30]
	char c = (ledMask & 0b0010000000000000) >> 13;
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	135b      	asrs	r3, r3, #13
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	777b      	strb	r3, [r7, #29]
	char d = (ledMask & 0b0001000000000000) >> 12;
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	131b      	asrs	r3, r3, #12
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	773b      	strb	r3, [r7, #28]
	char e = (ledMask & 0b0000100000000000) >> 11;
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	12db      	asrs	r3, r3, #11
 8000620:	b2db      	uxtb	r3, r3
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	76fb      	strb	r3, [r7, #27]
	char f = (ledMask & 0b0000010000000000) >> 10;
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	129b      	asrs	r3, r3, #10
 800062c:	b2db      	uxtb	r3, r3
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	76bb      	strb	r3, [r7, #26]
	char g = (ledMask & 0b0000001000000000) >> 9;
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	125b      	asrs	r3, r3, #9
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	767b      	strb	r3, [r7, #25]
	char h = (ledMask & 0b0000000100000000) >> 8;
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	121b      	asrs	r3, r3, #8
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	763b      	strb	r3, [r7, #24]
	char i = (ledMask & 0b0000000010000000) >> 7;
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	11db      	asrs	r3, r3, #7
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	75fb      	strb	r3, [r7, #23]
	char j = (ledMask & 0b0000000001000000) >> 6;
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	119b      	asrs	r3, r3, #6
 800065c:	b2db      	uxtb	r3, r3
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	75bb      	strb	r3, [r7, #22]
	char k = (ledMask & 0b0000000000100000) >> 5;
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	115b      	asrs	r3, r3, #5
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	757b      	strb	r3, [r7, #21]
	char l = (ledMask & 0b0000000000010000) >> 4;
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	111b      	asrs	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	753b      	strb	r3, [r7, #20]
	char m = (ledMask & 0b0000000000001000) >> 3;
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	10db      	asrs	r3, r3, #3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	74fb      	strb	r3, [r7, #19]
	char n = (ledMask & 0b0000000000000100) >> 2;
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	109b      	asrs	r3, r3, #2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	74bb      	strb	r3, [r7, #18]
	char o = (ledMask & 0b0000000000000010) >> 1;
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	105b      	asrs	r3, r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	747b      	strb	r3, [r7, #17]
	char p = (ledMask & 0b0000000000000001);
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	743b      	strb	r3, [r7, #16]

	uint8_t LED[6] = { 0 };
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	2300      	movs	r3, #0
 80006b0:	81bb      	strh	r3, [r7, #12]
	if(color == green){
		CombineLEDData(LED,green);
	}
*/

	if (a) {
 80006b2:	7ffb      	ldrb	r3, [r7, #31]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d005      	beq.n	80006c4 <CombineAndSendNEW+0xe4>
		CombineLEDData(LED, 0);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff62 	bl	8000588 <CombineLEDData>
	}
	if (b) {
 80006c4:	7fbb      	ldrb	r3, [r7, #30]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d005      	beq.n	80006d6 <CombineAndSendNEW+0xf6>
		CombineLEDData(LED, 3);
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2103      	movs	r1, #3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff59 	bl	8000588 <CombineLEDData>
	}
	if (c) {
 80006d6:	7f7b      	ldrb	r3, [r7, #29]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d005      	beq.n	80006e8 <CombineAndSendNEW+0x108>
		CombineLEDData(LED, 6);
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2106      	movs	r1, #6
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff50 	bl	8000588 <CombineLEDData>
	}
	if (d) {
 80006e8:	7f3b      	ldrb	r3, [r7, #28]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d005      	beq.n	80006fa <CombineAndSendNEW+0x11a>
		CombineLEDData(LED, 9);
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	2109      	movs	r1, #9
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff47 	bl	8000588 <CombineLEDData>
	}
	if (e) {
 80006fa:	7efb      	ldrb	r3, [r7, #27]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d005      	beq.n	800070c <CombineAndSendNEW+0x12c>
		CombineLEDData(LED, 12);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	210c      	movs	r1, #12
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff3e 	bl	8000588 <CombineLEDData>
	}
	if (f) {
 800070c:	7ebb      	ldrb	r3, [r7, #26]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d005      	beq.n	800071e <CombineAndSendNEW+0x13e>
		CombineLEDData(LED, 15);
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	210f      	movs	r1, #15
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff35 	bl	8000588 <CombineLEDData>
	}
	if (g) {
 800071e:	7e7b      	ldrb	r3, [r7, #25]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d005      	beq.n	8000730 <CombineAndSendNEW+0x150>
		CombineLEDData(LED, 18);
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2112      	movs	r1, #18
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff2c 	bl	8000588 <CombineLEDData>
	}
	if (h) {
 8000730:	7e3b      	ldrb	r3, [r7, #24]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d005      	beq.n	8000742 <CombineAndSendNEW+0x162>
		CombineLEDData(LED, 21);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2115      	movs	r1, #21
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff23 	bl	8000588 <CombineLEDData>
	}
	if (i) {
 8000742:	7dfb      	ldrb	r3, [r7, #23]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <CombineAndSendNEW+0x174>
		CombineLEDData(LED, 24);
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2118      	movs	r1, #24
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff1a 	bl	8000588 <CombineLEDData>
	}
	if (j) {
 8000754:	7dbb      	ldrb	r3, [r7, #22]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d005      	beq.n	8000766 <CombineAndSendNEW+0x186>
		CombineLEDData(LED, 27);
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	211b      	movs	r1, #27
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff11 	bl	8000588 <CombineLEDData>
	}
	if (k) {
 8000766:	7d7b      	ldrb	r3, [r7, #21]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d005      	beq.n	8000778 <CombineAndSendNEW+0x198>
		CombineLEDData(LED, 30);
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	211e      	movs	r1, #30
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff08 	bl	8000588 <CombineLEDData>
	}
	if (l) {
 8000778:	7d3b      	ldrb	r3, [r7, #20]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d005      	beq.n	800078a <CombineAndSendNEW+0x1aa>
		CombineLEDData(LED, 33);
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2121      	movs	r1, #33	@ 0x21
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff feff 	bl	8000588 <CombineLEDData>
	}
	if (m) {
 800078a:	7cfb      	ldrb	r3, [r7, #19]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d005      	beq.n	800079c <CombineAndSendNEW+0x1bc>
		CombineLEDData(LED, 36);
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2124      	movs	r1, #36	@ 0x24
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fef6 	bl	8000588 <CombineLEDData>
	}
	if (n) {
 800079c:	7cbb      	ldrb	r3, [r7, #18]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d005      	beq.n	80007ae <CombineAndSendNEW+0x1ce>
		CombineLEDData(LED, 39);
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2127      	movs	r1, #39	@ 0x27
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff feed 	bl	8000588 <CombineLEDData>
	}
	if (o) {
 80007ae:	7c7b      	ldrb	r3, [r7, #17]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d005      	beq.n	80007c0 <CombineAndSendNEW+0x1e0>
		CombineLEDData(LED, 42);
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	212a      	movs	r1, #42	@ 0x2a
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fee4 	bl	8000588 <CombineLEDData>
	}
	if (p) {
 80007c0:	7c3b      	ldrb	r3, [r7, #16]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d005      	beq.n	80007d2 <CombineAndSendNEW+0x1f2>
		CombineLEDData(LED, 45);
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	212d      	movs	r1, #45	@ 0x2d
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fedb 	bl	8000588 <CombineLEDData>
	}

	SendLEDData(LED);
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff feb8 	bl	800054c <SendLEDData>
}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <wrap_platform_read>:

int32_t wrap_platform_read(uint8_t Address, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	603a      	str	r2, [r7, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	460b      	mov	r3, r1
 80007f4:	71bb      	strb	r3, [r7, #6]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80bb      	strh	r3, [r7, #4]
	Reg |= 0x80;
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000800:	b2db      	uxtb	r3, r3
 8000802:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	480b      	ldr	r0, [pc, #44]	@ (8000838 <wrap_platform_read+0x54>)
 800080a:	f002 f91d 	bl	8002a48 <HAL_GPIO_WritePin>
	BSP_SPI1_Send(&Reg, 1);
 800080e:	1dbb      	adds	r3, r7, #6
 8000810:	2101      	movs	r1, #1
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fc0c 	bl	8001030 <BSP_SPI1_Send>
	BSP_SPI1_SendRecv(&Reg, Bufp, len);
 8000818:	88ba      	ldrh	r2, [r7, #4]
 800081a:	1dbb      	adds	r3, r7, #6
 800081c:	6839      	ldr	r1, [r7, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fc22 	bl	8001068 <BSP_SPI1_SendRecv>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2110      	movs	r1, #16
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <wrap_platform_read+0x54>)
 800082a:	f002 f90d 	bl	8002a48 <HAL_GPIO_WritePin>
	return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020000 	.word	0x40020000

0800083c <wrap_platform_write>:

int32_t wrap_platform_write(uint8_t Address, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	603a      	str	r2, [r7, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	460b      	mov	r3, r1
 800084c:	71bb      	strb	r3, [r7, #6]
 800084e:	4613      	mov	r3, r2
 8000850:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2110      	movs	r1, #16
 8000856:	480b      	ldr	r0, [pc, #44]	@ (8000884 <wrap_platform_write+0x48>)
 8000858:	f002 f8f6 	bl	8002a48 <HAL_GPIO_WritePin>
	BSP_SPI1_Send(&Reg, 1);
 800085c:	1dbb      	adds	r3, r7, #6
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fbe5 	bl	8001030 <BSP_SPI1_Send>
	BSP_SPI1_Send(Bufp, len);
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	4619      	mov	r1, r3
 800086a:	6838      	ldr	r0, [r7, #0]
 800086c:	f000 fbe0 	bl	8001030 <BSP_SPI1_Send>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2110      	movs	r1, #16
 8000874:	4803      	ldr	r0, [pc, #12]	@ (8000884 <wrap_platform_write+0x48>)
 8000876:	f002 f8e7 	bl	8002a48 <HAL_GPIO_WritePin>
	return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020000 	.word	0x40020000

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088e:	f001 fcab 	bl	80021e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000892:	f000 f895 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000896:	f000 f961 	bl	8000b5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089a:	f000 f935 	bl	8000b08 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800089e:	f000 f8fd 	bl	8000a9c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  OutputDisable();  // Disable outputs during initialization
 80008a2:	f7ff fe33 	bl	800050c <OutputDisable>
  SendLEDData(LED_CLEAR);
 80008a6:	4843      	ldr	r0, [pc, #268]	@ (80009b4 <main+0x12c>)
 80008a8:	f7ff fe50 	bl	800054c <SendLEDData>
  OutputEnable();
 80008ac:	f7ff fe22 	bl	80004f4 <OutputEnable>

  MEMS_Init();
 80008b0:	f000 f9ee 	bl	8000c90 <MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


		LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	483f      	ldr	r0, [pc, #252]	@ (80009b8 <main+0x130>)
 80008ba:	f000 fea7 	bl	800160c <LSM6DSL_ACC_GetAxes>
		//printf("% 5d, % 5d, % 5d\r\n", (int) acc_axes.x, (int) acc_axes.y,
		//	(int) acc_axes.z);

		//delayTime = calculateDelay((int) acc_axes.x);

		if (abs(acc_axes.x) > 500) {
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bfb8      	it	lt
 80008c4:	425b      	neglt	r3, r3
 80008c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008ca:	ddf3      	ble.n	80008b4 <main+0x2c>
			for (int i = 0; i < 9; i++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	e00d      	b.n	80008ee <main+0x66>
				CombineAndSendNEW(A[i], red);
 80008d2:	4a3a      	ldr	r2, [pc, #232]	@ (80009bc <main+0x134>)
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008da:	2105      	movs	r1, #5
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fe7f 	bl	80005e0 <CombineAndSendNEW>
				HAL_Delay(0.05);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f001 fcf2 	bl	80022cc <HAL_Delay>
			for (int i = 0; i < 9; i++) {
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	ddee      	ble.n	80008d2 <main+0x4a>
			}

			HAL_Delay(0.5);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f001 fce9 	bl	80022cc <HAL_Delay>

			for (int i = 0; i < 9; i++) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	e00d      	b.n	800091c <main+0x94>
				CombineAndSendNEW(A[i], red);
 8000900:	4a2e      	ldr	r2, [pc, #184]	@ (80009bc <main+0x134>)
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000908:	2105      	movs	r1, #5
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fe68 	bl	80005e0 <CombineAndSendNEW>
				HAL_Delay(0.05);
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fcdb 	bl	80022cc <HAL_Delay>
			for (int i = 0; i < 9; i++) {
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	3301      	adds	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	2b08      	cmp	r3, #8
 8000920:	ddee      	ble.n	8000900 <main+0x78>
			}
			HAL_Delay(0.5);
 8000922:	2000      	movs	r0, #0
 8000924:	f001 fcd2 	bl	80022cc <HAL_Delay>

			for (int i = 0; i < 9; i++) {
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e00d      	b.n	800094a <main+0xc2>
				CombineAndSendNEW(A[i], red);
 800092e:	4a23      	ldr	r2, [pc, #140]	@ (80009bc <main+0x134>)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000936:	2105      	movs	r1, #5
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fe51 	bl	80005e0 <CombineAndSendNEW>
				HAL_Delay(0.05);
 800093e:	2000      	movs	r0, #0
 8000940:	f001 fcc4 	bl	80022cc <HAL_Delay>
			for (int i = 0; i < 9; i++) {
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	3301      	adds	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	2b08      	cmp	r3, #8
 800094e:	ddee      	ble.n	800092e <main+0xa6>
			}
			HAL_Delay(0.5);
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fcbb 	bl	80022cc <HAL_Delay>

			for (int i = 0; i < 9; i++) {
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	e00d      	b.n	8000978 <main+0xf0>
				CombineAndSendNEW(A[i], red);
 800095c:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <main+0x134>)
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000964:	2105      	movs	r1, #5
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fe3a 	bl	80005e0 <CombineAndSendNEW>
				HAL_Delay(0.05);
 800096c:	2000      	movs	r0, #0
 800096e:	f001 fcad 	bl	80022cc <HAL_Delay>
			for (int i = 0; i < 9; i++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b08      	cmp	r3, #8
 800097c:	ddee      	ble.n	800095c <main+0xd4>
			}
			HAL_Delay(0.5);
 800097e:	2000      	movs	r0, #0
 8000980:	f001 fca4 	bl	80022cc <HAL_Delay>

			for (int i = 0; i < 9; i++) {
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	e00d      	b.n	80009a6 <main+0x11e>
				CombineAndSendNEW(A[i], red);
 800098a:	4a0c      	ldr	r2, [pc, #48]	@ (80009bc <main+0x134>)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000992:	2105      	movs	r1, #5
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe23 	bl	80005e0 <CombineAndSendNEW>
				HAL_Delay(0.05);
 800099a:	2000      	movs	r0, #0
 800099c:	f001 fc96 	bl	80022cc <HAL_Delay>
			for (int i = 0; i < 9; i++) {
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	3301      	adds	r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2b08      	cmp	r3, #8
 80009aa:	ddee      	ble.n	800098a <main+0x102>
			}

			HAL_Delay(0.5);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f001 fc8d 	bl	80022cc <HAL_Delay>
		LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 80009b2:	e77f      	b.n	80008b4 <main+0x2c>
 80009b4:	20000238 	.word	0x20000238
 80009b8:	200001fc 	.word	0x200001fc
 80009bc:	20000000 	.word	0x20000000

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	@ 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2234      	movs	r2, #52	@ 0x34
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fda6 	bl	8004520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <SystemClock_Config+0xd4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	4a29      	ldr	r2, [pc, #164]	@ (8000a94 <SystemClock_Config+0xd4>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f4:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <SystemClock_Config+0xd4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a00:	2300      	movs	r3, #0
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	4b24      	ldr	r3, [pc, #144]	@ (8000a98 <SystemClock_Config+0xd8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a0c:	4a22      	ldr	r2, [pc, #136]	@ (8000a98 <SystemClock_Config+0xd8>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <SystemClock_Config+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a34:	2310      	movs	r3, #16
 8000a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a38:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a3c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fb76 	bl	8003140 <HAL_RCC_OscConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a5a:	f000 f979 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f816 	bl	8002aac <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a86:	f000 f963 	bl	8000d50 <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	@ 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000aa2:	4a18      	ldr	r2, [pc, #96]	@ (8000b04 <MX_SPI2_Init+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000aa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000acc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ae8:	220a      	movs	r2, #10
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000aee:	f002 fdc5 	bl	800367c <HAL_SPI_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000af8:	f000 f92a 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000015c 	.word	0x2000015c
 8000b04:	40003800 	.word	0x40003800

08000b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_USART2_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f003 fa2a 	bl	8003f98 <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4a:	f000 f901 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001b4 	.word	0x200001b4
 8000b58:	40004400 	.word	0x40004400

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b42      	ldr	r3, [pc, #264]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a41      	ldr	r2, [pc, #260]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b3f      	ldr	r3, [pc, #252]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b3b      	ldr	r3, [pc, #236]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a3a      	ldr	r2, [pc, #232]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b38      	ldr	r3, [pc, #224]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b34      	ldr	r3, [pc, #208]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a33      	ldr	r2, [pc, #204]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b31      	ldr	r3, [pc, #196]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a2c      	ldr	r2, [pc, #176]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2110      	movs	r1, #16
 8000be6:	4827      	ldr	r0, [pc, #156]	@ (8000c84 <MX_GPIO_Init+0x128>)
 8000be8:	f001 ff2e 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_LE_Pin|LED_OE_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2106      	movs	r1, #6
 8000bf0:	4825      	ldr	r0, [pc, #148]	@ (8000c88 <MX_GPIO_Init+0x12c>)
 8000bf2:	f001 ff29 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481f      	ldr	r0, [pc, #124]	@ (8000c8c <MX_GPIO_Init+0x130>)
 8000c0e:	f001 fc93 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c12:	2310      	movs	r3, #16
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4816      	ldr	r0, [pc, #88]	@ (8000c84 <MX_GPIO_Init+0x128>)
 8000c2a:	f001 fc85 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LE_Pin LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_LE_Pin|LED_OE_Pin;
 8000c2e:	2306      	movs	r3, #6
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4810      	ldr	r0, [pc, #64]	@ (8000c88 <MX_GPIO_Init+0x12c>)
 8000c46:	f001 fc77 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_INT1_EXTI11_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_INT1_EXTI11_Pin;
 8000c4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6DSL_INT1_EXTI11_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480a      	ldr	r0, [pc, #40]	@ (8000c8c <MX_GPIO_Init+0x130>)
 8000c62:	f001 fc69 	bl	8002538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2028      	movs	r0, #40	@ 0x28
 8000c6c:	f001 fc2d 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c70:	2028      	movs	r0, #40	@ 0x28
 8000c72:	f001 fc46 	bl	8002502 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020800 	.word	0x40020800

08000c90 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id ;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
	io_ctx.BusType = LSM6DSL_SPI_4WIRES_BUS;
 8000c96:	2301      	movs	r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
	io_ctx.Address = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	753b      	strb	r3, [r7, #20]
	io_ctx.Init = BSP_SPI1_Init;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MEMS_Init+0x7c>)
 8000ca0:	60bb      	str	r3, [r7, #8]
	io_ctx.DeInit = BSP_SPI1_DeInit;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MEMS_Init+0x80>)
 8000ca4:	60fb      	str	r3, [r7, #12]
	io_ctx.ReadReg = wrap_platform_read;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <MEMS_Init+0x84>)
 8000ca8:	61fb      	str	r3, [r7, #28]
	io_ctx.WriteReg = wrap_platform_write;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <MEMS_Init+0x88>)
 8000cac:	61bb      	str	r3, [r7, #24]
	io_ctx.GetTick = BSP_GetTick;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MEMS_Init+0x8c>)
 8000cb0:	623b      	str	r3, [r7, #32]
	LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4819      	ldr	r0, [pc, #100]	@ (8000d20 <MEMS_Init+0x90>)
 8000cba:	f000 faeb 	bl	8001294 <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4817      	ldr	r0, [pc, #92]	@ (8000d20 <MEMS_Init+0x90>)
 8000cc4:	f000 fbb9 	bl	800143a <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b6a      	cmp	r3, #106	@ 0x6a
 8000ccc:	d001      	beq.n	8000cd2 <MEMS_Init+0x42>
    Error_Handler();
 8000cce:	f000 f83f 	bl	8000d50 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 8000cd2:	4813      	ldr	r0, [pc, #76]	@ (8000d20 <MEMS_Init+0x90>)
 8000cd4:	f000 fb48 	bl	8001368 <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 8000cd8:	eeb3 0a0a 	vmov.f32	s0, #58	@ 0x41d00000  26.0
 8000cdc:	4810      	ldr	r0, [pc, #64]	@ (8000d20 <MEMS_Init+0x90>)
 8000cde:	f000 fc2d 	bl	800153c <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <MEMS_Init+0x90>)
 8000ce6:	f000 fc45 	bl	8001574 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 8000cea:	2101      	movs	r1, #1
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <MEMS_Init+0x90>)
 8000cee:	f000 fcff 	bl	80016f0 <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480a      	ldr	r0, [pc, #40]	@ (8000d20 <MEMS_Init+0x90>)
 8000cf8:	f000 fc64 	bl	80015c4 <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 8000cfc:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <MEMS_Init+0x90>)
 8000cfe:	f000 fbb2 	bl	8001466 <LSM6DSL_ACC_Enable>
}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	@ 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	08000f81 	.word	0x08000f81
 8000d10:	08000fe1 	.word	0x08000fe1
 8000d14:	080007e5 	.word	0x080007e5
 8000d18:	0800083d 	.word	0x0800083d
 8000d1c:	080010a9 	.word	0x080010a9
 8000d20:	200001fc 	.word	0x200001fc

08000d24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d34:	d104      	bne.n	8000d40 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 8000d36:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_GPIO_EXTI_Callback+0x28>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	4a03      	ldr	r2, [pc, #12]	@ (8000d4c <HAL_GPIO_EXTI_Callback+0x28>)
 8000d3e:	6013      	str	r3, [r2, #0]
  }
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20000234 	.word	0x20000234

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d72:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	4a08      	ldr	r2, [pc, #32]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d9a:	2007      	movs	r0, #7
 8000d9c:	f001 fb8a 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	@ 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	@ (8000e30 <HAL_SPI_MspInit+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12c      	bne.n	8000e28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	4a17      	ldr	r2, [pc, #92]	@ (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <HAL_SPI_MspInit+0x88>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <HAL_SPI_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a10      	ldr	r2, [pc, #64]	@ (8000e34 <HAL_SPI_MspInit+0x88>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e06:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e18:	2305      	movs	r3, #5
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <HAL_SPI_MspInit+0x8c>)
 8000e24:	f001 fb88 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	@ 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40003800 	.word	0x40003800
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020400 	.word	0x40020400

08000e3c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <HAL_SPI_MspDeInit+0x30>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10a      	bne.n	8000e64 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <HAL_SPI_MspDeInit+0x34>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <HAL_SPI_MspDeInit+0x34>)
 8000e54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e58:	6413      	str	r3, [r2, #64]	@ 0x40

    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 8000e5a:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <HAL_SPI_MspDeInit+0x38>)
 8000e60:	f001 fcfe 	bl	8002860 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40003800 	.word	0x40003800
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020400 	.word	0x40020400

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a19      	ldr	r2, [pc, #100]	@ (8000efc <HAL_UART_MspInit+0x84>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d12b      	bne.n	8000ef2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <HAL_UART_MspInit+0x88>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	4a17      	ldr	r2, [pc, #92]	@ (8000f00 <HAL_UART_MspInit+0x88>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_UART_MspInit+0x88>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <HAL_UART_MspInit+0x88>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a10      	ldr	r2, [pc, #64]	@ (8000f00 <HAL_UART_MspInit+0x88>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <HAL_UART_MspInit+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <HAL_UART_MspInit+0x8c>)
 8000eee:	f001 fb23 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	@ 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40004400 	.word	0x40004400
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <NMI_Handler+0x4>

08000f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <MemManage_Handler+0x4>

08000f20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5e:	f001 f995 	bl	800228c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000f6a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f6e:	f001 fd85 	bl	8002a7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f72:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f76:	f001 fd81 	bl	8002a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <BSP_SPI1_Init+0x54>)
 8000f8c:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <BSP_SPI1_Init+0x58>)
 8000f8e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <BSP_SPI1_Init+0x5c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	4911      	ldr	r1, [pc, #68]	@ (8000fdc <BSP_SPI1_Init+0x5c>)
 8000f98:	600a      	str	r2, [r1, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d114      	bne.n	8000fc8 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000f9e:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <BSP_SPI1_Init+0x54>)
 8000fa0:	f002 ff10 	bl	8003dc4 <HAL_SPI_GetState>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10e      	bne.n	8000fc8 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000faa:	480a      	ldr	r0, [pc, #40]	@ (8000fd4 <BSP_SPI1_Init+0x54>)
 8000fac:	f000 f8c0 	bl	8001130 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d108      	bne.n	8000fc8 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000fb6:	4807      	ldr	r0, [pc, #28]	@ (8000fd4 <BSP_SPI1_Init+0x54>)
 8000fb8:	f000 f87e 	bl	80010b8 <MX_SPI1_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000fc2:	f06f 0307 	mvn.w	r3, #7
 8000fc6:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000240 	.word	0x20000240
 8000fd8:	40013000 	.word	0x40013000
 8000fdc:	20000298 	.word	0x20000298

08000fe0 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000fe6:	f06f 0307 	mvn.w	r3, #7
 8000fea:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <BSP_SPI1_DeInit+0x48>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <BSP_SPI1_DeInit+0x48>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <BSP_SPI1_DeInit+0x48>)
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <BSP_SPI1_DeInit+0x48>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10a      	bne.n	800101c <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 8001006:	4809      	ldr	r0, [pc, #36]	@ (800102c <BSP_SPI1_DeInit+0x4c>)
 8001008:	f000 f8ea 	bl	80011e0 <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 800100c:	4807      	ldr	r0, [pc, #28]	@ (800102c <BSP_SPI1_DeInit+0x4c>)
 800100e:	f002 fbbe 	bl	800378e <HAL_SPI_DeInit>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000298 	.word	0x20000298
 800102c:	20000240 	.word	0x20000240

08001030 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4806      	ldr	r0, [pc, #24]	@ (8001064 <BSP_SPI1_Send+0x34>)
 800104a:	f002 fbc8 	bl	80037de <HAL_SPI_Transmit>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001054:	f06f 0305 	mvn.w	r3, #5
 8001058:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000240 	.word	0x20000240

08001068 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af02      	add	r7, sp, #8
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001080:	9200      	str	r2, [sp, #0]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	68f9      	ldr	r1, [r7, #12]
 8001086:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <BSP_SPI1_SendRecv+0x3c>)
 8001088:	f002 fcec 	bl	8003a64 <HAL_SPI_TransmitReceive>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001092:	f06f 0305 	mvn.w	r3, #5
 8001096:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001098:	697b      	ldr	r3, [r7, #20]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000240 	.word	0x20000240

080010a8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010ac:	f001 f902 	bl	80022b4 <HAL_GetTick>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a19      	ldr	r2, [pc, #100]	@ (800112c <MX_SPI1_Init+0x74>)
 80010c8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010d0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f0:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2218      	movs	r2, #24
 80010f6:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	220a      	movs	r2, #10
 800110e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f002 fab3 	bl	800367c <HAL_SPI_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40013000 	.word	0x40013000

08001130 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	@ 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	4b26      	ldr	r3, [pc, #152]	@ (80011d8 <SPI1_MspInit+0xa8>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001140:	4a25      	ldr	r2, [pc, #148]	@ (80011d8 <SPI1_MspInit+0xa8>)
 8001142:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001146:	6453      	str	r3, [r2, #68]	@ 0x44
 8001148:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <SPI1_MspInit+0xa8>)
 800114a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <SPI1_MspInit+0xa8>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115c:	4a1e      	ldr	r2, [pc, #120]	@ (80011d8 <SPI1_MspInit+0xa8>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6313      	str	r3, [r2, #48]	@ 0x30
 8001164:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <SPI1_MspInit+0xa8>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001170:	2320      	movs	r3, #32
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001180:	2305      	movs	r3, #5
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4814      	ldr	r0, [pc, #80]	@ (80011dc <SPI1_MspInit+0xac>)
 800118c:	f001 f9d4 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001190:	2340      	movs	r3, #64	@ 0x40
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80011a0:	2305      	movs	r3, #5
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	480c      	ldr	r0, [pc, #48]	@ (80011dc <SPI1_MspInit+0xac>)
 80011ac:	f001 f9c4 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80011c0:	2305      	movs	r3, #5
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <SPI1_MspInit+0xac>)
 80011cc:	f001 f9b4 	bl	8002538 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	@ 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <SPI1_MspDeInit+0x34>)
 80011ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ec:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <SPI1_MspDeInit+0x34>)
 80011ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011f2:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 80011f4:	2120      	movs	r1, #32
 80011f6:	4808      	ldr	r0, [pc, #32]	@ (8001218 <SPI1_MspDeInit+0x38>)
 80011f8:	f001 fb32 	bl	8002860 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 80011fc:	2140      	movs	r1, #64	@ 0x40
 80011fe:	4806      	ldr	r0, [pc, #24]	@ (8001218 <SPI1_MspDeInit+0x38>)
 8001200:	f001 fb2e 	bl	8002860 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 8001204:	2180      	movs	r1, #128	@ 0x80
 8001206:	4804      	ldr	r0, [pc, #16]	@ (8001218 <SPI1_MspDeInit+0x38>)
 8001208:	f001 fb2a 	bl	8002860 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000

0800121c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001278 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001244:	f7ff ffea 	bl	800121c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800124a:	490d      	ldr	r1, [pc, #52]	@ (8001280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001260:	4c0a      	ldr	r4, [pc, #40]	@ (800128c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800126e:	f003 f95f 	bl	8004530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff fb09 	bl	8000888 <main>
  bx  lr    
 8001276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001280:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8001284:	080045b8 	.word	0x080045b8
  ldr r2, =_sbss
 8001288:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 800128c:	200002a0 	.word	0x200002a0

08001290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC_IRQHandler>
	...

08001294 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d103      	bne.n	80012b0 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e051      	b.n	8001354 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	7b1a      	ldrb	r2, [r3, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	699a      	ldr	r2, [r3, #24]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001360 <LSM6DSL_RegisterBusIO+0xcc>)
 80012ec:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001364 <LSM6DSL_RegisterBusIO+0xd0>)
 80012f2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	69da      	ldr	r2, [r3, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d103      	bne.n	8001312 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	e020      	b.n	8001354 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4798      	blx	r3
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e016      	b.n	8001354 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d112      	bne.n	8001354 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10d      	bne.n	8001354 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001338:	230c      	movs	r3, #12
 800133a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800133c:	7afb      	ldrb	r3, [r7, #11]
 800133e:	461a      	mov	r2, r3
 8001340:	2112      	movs	r1, #18
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f9b9 	bl	80016ba <LSM6DSL_Write_Reg>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001354:	68fb      	ldr	r3, [r7, #12]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	08001975 	.word	0x08001975
 8001364:	080019ab 	.word	0x080019ab

08001368 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3320      	adds	r3, #32
 8001374:	2101      	movs	r1, #1
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fcb1 	bl	8001cde <lsm6dsl_auto_increment_set>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e054      	b.n	8001432 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3320      	adds	r3, #32
 800138c:	2101      	movs	r1, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fc26 	bl	8001be0 <lsm6dsl_block_data_update_set>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e048      	b.n	8001432 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3320      	adds	r3, #32
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fef8 	bl	800219c <lsm6dsl_fifo_mode_set>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e03c      	b.n	8001432 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2204      	movs	r2, #4
 80013bc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3320      	adds	r3, #32
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fb98 	bl	8001afc <lsm6dsl_xl_data_rate_set>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e02c      	b.n	8001432 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3320      	adds	r3, #32
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fb2e 	bl	8001a40 <lsm6dsl_xl_full_scale_set>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e020      	b.n	8001432 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2204      	movs	r2, #4
 80013f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3320      	adds	r3, #32
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fbc8 	bl	8001b94 <lsm6dsl_gy_data_rate_set>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e010      	b.n	8001432 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3320      	adds	r3, #32
 8001414:	2106      	movs	r1, #6
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fb96 	bl	8001b48 <lsm6dsl_gy_full_scale_set>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e004      	b.n	8001432 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3320      	adds	r3, #32
 8001448:	6839      	ldr	r1, [r7, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fc36 	bl	8001cbc <lsm6dsl_device_id_get>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e000      	b.n	800145e <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e014      	b.n	80014a6 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f103 0220 	add.w	r2, r3, #32
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f000 fb36 	bl	8001afc <lsm6dsl_xl_data_rate_set>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e004      	b.n	80014a6 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3320      	adds	r3, #32
 80014c2:	f107 020b 	add.w	r2, r7, #11
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fadf 	bl	8001a8c <lsm6dsl_xl_full_scale_get>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	e023      	b.n	8001522 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d81b      	bhi.n	8001518 <LSM6DSL_ACC_GetSensitivity+0x68>
 80014e0:	a201      	add	r2, pc, #4	@ (adr r2, 80014e8 <LSM6DSL_ACC_GetSensitivity+0x38>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	08001511 	.word	0x08001511
 80014f0:	08001501 	.word	0x08001501
 80014f4:	08001509 	.word	0x08001509
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4a0c      	ldr	r2, [pc, #48]	@ (800152c <LSM6DSL_ACC_GetSensitivity+0x7c>)
 80014fc:	601a      	str	r2, [r3, #0]
      break;
 80014fe:	e00f      	b.n	8001520 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	4a0b      	ldr	r2, [pc, #44]	@ (8001530 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8001504:	601a      	str	r2, [r3, #0]
      break;
 8001506:	e00b      	b.n	8001520 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <LSM6DSL_ACC_GetSensitivity+0x84>)
 800150c:	601a      	str	r2, [r3, #0]
      break;
 800150e:	e007      	b.n	8001520 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8001514:	601a      	str	r2, [r3, #0]
      break;
 8001516:	e003      	b.n	8001520 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	60fb      	str	r3, [r7, #12]
      break;
 800151e:	bf00      	nop
  }

  return ret;
 8001520:	68fb      	ldr	r3, [r7, #12]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	3d79db23 	.word	0x3d79db23
 8001530:	3df9db23 	.word	0x3df9db23
 8001534:	3e79db23 	.word	0x3e79db23
 8001538:	3ef9db23 	.word	0x3ef9db23

0800153c <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800154e:	2b01      	cmp	r3, #1
 8001550:	d106      	bne.n	8001560 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001552:	ed97 0a00 	vldr	s0, [r7]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f8fe 	bl	8001758 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800155c:	4603      	mov	r3, r0
 800155e:	e005      	b.n	800156c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001560:	ed97 0a00 	vldr	s0, [r7]
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f983 	bl	8001870 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800156a:	4603      	mov	r3, r0
  }
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b02      	cmp	r3, #2
 8001582:	dd0b      	ble.n	800159c <LSM6DSL_ACC_SetFullScale+0x28>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b04      	cmp	r3, #4
 8001588:	dd06      	ble.n	8001598 <LSM6DSL_ACC_SetFullScale+0x24>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b08      	cmp	r3, #8
 800158e:	dc01      	bgt.n	8001594 <LSM6DSL_ACC_SetFullScale+0x20>
 8001590:	2303      	movs	r3, #3
 8001592:	e004      	b.n	800159e <LSM6DSL_ACC_SetFullScale+0x2a>
 8001594:	2301      	movs	r3, #1
 8001596:	e002      	b.n	800159e <LSM6DSL_ACC_SetFullScale+0x2a>
 8001598:	2302      	movs	r3, #2
 800159a:	e000      	b.n	800159e <LSM6DSL_ACC_SetFullScale+0x2a>
 800159c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800159e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3320      	adds	r3, #32
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fa49 	bl	8001a40 <lsm6dsl_xl_full_scale_set>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	e000      	b.n	80015bc <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3320      	adds	r3, #32
 80015d2:	f107 0208 	add.w	r2, r7, #8
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fb27 	bl	8001c2c <lsm6dsl_acceleration_raw_get>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	e00c      	b.n	8001604 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80015ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80015f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80015fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3320      	adds	r3, #32
 8001620:	f107 0210 	add.w	r2, r7, #16
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f000 fb00 	bl	8001c2c <lsm6dsl_acceleration_raw_get>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e03c      	b.n	80016b2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff36 	bl	80014b0 <LSM6DSL_ACC_GetSensitivity>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e030      	b.n	80016b2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001650:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001668:	ee17 2a90 	vmov	r2, s15
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001670:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001688:	ee17 2a90 	vmov	r2, s15
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001690:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169c:	edd7 7a03 	vldr	s15, [r7, #12]
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a8:	ee17 2a90 	vmov	r2, s15
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	70fb      	strb	r3, [r7, #3]
 80016c6:	4613      	mov	r3, r2
 80016c8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f103 0020 	add.w	r0, r3, #32
 80016d0:	1cba      	adds	r2, r7, #2
 80016d2:	78f9      	ldrb	r1, [r7, #3]
 80016d4:	2301      	movs	r3, #1
 80016d6:	f000 f99b 	bl	8001a10 <lsm6dsl_write_reg>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	e000      	b.n	80016e8 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3320      	adds	r3, #32
 8001700:	f107 020c 	add.w	r2, r7, #12
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fc72 	bl	8001ff0 <lsm6dsl_pin_int1_route_get>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e01b      	b.n	8001750 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d811      	bhi.n	8001742 <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	7b3b      	ldrb	r3, [r7, #12]
 8001728:	f362 0300 	bfi	r3, r2, #0, #1
 800172c:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3320      	adds	r3, #32
 8001732:	68f9      	ldr	r1, [r7, #12]
 8001734:	4618      	mov	r0, r3
 8001736:	f000 faf8 	bl	8001d2a <lsm6dsl_pin_int1_route_set>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8001740:	e002      	b.n	8001748 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e003      	b.n	8001750 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
 800174c:	e000      	b.n	8001750 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001764:	edd7 7a00 	vldr	s15, [r7]
 8001768:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d801      	bhi.n	800177a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8001776:	2301      	movs	r3, #1
 8001778:	e058      	b.n	800182c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800177a:	edd7 7a00 	vldr	s15, [r7]
 800177e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	d801      	bhi.n	8001790 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 800178c:	2302      	movs	r3, #2
 800178e:	e04d      	b.n	800182c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001790:	edd7 7a00 	vldr	s15, [r7]
 8001794:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001854 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8001798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	d801      	bhi.n	80017a6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e042      	b.n	800182c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80017a6:	edd7 7a00 	vldr	s15, [r7]
 80017aa:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001858 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80017ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d801      	bhi.n	80017bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80017b8:	2304      	movs	r3, #4
 80017ba:	e037      	b.n	800182c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80017bc:	edd7 7a00 	vldr	s15, [r7]
 80017c0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800185c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80017c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	d801      	bhi.n	80017d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80017ce:	2305      	movs	r3, #5
 80017d0:	e02c      	b.n	800182c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80017d2:	edd7 7a00 	vldr	s15, [r7]
 80017d6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001860 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80017da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d801      	bhi.n	80017e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80017e4:	2306      	movs	r3, #6
 80017e6:	e021      	b.n	800182c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80017e8:	edd7 7a00 	vldr	s15, [r7]
 80017ec:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001864 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80017f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	d801      	bhi.n	80017fe <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80017fa:	2307      	movs	r3, #7
 80017fc:	e016      	b.n	800182c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80017fe:	edd7 7a00 	vldr	s15, [r7]
 8001802:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001868 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8001806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d801      	bhi.n	8001814 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8001810:	2308      	movs	r3, #8
 8001812:	e00b      	b.n	800182c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001814:	edd7 7a00 	vldr	s15, [r7]
 8001818:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800186c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 800181c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	d801      	bhi.n	800182a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8001826:	2309      	movs	r3, #9
 8001828:	e000      	b.n	800182c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800182a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800182c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3320      	adds	r3, #32
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f960 	bl	8001afc <lsm6dsl_xl_data_rate_set>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e000      	b.n	800184a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	42500000 	.word	0x42500000
 8001858:	42d00000 	.word	0x42d00000
 800185c:	43500000 	.word	0x43500000
 8001860:	43d00000 	.word	0x43d00000
 8001864:	44504000 	.word	0x44504000
 8001868:	44cf8000 	.word	0x44cf8000
 800186c:	45502000 	.word	0x45502000

08001870 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800187c:	edd7 7a00 	vldr	s15, [r7]
 8001880:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188c:	d801      	bhi.n	8001892 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800188e:	2301      	movs	r3, #1
 8001890:	e058      	b.n	8001944 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001892:	edd7 7a00 	vldr	s15, [r7]
 8001896:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800189a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	d801      	bhi.n	80018a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e04d      	b.n	8001944 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80018a8:	edd7 7a00 	vldr	s15, [r7]
 80018ac:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001958 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80018b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	d801      	bhi.n	80018be <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e042      	b.n	8001944 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80018be:	edd7 7a00 	vldr	s15, [r7]
 80018c2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800195c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80018c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ce:	d801      	bhi.n	80018d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80018d0:	2304      	movs	r3, #4
 80018d2:	e037      	b.n	8001944 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80018d4:	edd7 7a00 	vldr	s15, [r7]
 80018d8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001960 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80018dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d801      	bhi.n	80018ea <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80018e6:	2305      	movs	r3, #5
 80018e8:	e02c      	b.n	8001944 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80018ea:	edd7 7a00 	vldr	s15, [r7]
 80018ee:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001964 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80018f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	d801      	bhi.n	8001900 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80018fc:	2306      	movs	r3, #6
 80018fe:	e021      	b.n	8001944 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001900:	edd7 7a00 	vldr	s15, [r7]
 8001904:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001968 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	d801      	bhi.n	8001916 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8001912:	2307      	movs	r3, #7
 8001914:	e016      	b.n	8001944 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001916:	edd7 7a00 	vldr	s15, [r7]
 800191a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800196c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800191e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	d801      	bhi.n	800192c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8001928:	2308      	movs	r3, #8
 800192a:	e00b      	b.n	8001944 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800192c:	edd7 7a00 	vldr	s15, [r7]
 8001930:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001970 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	d801      	bhi.n	8001942 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800193e:	2309      	movs	r3, #9
 8001940:	e000      	b.n	8001944 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001942:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	42500000 	.word	0x42500000
 800195c:	42d00000 	.word	0x42d00000
 8001960:	43500000 	.word	0x43500000
 8001964:	43d00000 	.word	0x43d00000
 8001968:	44504000 	.word	0x44504000
 800196c:	44cf8000 	.word	0x44cf8000
 8001970:	45502000 	.word	0x45502000

08001974 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	461a      	mov	r2, r3
 8001980:	460b      	mov	r3, r1
 8001982:	72fb      	strb	r3, [r7, #11]
 8001984:	4613      	mov	r3, r2
 8001986:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	695c      	ldr	r4, [r3, #20]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	7b1b      	ldrb	r3, [r3, #12]
 8001994:	4618      	mov	r0, r3
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	b299      	uxth	r1, r3
 800199a:	893b      	ldrh	r3, [r7, #8]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	47a0      	blx	r4
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}

080019aa <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80019aa:	b590      	push	{r4, r7, lr}
 80019ac:	b087      	sub	sp, #28
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	461a      	mov	r2, r3
 80019b6:	460b      	mov	r3, r1
 80019b8:	72fb      	strb	r3, [r7, #11]
 80019ba:	4613      	mov	r3, r2
 80019bc:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	691c      	ldr	r4, [r3, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	7b1b      	ldrb	r3, [r3, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	b299      	uxth	r1, r3
 80019d0:	893b      	ldrh	r3, [r7, #8]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	47a0      	blx	r4
 80019d6:	4603      	mov	r3, r0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}

080019e0 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	461a      	mov	r2, r3
 80019ec:	460b      	mov	r3, r1
 80019ee:	72fb      	strb	r3, [r7, #11]
 80019f0:	4613      	mov	r3, r2
 80019f2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685c      	ldr	r4, [r3, #4]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	68d8      	ldr	r0, [r3, #12]
 80019fc:	893b      	ldrh	r3, [r7, #8]
 80019fe:	7af9      	ldrb	r1, [r7, #11]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	47a0      	blx	r4
 8001a04:	6178      	str	r0, [r7, #20]

  return ret;
 8001a06:	697b      	ldr	r3, [r7, #20]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}

08001a10 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	72fb      	strb	r3, [r7, #11]
 8001a20:	4613      	mov	r3, r2
 8001a22:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681c      	ldr	r4, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68d8      	ldr	r0, [r3, #12]
 8001a2c:	893b      	ldrh	r3, [r7, #8]
 8001a2e:	7af9      	ldrb	r1, [r7, #11]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	47a0      	blx	r4
 8001a34:	6178      	str	r0, [r7, #20]

  return ret;
 8001a36:	697b      	ldr	r3, [r7, #20]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd90      	pop	{r4, r7, pc}

08001a40 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001a4c:	f107 0208 	add.w	r2, r7, #8
 8001a50:	2301      	movs	r3, #1
 8001a52:	2110      	movs	r1, #16
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ffc3 	bl	80019e0 <lsm6dsl_read_reg>
 8001a5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10f      	bne.n	8001a82 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	7a3b      	ldrb	r3, [r7, #8]
 8001a6c:	f362 0383 	bfi	r3, r2, #2, #2
 8001a70:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001a72:	f107 0208 	add.w	r2, r7, #8
 8001a76:	2301      	movs	r3, #1
 8001a78:	2110      	movs	r1, #16
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffc8 	bl	8001a10 <lsm6dsl_write_reg>
 8001a80:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001a96:	f107 0208 	add.w	r2, r7, #8
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ff9e 	bl	80019e0 <lsm6dsl_read_reg>
 8001aa4:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8001aa6:	7a3b      	ldrb	r3, [r7, #8]
 8001aa8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d81a      	bhi.n	8001ae8 <lsm6dsl_xl_full_scale_get+0x5c>
 8001ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab8 <lsm6dsl_xl_full_scale_get+0x2c>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001ad1 	.word	0x08001ad1
 8001ac0:	08001ad9 	.word	0x08001ad9
 8001ac4:	08001ae1 	.word	0x08001ae1
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
      break;
 8001ace:	e00f      	b.n	8001af0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
      break;
 8001ad6:	e00b      	b.n	8001af0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2202      	movs	r2, #2
 8001adc:	701a      	strb	r2, [r3, #0]
      break;
 8001ade:	e007      	b.n	8001af0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	701a      	strb	r2, [r3, #0]
      break;
 8001ae6:	e003      	b.n	8001af0 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2204      	movs	r2, #4
 8001aec:	701a      	strb	r2, [r3, #0]
      break;
 8001aee:	bf00      	nop
  }

  return ret;
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop

08001afc <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001b08:	f107 0208 	add.w	r2, r7, #8
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	2110      	movs	r1, #16
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff65 	bl	80019e0 <lsm6dsl_read_reg>
 8001b16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10f      	bne.n	8001b3e <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	7a3b      	ldrb	r3, [r7, #8]
 8001b28:	f362 1307 	bfi	r3, r2, #4, #4
 8001b2c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001b2e:	f107 0208 	add.w	r2, r7, #8
 8001b32:	2301      	movs	r3, #1
 8001b34:	2110      	movs	r1, #16
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ff6a 	bl	8001a10 <lsm6dsl_write_reg>
 8001b3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001b54:	f107 0208 	add.w	r2, r7, #8
 8001b58:	2301      	movs	r3, #1
 8001b5a:	2111      	movs	r1, #17
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff3f 	bl	80019e0 <lsm6dsl_read_reg>
 8001b62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10f      	bne.n	8001b8a <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	7a3b      	ldrb	r3, [r7, #8]
 8001b74:	f362 0343 	bfi	r3, r2, #1, #3
 8001b78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001b7a:	f107 0208 	add.w	r2, r7, #8
 8001b7e:	2301      	movs	r3, #1
 8001b80:	2111      	movs	r1, #17
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff44 	bl	8001a10 <lsm6dsl_write_reg>
 8001b88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001ba0:	f107 0208 	add.w	r2, r7, #8
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	2111      	movs	r1, #17
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff19 	bl	80019e0 <lsm6dsl_read_reg>
 8001bae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	7a3b      	ldrb	r3, [r7, #8]
 8001bc0:	f362 1307 	bfi	r3, r2, #4, #4
 8001bc4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001bc6:	f107 0208 	add.w	r2, r7, #8
 8001bca:	2301      	movs	r3, #1
 8001bcc:	2111      	movs	r1, #17
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ff1e 	bl	8001a10 <lsm6dsl_write_reg>
 8001bd4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001bec:	f107 0208 	add.w	r2, r7, #8
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	2112      	movs	r1, #18
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fef3 	bl	80019e0 <lsm6dsl_read_reg>
 8001bfa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	7a3b      	ldrb	r3, [r7, #8]
 8001c0c:	f362 1386 	bfi	r3, r2, #6, #1
 8001c10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c12:	f107 0208 	add.w	r2, r7, #8
 8001c16:	2301      	movs	r3, #1
 8001c18:	2112      	movs	r1, #18
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fef8 	bl	8001a10 <lsm6dsl_write_reg>
 8001c20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001c36:	f107 020c 	add.w	r2, r7, #12
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	2128      	movs	r1, #40	@ 0x28
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fece 	bl	80019e0 <lsm6dsl_read_reg>
 8001c44:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001c46:	7b7b      	ldrb	r3, [r7, #13]
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	7b3a      	ldrb	r2, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	b212      	sxth	r2, r2
 8001c6e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	3302      	adds	r3, #2
 8001c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	7bba      	ldrb	r2, [r7, #14]
 8001c80:	4413      	add	r3, r2
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3302      	adds	r3, #2
 8001c88:	b212      	sxth	r2, r2
 8001c8a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001c8c:	7c7a      	ldrb	r2, [r7, #17]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3304      	adds	r3, #4
 8001c92:	b212      	sxth	r2, r2
 8001c94:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	7c3a      	ldrb	r2, [r7, #16]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	3304      	adds	r3, #4
 8001cae:	b212      	sxth	r2, r2
 8001cb0:	801a      	strh	r2, [r3, #0]

  return ret;
 8001cb2:	697b      	ldr	r3, [r7, #20]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	210f      	movs	r1, #15
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fe87 	bl	80019e0 <lsm6dsl_read_reg>
 8001cd2:	60f8      	str	r0, [r7, #12]

  return ret;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001cea:	f107 0208 	add.w	r2, r7, #8
 8001cee:	2301      	movs	r3, #1
 8001cf0:	2112      	movs	r1, #18
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fe74 	bl	80019e0 <lsm6dsl_read_reg>
 8001cf8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10f      	bne.n	8001d20 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	7a3b      	ldrb	r3, [r7, #8]
 8001d0a:	f362 0382 	bfi	r3, r2, #2, #1
 8001d0e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001d10:	f107 0208 	add.w	r2, r7, #8
 8001d14:	2301      	movs	r3, #1
 8001d16:	2112      	movs	r1, #18
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fe79 	bl	8001a10 <lsm6dsl_write_reg>
 8001d1e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d20:	68fb      	ldr	r3, [r7, #12]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b08a      	sub	sp, #40	@ 0x28
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001d34:	f107 021c 	add.w	r2, r7, #28
 8001d38:	2301      	movs	r3, #1
 8001d3a:	210d      	movs	r1, #13
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fe4f 	bl	80019e0 <lsm6dsl_read_reg>
 8001d42:	6278      	str	r0, [r7, #36]	@ 0x24

  if (ret == 0)
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d147      	bne.n	8001dda <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8001d4a:	783b      	ldrb	r3, [r7, #0]
 8001d4c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	7f3b      	ldrb	r3, [r7, #28]
 8001d54:	f362 0300 	bfi	r3, r2, #0, #1
 8001d58:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8001d5a:	783b      	ldrb	r3, [r7, #0]
 8001d5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	7f3b      	ldrb	r3, [r7, #28]
 8001d64:	f362 0341 	bfi	r3, r2, #1, #1
 8001d68:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8001d6a:	783b      	ldrb	r3, [r7, #0]
 8001d6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	7f3b      	ldrb	r3, [r7, #28]
 8001d74:	f362 0382 	bfi	r3, r2, #2, #1
 8001d78:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8001d7a:	783b      	ldrb	r3, [r7, #0]
 8001d7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	7f3b      	ldrb	r3, [r7, #28]
 8001d84:	f362 03c3 	bfi	r3, r2, #3, #1
 8001d88:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8001d8a:	783b      	ldrb	r3, [r7, #0]
 8001d8c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	7f3b      	ldrb	r3, [r7, #28]
 8001d94:	f362 1304 	bfi	r3, r2, #4, #1
 8001d98:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8001d9a:	783b      	ldrb	r3, [r7, #0]
 8001d9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	7f3b      	ldrb	r3, [r7, #28]
 8001da4:	f362 1345 	bfi	r3, r2, #5, #1
 8001da8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8001daa:	783b      	ldrb	r3, [r7, #0]
 8001dac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	7f3b      	ldrb	r3, [r7, #28]
 8001db4:	f362 1386 	bfi	r3, r2, #6, #1
 8001db8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8001dba:	783b      	ldrb	r3, [r7, #0]
 8001dbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	7f3b      	ldrb	r3, [r7, #28]
 8001dc4:	f362 13c7 	bfi	r3, r2, #7, #1
 8001dc8:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001dca:	f107 021c 	add.w	r2, r7, #28
 8001dce:	2301      	movs	r3, #1
 8001dd0:	210d      	movs	r1, #13
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fe1c 	bl	8001a10 <lsm6dsl_write_reg>
 8001dd8:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8001de0:	f107 0218 	add.w	r2, r7, #24
 8001de4:	2301      	movs	r3, #1
 8001de6:	215e      	movs	r1, #94	@ 0x5e
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fdf9 	bl	80019e0 <lsm6dsl_read_reg>
 8001dee:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d107      	bne.n	8001e06 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8001df6:	f107 0214 	add.w	r2, r7, #20
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	215f      	movs	r1, #95	@ 0x5f
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fdee 	bl	80019e0 <lsm6dsl_read_reg>
 8001e04:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d147      	bne.n	8001e9c <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	7e3b      	ldrb	r3, [r7, #24]
 8001e16:	f362 0300 	bfi	r3, r2, #0, #1
 8001e1a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8001e1c:	787b      	ldrb	r3, [r7, #1]
 8001e1e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	7e3b      	ldrb	r3, [r7, #24]
 8001e26:	f362 0341 	bfi	r3, r2, #1, #1
 8001e2a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	7e3b      	ldrb	r3, [r7, #24]
 8001e36:	f362 0382 	bfi	r3, r2, #2, #1
 8001e3a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	7e3b      	ldrb	r3, [r7, #24]
 8001e46:	f362 03c3 	bfi	r3, r2, #3, #1
 8001e4a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	7e3b      	ldrb	r3, [r7, #24]
 8001e56:	f362 1304 	bfi	r3, r2, #4, #1
 8001e5a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	7e3b      	ldrb	r3, [r7, #24]
 8001e66:	f362 1345 	bfi	r3, r2, #5, #1
 8001e6a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	7e3b      	ldrb	r3, [r7, #24]
 8001e76:	f362 1386 	bfi	r3, r2, #6, #1
 8001e7a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 8001e7c:	787b      	ldrb	r3, [r7, #1]
 8001e7e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	7e3b      	ldrb	r3, [r7, #24]
 8001e86:	f362 13c7 	bfi	r3, r2, #7, #1
 8001e8a:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8001e8c:	f107 0218 	add.w	r2, r7, #24
 8001e90:	2301      	movs	r3, #1
 8001e92:	215e      	movs	r1, #94	@ 0x5e
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff fdbb 	bl	8001a10 <lsm6dsl_write_reg>
 8001e9a:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8001ea2:	f107 0210 	add.w	r2, r7, #16
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	2113      	movs	r1, #19
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fd98 	bl	80019e0 <lsm6dsl_read_reg>
 8001eb0:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10f      	bne.n	8001ed8 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8001eb8:	78bb      	ldrb	r3, [r7, #2]
 8001eba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	7c3b      	ldrb	r3, [r7, #16]
 8001ec2:	f362 1304 	bfi	r3, r2, #4, #1
 8001ec6:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8001ec8:	f107 0210 	add.w	r2, r7, #16
 8001ecc:	2301      	movs	r3, #1
 8001ece:	2113      	movs	r1, #19
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff fd9d 	bl	8001a10 <lsm6dsl_write_reg>
 8001ed6:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d107      	bne.n	8001eee <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8001ede:	f107 0220 	add.w	r2, r7, #32
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	211a      	movs	r1, #26
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fd7a 	bl	80019e0 <lsm6dsl_read_reg>
 8001eec:	6278      	str	r0, [r7, #36]	@ 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d111      	bne.n	8001f18 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8001ef4:	78bb      	ldrb	r3, [r7, #2]
 8001ef6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f00:	f362 13c7 	bfi	r3, r2, #7, #1
 8001f04:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8001f08:	f107 0220 	add.w	r2, r7, #32
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	211a      	movs	r1, #26
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fd7d 	bl	8001a10 <lsm6dsl_write_reg>
 8001f16:	6278      	str	r0, [r7, #36]	@ 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d158      	bne.n	8001fd0 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8001f1e:	f107 020c 	add.w	r2, r7, #12
 8001f22:	2301      	movs	r3, #1
 8001f24:	2158      	movs	r1, #88	@ 0x58
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fd5a 	bl	80019e0 <lsm6dsl_read_reg>
 8001f2c:	6278      	str	r0, [r7, #36]	@ 0x24

    if ((val.int1_6d != 0x00U) ||
 8001f2e:	787b      	ldrb	r3, [r7, #1]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d141      	bne.n	8001fbe <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8001f3a:	787b      	ldrb	r3, [r7, #1]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d13b      	bne.n	8001fbe <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8001f46:	787b      	ldrb	r3, [r7, #1]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d135      	bne.n	8001fbe <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8001f52:	787b      	ldrb	r3, [r7, #1]
 8001f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f58:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d12f      	bne.n	8001fbe <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8001f5e:	787b      	ldrb	r3, [r7, #1]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d129      	bne.n	8001fbe <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8001f6a:	787b      	ldrb	r3, [r7, #1]
 8001f6c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001f70:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d123      	bne.n	8001fbe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8001f76:	7d3b      	ldrb	r3, [r7, #20]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d11d      	bne.n	8001fbe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8001f82:	7d3b      	ldrb	r3, [r7, #20]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d117      	bne.n	8001fbe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8001f8e:	7d3b      	ldrb	r3, [r7, #20]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d111      	bne.n	8001fbe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8001f9a:	7d3b      	ldrb	r3, [r7, #20]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10b      	bne.n	8001fbe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8001fa6:	7d3b      	ldrb	r3, [r7, #20]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8001fb2:	7d3b      	ldrb	r3, [r7, #20]
 8001fb4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001fb8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d004      	beq.n	8001fc8 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8001fbe:	7b3b      	ldrb	r3, [r7, #12]
 8001fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fc4:	733b      	strb	r3, [r7, #12]
 8001fc6:	e003      	b.n	8001fd0 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8001fc8:	7b3b      	ldrb	r3, [r7, #12]
 8001fca:	f36f 13c7 	bfc	r3, #7, #1
 8001fce:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8001fd6:	f107 020c 	add.w	r2, r7, #12
 8001fda:	2301      	movs	r3, #1
 8001fdc:	2158      	movs	r1, #88	@ 0x58
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fd16 	bl	8001a10 <lsm6dsl_write_reg>
 8001fe4:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return ret;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3728      	adds	r7, #40	@ 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001ffa:	f107 0214 	add.w	r2, r7, #20
 8001ffe:	2301      	movs	r3, #1
 8002000:	210d      	movs	r1, #13
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fcec 	bl	80019e0 <lsm6dsl_read_reg>
 8002008:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f040 80c0 	bne.w	8002192 <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8002012:	7d3b      	ldrb	r3, [r7, #20]
 8002014:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002018:	b2d9      	uxtb	r1, r3
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	7813      	ldrb	r3, [r2, #0]
 800201e:	f361 0300 	bfi	r3, r1, #0, #1
 8002022:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8002024:	7d3b      	ldrb	r3, [r7, #20]
 8002026:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800202a:	b2d9      	uxtb	r1, r3
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	7813      	ldrb	r3, [r2, #0]
 8002030:	f361 0341 	bfi	r3, r1, #1, #1
 8002034:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8002036:	7d3b      	ldrb	r3, [r7, #20]
 8002038:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800203c:	b2d9      	uxtb	r1, r3
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	7813      	ldrb	r3, [r2, #0]
 8002042:	f361 0382 	bfi	r3, r1, #2, #1
 8002046:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8002048:	7d3b      	ldrb	r3, [r7, #20]
 800204a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800204e:	b2d9      	uxtb	r1, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	7813      	ldrb	r3, [r2, #0]
 8002054:	f361 03c3 	bfi	r3, r1, #3, #1
 8002058:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 800205a:	7d3b      	ldrb	r3, [r7, #20]
 800205c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002060:	b2d9      	uxtb	r1, r3
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	7813      	ldrb	r3, [r2, #0]
 8002066:	f361 1304 	bfi	r3, r1, #4, #1
 800206a:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 800206c:	7d3b      	ldrb	r3, [r7, #20]
 800206e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002072:	b2d9      	uxtb	r1, r3
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	7813      	ldrb	r3, [r2, #0]
 8002078:	f361 1345 	bfi	r3, r1, #5, #1
 800207c:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 800207e:	7d3b      	ldrb	r3, [r7, #20]
 8002080:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002084:	b2d9      	uxtb	r1, r3
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	7813      	ldrb	r3, [r2, #0]
 800208a:	f361 1386 	bfi	r3, r1, #6, #1
 800208e:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8002090:	7d3b      	ldrb	r3, [r7, #20]
 8002092:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002096:	b2d9      	uxtb	r1, r3
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	7813      	ldrb	r3, [r2, #0]
 800209c:	f361 13c7 	bfi	r3, r1, #7, #1
 80020a0:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80020a2:	f107 0210 	add.w	r2, r7, #16
 80020a6:	2301      	movs	r3, #1
 80020a8:	215e      	movs	r1, #94	@ 0x5e
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fc98 	bl	80019e0 <lsm6dsl_read_reg>
 80020b0:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d16c      	bne.n	8002192 <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 80020b8:	7c3b      	ldrb	r3, [r7, #16]
 80020ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020be:	b2d9      	uxtb	r1, r3
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	7853      	ldrb	r3, [r2, #1]
 80020c4:	f361 0300 	bfi	r3, r1, #0, #1
 80020c8:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 80020ca:	7c3b      	ldrb	r3, [r7, #16]
 80020cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020d0:	b2d9      	uxtb	r1, r3
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	7853      	ldrb	r3, [r2, #1]
 80020d6:	f361 0341 	bfi	r3, r1, #1, #1
 80020da:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 80020dc:	7c3b      	ldrb	r3, [r7, #16]
 80020de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80020e2:	b2d9      	uxtb	r1, r3
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	7853      	ldrb	r3, [r2, #1]
 80020e8:	f361 0382 	bfi	r3, r1, #2, #1
 80020ec:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 80020ee:	7c3b      	ldrb	r3, [r7, #16]
 80020f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80020f4:	b2d9      	uxtb	r1, r3
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	7853      	ldrb	r3, [r2, #1]
 80020fa:	f361 03c3 	bfi	r3, r1, #3, #1
 80020fe:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8002100:	7c3b      	ldrb	r3, [r7, #16]
 8002102:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002106:	b2d9      	uxtb	r1, r3
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	7853      	ldrb	r3, [r2, #1]
 800210c:	f361 1304 	bfi	r3, r1, #4, #1
 8002110:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 8002112:	7c3b      	ldrb	r3, [r7, #16]
 8002114:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002118:	b2d9      	uxtb	r1, r3
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	7853      	ldrb	r3, [r2, #1]
 800211e:	f361 1345 	bfi	r3, r1, #5, #1
 8002122:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8002124:	7c3b      	ldrb	r3, [r7, #16]
 8002126:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800212a:	b2d9      	uxtb	r1, r3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	7853      	ldrb	r3, [r2, #1]
 8002130:	f361 1386 	bfi	r3, r1, #6, #1
 8002134:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8002136:	7c3b      	ldrb	r3, [r7, #16]
 8002138:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800213c:	b2d9      	uxtb	r1, r3
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	7853      	ldrb	r3, [r2, #1]
 8002142:	f361 13c7 	bfi	r3, r1, #7, #1
 8002146:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002148:	f107 020c 	add.w	r2, r7, #12
 800214c:	2301      	movs	r3, #1
 800214e:	2113      	movs	r1, #19
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fc45 	bl	80019e0 <lsm6dsl_read_reg>
 8002156:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d119      	bne.n	8002192 <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 800215e:	7b3b      	ldrb	r3, [r7, #12]
 8002160:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002164:	b2d9      	uxtb	r1, r3
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	7893      	ldrb	r3, [r2, #2]
 800216a:	f361 0300 	bfi	r3, r1, #0, #1
 800216e:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002170:	f107 0218 	add.w	r2, r7, #24
 8002174:	2301      	movs	r3, #1
 8002176:	211a      	movs	r1, #26
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fc31 	bl	80019e0 <lsm6dsl_read_reg>
 800217e:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8002180:	7e3b      	ldrb	r3, [r7, #24]
 8002182:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002186:	b2d9      	uxtb	r1, r3
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	7893      	ldrb	r3, [r2, #2]
 800218c:	f361 0300 	bfi	r3, r1, #0, #1
 8002190:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 8002192:	69fb      	ldr	r3, [r7, #28]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3720      	adds	r7, #32
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80021a8:	f107 0208 	add.w	r2, r7, #8
 80021ac:	2301      	movs	r3, #1
 80021ae:	210a      	movs	r1, #10
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff fc15 	bl	80019e0 <lsm6dsl_read_reg>
 80021b6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10f      	bne.n	80021de <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	7a3b      	ldrb	r3, [r7, #8]
 80021c8:	f362 0302 	bfi	r3, r2, #0, #3
 80021cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80021ce:	f107 0208 	add.w	r2, r7, #8
 80021d2:	2301      	movs	r3, #1
 80021d4:	210a      	movs	r1, #10
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fc1a 	bl	8001a10 <lsm6dsl_write_reg>
 80021dc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002228 <HAL_Init+0x40>)
 80021f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <HAL_Init+0x40>)
 80021fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002204:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a07      	ldr	r2, [pc, #28]	@ (8002228 <HAL_Init+0x40>)
 800220a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002210:	2003      	movs	r0, #3
 8002212:	f000 f94f 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002216:	2000      	movs	r0, #0
 8002218:	f000 f808 	bl	800222c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800221c:	f7fe fd9e 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023c00 	.word	0x40023c00

0800222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <HAL_InitTick+0x54>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_InitTick+0x58>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002242:	fbb3 f3f1 	udiv	r3, r3, r1
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f967 	bl	800251e <HAL_SYSTICK_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e00e      	b.n	8002278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b0f      	cmp	r3, #15
 800225e:	d80a      	bhi.n	8002276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002260:	2200      	movs	r2, #0
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f000 f92f 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800226c:	4a06      	ldr	r2, [pc, #24]	@ (8002288 <HAL_InitTick+0x5c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000134 	.word	0x20000134
 8002284:	2000013c 	.word	0x2000013c
 8002288:	20000138 	.word	0x20000138

0800228c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_IncTick+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_IncTick+0x24>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <HAL_IncTick+0x24>)
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	2000013c 	.word	0x2000013c
 80022b0:	2000029c 	.word	0x2000029c

080022b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b03      	ldr	r3, [pc, #12]	@ (80022c8 <HAL_GetTick+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	2000029c 	.word	0x2000029c

080022cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff ffee 	bl	80022b4 <HAL_GetTick>
 80022d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d005      	beq.n	80022f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <HAL_Delay+0x44>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f2:	bf00      	nop
 80022f4:	f7ff ffde 	bl	80022b4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	d8f7      	bhi.n	80022f4 <HAL_Delay+0x28>
  {
  }
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	2000013c 	.word	0x2000013c

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4907      	ldr	r1, [pc, #28]	@ (80023b0 <__NVIC_EnableIRQ+0x38>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	@ (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	@ (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	@ 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff8e 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff29 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff3e 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff8e 	bl	8002408 <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5d 	bl	80023b4 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff31 	bl	8002378 <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa2 	bl	8002470 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	@ 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e165      	b.n	8002820 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 8154 	bne.w	800281a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d005      	beq.n	800258a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	2b02      	cmp	r3, #2
 8002588:	d130      	bne.n	80025ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 0201 	and.w	r2, r3, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d017      	beq.n	8002628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80ae 	beq.w	800281a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002838 <HAL_GPIO_Init+0x300>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002838 <HAL_GPIO_Init+0x300>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002838 <HAL_GPIO_Init+0x300>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026da:	4a58      	ldr	r2, [pc, #352]	@ (800283c <HAL_GPIO_Init+0x304>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4f      	ldr	r2, [pc, #316]	@ (8002840 <HAL_GPIO_Init+0x308>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d025      	beq.n	8002752 <HAL_GPIO_Init+0x21a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4e      	ldr	r2, [pc, #312]	@ (8002844 <HAL_GPIO_Init+0x30c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01f      	beq.n	800274e <HAL_GPIO_Init+0x216>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4d      	ldr	r2, [pc, #308]	@ (8002848 <HAL_GPIO_Init+0x310>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d019      	beq.n	800274a <HAL_GPIO_Init+0x212>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4c      	ldr	r2, [pc, #304]	@ (800284c <HAL_GPIO_Init+0x314>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_GPIO_Init+0x20e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4b      	ldr	r2, [pc, #300]	@ (8002850 <HAL_GPIO_Init+0x318>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00d      	beq.n	8002742 <HAL_GPIO_Init+0x20a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4a      	ldr	r2, [pc, #296]	@ (8002854 <HAL_GPIO_Init+0x31c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d007      	beq.n	800273e <HAL_GPIO_Init+0x206>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a49      	ldr	r2, [pc, #292]	@ (8002858 <HAL_GPIO_Init+0x320>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d101      	bne.n	800273a <HAL_GPIO_Init+0x202>
 8002736:	2306      	movs	r3, #6
 8002738:	e00c      	b.n	8002754 <HAL_GPIO_Init+0x21c>
 800273a:	2307      	movs	r3, #7
 800273c:	e00a      	b.n	8002754 <HAL_GPIO_Init+0x21c>
 800273e:	2305      	movs	r3, #5
 8002740:	e008      	b.n	8002754 <HAL_GPIO_Init+0x21c>
 8002742:	2304      	movs	r3, #4
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x21c>
 8002746:	2303      	movs	r3, #3
 8002748:	e004      	b.n	8002754 <HAL_GPIO_Init+0x21c>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <HAL_GPIO_Init+0x21c>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x21c>
 8002752:	2300      	movs	r3, #0
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	f002 0203 	and.w	r2, r2, #3
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	4093      	lsls	r3, r2
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002764:	4935      	ldr	r1, [pc, #212]	@ (800283c <HAL_GPIO_Init+0x304>)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002772:	4b3a      	ldr	r3, [pc, #232]	@ (800285c <HAL_GPIO_Init+0x324>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002796:	4a31      	ldr	r2, [pc, #196]	@ (800285c <HAL_GPIO_Init+0x324>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800279c:	4b2f      	ldr	r3, [pc, #188]	@ (800285c <HAL_GPIO_Init+0x324>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c0:	4a26      	ldr	r2, [pc, #152]	@ (800285c <HAL_GPIO_Init+0x324>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027c6:	4b25      	ldr	r3, [pc, #148]	@ (800285c <HAL_GPIO_Init+0x324>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ea:	4a1c      	ldr	r2, [pc, #112]	@ (800285c <HAL_GPIO_Init+0x324>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f0:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <HAL_GPIO_Init+0x324>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002814:	4a11      	ldr	r2, [pc, #68]	@ (800285c <HAL_GPIO_Init+0x324>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3301      	adds	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	f67f ae96 	bls.w	8002554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3724      	adds	r7, #36	@ 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	40013800 	.word	0x40013800
 8002840:	40020000 	.word	0x40020000
 8002844:	40020400 	.word	0x40020400
 8002848:	40020800 	.word	0x40020800
 800284c:	40020c00 	.word	0x40020c00
 8002850:	40021000 	.word	0x40021000
 8002854:	40021400 	.word	0x40021400
 8002858:	40021800 	.word	0x40021800
 800285c:	40013c00 	.word	0x40013c00

08002860 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e0c7      	b.n	8002a0c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800287c:	2201      	movs	r2, #1
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	429a      	cmp	r2, r3
 8002894:	f040 80b7 	bne.w	8002a06 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002898:	4a62      	ldr	r2, [pc, #392]	@ (8002a24 <HAL_GPIO_DeInit+0x1c4>)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	220f      	movs	r2, #15
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	4013      	ands	r3, r2
 80028b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a5a      	ldr	r2, [pc, #360]	@ (8002a28 <HAL_GPIO_DeInit+0x1c8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d025      	beq.n	800290e <HAL_GPIO_DeInit+0xae>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a59      	ldr	r2, [pc, #356]	@ (8002a2c <HAL_GPIO_DeInit+0x1cc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01f      	beq.n	800290a <HAL_GPIO_DeInit+0xaa>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a58      	ldr	r2, [pc, #352]	@ (8002a30 <HAL_GPIO_DeInit+0x1d0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d019      	beq.n	8002906 <HAL_GPIO_DeInit+0xa6>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a57      	ldr	r2, [pc, #348]	@ (8002a34 <HAL_GPIO_DeInit+0x1d4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_DeInit+0xa2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a56      	ldr	r2, [pc, #344]	@ (8002a38 <HAL_GPIO_DeInit+0x1d8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00d      	beq.n	80028fe <HAL_GPIO_DeInit+0x9e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a55      	ldr	r2, [pc, #340]	@ (8002a3c <HAL_GPIO_DeInit+0x1dc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_DeInit+0x9a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a54      	ldr	r2, [pc, #336]	@ (8002a40 <HAL_GPIO_DeInit+0x1e0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_GPIO_DeInit+0x96>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00c      	b.n	8002910 <HAL_GPIO_DeInit+0xb0>
 80028f6:	2307      	movs	r3, #7
 80028f8:	e00a      	b.n	8002910 <HAL_GPIO_DeInit+0xb0>
 80028fa:	2305      	movs	r3, #5
 80028fc:	e008      	b.n	8002910 <HAL_GPIO_DeInit+0xb0>
 80028fe:	2304      	movs	r3, #4
 8002900:	e006      	b.n	8002910 <HAL_GPIO_DeInit+0xb0>
 8002902:	2303      	movs	r3, #3
 8002904:	e004      	b.n	8002910 <HAL_GPIO_DeInit+0xb0>
 8002906:	2302      	movs	r3, #2
 8002908:	e002      	b.n	8002910 <HAL_GPIO_DeInit+0xb0>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_GPIO_DeInit+0xb0>
 800290e:	2300      	movs	r3, #0
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	f002 0203 	and.w	r2, r2, #3
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	4093      	lsls	r3, r2
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	429a      	cmp	r2, r3
 800291e:	d132      	bne.n	8002986 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002920:	4b48      	ldr	r3, [pc, #288]	@ (8002a44 <HAL_GPIO_DeInit+0x1e4>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	43db      	mvns	r3, r3
 8002928:	4946      	ldr	r1, [pc, #280]	@ (8002a44 <HAL_GPIO_DeInit+0x1e4>)
 800292a:	4013      	ands	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800292e:	4b45      	ldr	r3, [pc, #276]	@ (8002a44 <HAL_GPIO_DeInit+0x1e4>)
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	4943      	ldr	r1, [pc, #268]	@ (8002a44 <HAL_GPIO_DeInit+0x1e4>)
 8002938:	4013      	ands	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800293c:	4b41      	ldr	r3, [pc, #260]	@ (8002a44 <HAL_GPIO_DeInit+0x1e4>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43db      	mvns	r3, r3
 8002944:	493f      	ldr	r1, [pc, #252]	@ (8002a44 <HAL_GPIO_DeInit+0x1e4>)
 8002946:	4013      	ands	r3, r2
 8002948:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800294a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a44 <HAL_GPIO_DeInit+0x1e4>)
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43db      	mvns	r3, r3
 8002952:	493c      	ldr	r1, [pc, #240]	@ (8002a44 <HAL_GPIO_DeInit+0x1e4>)
 8002954:	4013      	ands	r3, r2
 8002956:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002968:	4a2e      	ldr	r2, [pc, #184]	@ (8002a24 <HAL_GPIO_DeInit+0x1c4>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	43da      	mvns	r2, r3
 8002978:	482a      	ldr	r0, [pc, #168]	@ (8002a24 <HAL_GPIO_DeInit+0x1c4>)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	400a      	ands	r2, r1
 8002980:	3302      	adds	r3, #2
 8002982:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2103      	movs	r1, #3
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	401a      	ands	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	08da      	lsrs	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3208      	adds	r2, #8
 80029a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	08d2      	lsrs	r2, r2, #3
 80029bc:	4019      	ands	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2103      	movs	r1, #3
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	401a      	ands	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	2101      	movs	r1, #1
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	401a      	ands	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2103      	movs	r1, #3
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	401a      	ands	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b0f      	cmp	r3, #15
 8002a10:	f67f af34 	bls.w	800287c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40013800 	.word	0x40013800
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40021400 	.word	0x40021400
 8002a40:	40021800 	.word	0x40021800
 8002a44:	40013c00 	.word	0x40013c00

08002a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
 8002a54:	4613      	mov	r3, r2
 8002a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a58:	787b      	ldrb	r3, [r7, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a64:	e003      	b.n	8002a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a66:	887b      	ldrh	r3, [r7, #2]
 8002a68:	041a      	lsls	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	619a      	str	r2, [r3, #24]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a86:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a92:	4a05      	ldr	r2, [pc, #20]	@ (8002aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe f942 	bl	8000d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40013c00 	.word	0x40013c00

08002aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0cc      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b68      	ldr	r3, [pc, #416]	@ (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d90c      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b65      	ldr	r3, [pc, #404]	@ (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b63      	ldr	r3, [pc, #396]	@ (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0b8      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b00:	4b59      	ldr	r3, [pc, #356]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a58      	ldr	r2, [pc, #352]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b18:	4b53      	ldr	r3, [pc, #332]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	4b50      	ldr	r3, [pc, #320]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	494d      	ldr	r1, [pc, #308]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d044      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b47      	ldr	r3, [pc, #284]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d119      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e07f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e06f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e067      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b37      	ldr	r3, [pc, #220]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4934      	ldr	r1, [pc, #208]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b9c:	f7ff fb8a 	bl	80022b4 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7ff fb86 	bl	80022b4 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e04f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b2b      	ldr	r3, [pc, #172]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b25      	ldr	r3, [pc, #148]	@ (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d20c      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b22      	ldr	r3, [pc, #136]	@ (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b20      	ldr	r3, [pc, #128]	@ (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e032      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c00:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4916      	ldr	r1, [pc, #88]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c1e:	4b12      	ldr	r3, [pc, #72]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	490e      	ldr	r1, [pc, #56]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c32:	f000 f855 	bl	8002ce0 <HAL_RCC_GetSysClockFreq>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	490a      	ldr	r1, [pc, #40]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	5ccb      	ldrb	r3, [r1, r3]
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	4a09      	ldr	r2, [pc, #36]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c4e:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff faea 	bl	800222c <HAL_InitTick>

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023c00 	.word	0x40023c00
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	08004590 	.word	0x08004590
 8002c70:	20000134 	.word	0x20000134
 8002c74:	20000138 	.word	0x20000138

08002c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c7c:	4b03      	ldr	r3, [pc, #12]	@ (8002c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000134 	.word	0x20000134

08002c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c94:	f7ff fff0 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	0a9b      	lsrs	r3, r3, #10
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	4903      	ldr	r1, [pc, #12]	@ (8002cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca6:	5ccb      	ldrb	r3, [r1, r3]
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	080045a0 	.word	0x080045a0

08002cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cbc:	f7ff ffdc 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	0b5b      	lsrs	r3, r3, #13
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4903      	ldr	r1, [pc, #12]	@ (8002cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	080045a0 	.word	0x080045a0

08002ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce4:	b0ae      	sub	sp, #184	@ 0xb8
 8002ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d06:	4bcb      	ldr	r3, [pc, #812]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	f200 8206 	bhi.w	8003120 <HAL_RCC_GetSysClockFreq+0x440>
 8002d14:	a201      	add	r2, pc, #4	@ (adr r2, 8002d1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08003121 	.word	0x08003121
 8002d24:	08003121 	.word	0x08003121
 8002d28:	08003121 	.word	0x08003121
 8002d2c:	08002d59 	.word	0x08002d59
 8002d30:	08003121 	.word	0x08003121
 8002d34:	08003121 	.word	0x08003121
 8002d38:	08003121 	.word	0x08003121
 8002d3c:	08002d61 	.word	0x08002d61
 8002d40:	08003121 	.word	0x08003121
 8002d44:	08003121 	.word	0x08003121
 8002d48:	08003121 	.word	0x08003121
 8002d4c:	08002f51 	.word	0x08002f51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4bb9      	ldr	r3, [pc, #740]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002d56:	e1e7      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d58:	4bb8      	ldr	r3, [pc, #736]	@ (800303c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d5e:	e1e3      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d60:	4bb4      	ldr	r3, [pc, #720]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d6c:	4bb1      	ldr	r3, [pc, #708]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d071      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d78:	4bae      	ldr	r3, [pc, #696]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d84:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d9e:	4622      	mov	r2, r4
 8002da0:	462b      	mov	r3, r5
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	0159      	lsls	r1, r3, #5
 8002dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db0:	0150      	lsls	r0, r2, #5
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4621      	mov	r1, r4
 8002db8:	1a51      	subs	r1, r2, r1
 8002dba:	6439      	str	r1, [r7, #64]	@ 0x40
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002dd0:	4649      	mov	r1, r9
 8002dd2:	018b      	lsls	r3, r1, #6
 8002dd4:	4641      	mov	r1, r8
 8002dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dda:	4641      	mov	r1, r8
 8002ddc:	018a      	lsls	r2, r1, #6
 8002dde:	4641      	mov	r1, r8
 8002de0:	1a51      	subs	r1, r2, r1
 8002de2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002de4:	4649      	mov	r1, r9
 8002de6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002df8:	4649      	mov	r1, r9
 8002dfa:	00cb      	lsls	r3, r1, #3
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e02:	4641      	mov	r1, r8
 8002e04:	00ca      	lsls	r2, r1, #3
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e12:	462b      	mov	r3, r5
 8002e14:	460a      	mov	r2, r1
 8002e16:	eb42 0303 	adc.w	r3, r2, r3
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e28:	4629      	mov	r1, r5
 8002e2a:	024b      	lsls	r3, r1, #9
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e32:	4621      	mov	r1, r4
 8002e34:	024a      	lsls	r2, r1, #9
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002e4c:	f7fd f9da 	bl	8000204 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4613      	mov	r3, r2
 8002e56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e5a:	e067      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5c:	4b75      	ldr	r3, [pc, #468]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e68:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e76:	2300      	movs	r3, #0
 8002e78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002e7e:	4622      	mov	r2, r4
 8002e80:	462b      	mov	r3, r5
 8002e82:	f04f 0000 	mov.w	r0, #0
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	0159      	lsls	r1, r3, #5
 8002e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e90:	0150      	lsls	r0, r2, #5
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4621      	mov	r1, r4
 8002e98:	1a51      	subs	r1, r2, r1
 8002e9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	018b      	lsls	r3, r1, #6
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eba:	4641      	mov	r1, r8
 8002ebc:	018a      	lsls	r2, r1, #6
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ed6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ede:	4692      	mov	sl, r2
 8002ee0:	469b      	mov	fp, r3
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	eb1a 0303 	adds.w	r3, sl, r3
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	462b      	mov	r3, r5
 8002eec:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002efe:	4629      	mov	r1, r5
 8002f00:	028b      	lsls	r3, r1, #10
 8002f02:	4621      	mov	r1, r4
 8002f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f08:	4621      	mov	r1, r4
 8002f0a:	028a      	lsls	r2, r1, #10
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f14:	2200      	movs	r2, #0
 8002f16:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f18:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002f1e:	f7fd f971 	bl	8000204 <__aeabi_uldivmod>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4613      	mov	r3, r2
 8002f28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f2c:	4b41      	ldr	r3, [pc, #260]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	3301      	adds	r3, #1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f4e:	e0eb      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f50:	4b38      	ldr	r3, [pc, #224]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f5c:	4b35      	ldr	r3, [pc, #212]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d06b      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f68:	4b32      	ldr	r3, [pc, #200]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	2200      	movs	r2, #0
 8002f70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f84:	4622      	mov	r2, r4
 8002f86:	462b      	mov	r3, r5
 8002f88:	f04f 0000 	mov.w	r0, #0
 8002f8c:	f04f 0100 	mov.w	r1, #0
 8002f90:	0159      	lsls	r1, r3, #5
 8002f92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f96:	0150      	lsls	r0, r2, #5
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	1a51      	subs	r1, r2, r1
 8002fa0:	61b9      	str	r1, [r7, #24]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fb6:	4659      	mov	r1, fp
 8002fb8:	018b      	lsls	r3, r1, #6
 8002fba:	4651      	mov	r1, sl
 8002fbc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fc0:	4651      	mov	r1, sl
 8002fc2:	018a      	lsls	r2, r1, #6
 8002fc4:	4651      	mov	r1, sl
 8002fc6:	ebb2 0801 	subs.w	r8, r2, r1
 8002fca:	4659      	mov	r1, fp
 8002fcc:	eb63 0901 	sbc.w	r9, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe4:	4690      	mov	r8, r2
 8002fe6:	4699      	mov	r9, r3
 8002fe8:	4623      	mov	r3, r4
 8002fea:	eb18 0303 	adds.w	r3, r8, r3
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	462b      	mov	r3, r5
 8002ff2:	eb49 0303 	adc.w	r3, r9, r3
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003004:	4629      	mov	r1, r5
 8003006:	024b      	lsls	r3, r1, #9
 8003008:	4621      	mov	r1, r4
 800300a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800300e:	4621      	mov	r1, r4
 8003010:	024a      	lsls	r2, r1, #9
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800301a:	2200      	movs	r2, #0
 800301c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800301e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003020:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003024:	f7fd f8ee 	bl	8000204 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4613      	mov	r3, r2
 800302e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003032:	e065      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x420>
 8003034:	40023800 	.word	0x40023800
 8003038:	00f42400 	.word	0x00f42400
 800303c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003040:	4b3d      	ldr	r3, [pc, #244]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x458>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	2200      	movs	r2, #0
 8003048:	4618      	mov	r0, r3
 800304a:	4611      	mov	r1, r2
 800304c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003050:	653b      	str	r3, [r7, #80]	@ 0x50
 8003052:	2300      	movs	r3, #0
 8003054:	657b      	str	r3, [r7, #84]	@ 0x54
 8003056:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800305a:	4642      	mov	r2, r8
 800305c:	464b      	mov	r3, r9
 800305e:	f04f 0000 	mov.w	r0, #0
 8003062:	f04f 0100 	mov.w	r1, #0
 8003066:	0159      	lsls	r1, r3, #5
 8003068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306c:	0150      	lsls	r0, r2, #5
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4641      	mov	r1, r8
 8003074:	1a51      	subs	r1, r2, r1
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	4649      	mov	r1, r9
 800307a:	eb63 0301 	sbc.w	r3, r3, r1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800308c:	4659      	mov	r1, fp
 800308e:	018b      	lsls	r3, r1, #6
 8003090:	4651      	mov	r1, sl
 8003092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003096:	4651      	mov	r1, sl
 8003098:	018a      	lsls	r2, r1, #6
 800309a:	4651      	mov	r1, sl
 800309c:	1a54      	subs	r4, r2, r1
 800309e:	4659      	mov	r1, fp
 80030a0:	eb63 0501 	sbc.w	r5, r3, r1
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	00eb      	lsls	r3, r5, #3
 80030ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b2:	00e2      	lsls	r2, r4, #3
 80030b4:	4614      	mov	r4, r2
 80030b6:	461d      	mov	r5, r3
 80030b8:	4643      	mov	r3, r8
 80030ba:	18e3      	adds	r3, r4, r3
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	464b      	mov	r3, r9
 80030c0:	eb45 0303 	adc.w	r3, r5, r3
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030d2:	4629      	mov	r1, r5
 80030d4:	028b      	lsls	r3, r1, #10
 80030d6:	4621      	mov	r1, r4
 80030d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030dc:	4621      	mov	r1, r4
 80030de:	028a      	lsls	r2, r1, #10
 80030e0:	4610      	mov	r0, r2
 80030e2:	4619      	mov	r1, r3
 80030e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030e8:	2200      	movs	r2, #0
 80030ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030f2:	f7fd f887 	bl	8000204 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4613      	mov	r3, r2
 80030fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003100:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x458>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0f1b      	lsrs	r3, r3, #28
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800310e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800311e:	e003      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003122:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003126:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003128:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800312c:	4618      	mov	r0, r3
 800312e:	37b8      	adds	r7, #184	@ 0xb8
 8003130:	46bd      	mov	sp, r7
 8003132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	00f42400 	.word	0x00f42400

08003140 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e28d      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8083 	beq.w	8003266 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003160:	4b94      	ldr	r3, [pc, #592]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b04      	cmp	r3, #4
 800316a:	d019      	beq.n	80031a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800316c:	4b91      	ldr	r3, [pc, #580]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003174:	2b08      	cmp	r3, #8
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003178:	4b8e      	ldr	r3, [pc, #568]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003184:	d00c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003186:	4b8b      	ldr	r3, [pc, #556]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d112      	bne.n	80031b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003192:	4b88      	ldr	r3, [pc, #544]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800319e:	d10b      	bne.n	80031b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	4b84      	ldr	r3, [pc, #528]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d05b      	beq.n	8003264 <HAL_RCC_OscConfig+0x124>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d157      	bne.n	8003264 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e25a      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x90>
 80031c2:	4b7c      	ldr	r3, [pc, #496]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7b      	ldr	r2, [pc, #492]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e01d      	b.n	800320c <HAL_RCC_OscConfig+0xcc>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0xb4>
 80031da:	4b76      	ldr	r3, [pc, #472]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a75      	ldr	r2, [pc, #468]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b73      	ldr	r3, [pc, #460]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a72      	ldr	r2, [pc, #456]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0xcc>
 80031f4:	4b6f      	ldr	r3, [pc, #444]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a6e      	ldr	r2, [pc, #440]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b6c      	ldr	r3, [pc, #432]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6b      	ldr	r2, [pc, #428]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7ff f84e 	bl	80022b4 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7ff f84a 	bl	80022b4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e21f      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b61      	ldr	r3, [pc, #388]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0xdc>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7ff f83a 	bl	80022b4 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003244:	f7ff f836 	bl	80022b4 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e20b      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003256:	4b57      	ldr	r3, [pc, #348]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x104>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d06f      	beq.n	8003352 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003272:	4b50      	ldr	r3, [pc, #320]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b00      	cmp	r3, #0
 800327c:	d017      	beq.n	80032ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800327e:	4b4d      	ldr	r3, [pc, #308]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003286:	2b08      	cmp	r3, #8
 8003288:	d105      	bne.n	8003296 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800328a:	4b4a      	ldr	r3, [pc, #296]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003296:	4b47      	ldr	r3, [pc, #284]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	d11c      	bne.n	80032dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a2:	4b44      	ldr	r3, [pc, #272]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d116      	bne.n	80032dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ae:	4b41      	ldr	r3, [pc, #260]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_RCC_OscConfig+0x186>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e1d3      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c6:	4b3b      	ldr	r3, [pc, #236]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4937      	ldr	r1, [pc, #220]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	e03a      	b.n	8003352 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e4:	4b34      	ldr	r3, [pc, #208]	@ (80033b8 <HAL_RCC_OscConfig+0x278>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fe ffe3 	bl	80022b4 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f2:	f7fe ffdf 	bl	80022b4 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1b4      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	4b2b      	ldr	r3, [pc, #172]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b28      	ldr	r3, [pc, #160]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4925      	ldr	r1, [pc, #148]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
 8003324:	e015      	b.n	8003352 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003326:	4b24      	ldr	r3, [pc, #144]	@ (80033b8 <HAL_RCC_OscConfig+0x278>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe ffc2 	bl	80022b4 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003334:	f7fe ffbe 	bl	80022b4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e193      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d036      	beq.n	80033cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d016      	beq.n	8003394 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003366:	4b15      	ldr	r3, [pc, #84]	@ (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe ffa2 	bl	80022b4 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003374:	f7fe ff9e 	bl	80022b4 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e173      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x234>
 8003392:	e01b      	b.n	80033cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fe ff8b 	bl	80022b4 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a0:	e00e      	b.n	80033c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a2:	f7fe ff87 	bl	80022b4 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d907      	bls.n	80033c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e15c      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	42470000 	.word	0x42470000
 80033bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	4b8a      	ldr	r3, [pc, #552]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ea      	bne.n	80033a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8097 	beq.w	8003508 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b83      	ldr	r3, [pc, #524]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	4b7f      	ldr	r3, [pc, #508]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	4a7e      	ldr	r2, [pc, #504]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033fa:	4b7c      	ldr	r3, [pc, #496]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b79      	ldr	r3, [pc, #484]	@ (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d118      	bne.n	8003448 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a75      	ldr	r2, [pc, #468]	@ (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fe ff47 	bl	80022b4 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fe ff43 	bl	80022b4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e118      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	4b6c      	ldr	r3, [pc, #432]	@ (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d106      	bne.n	800345e <HAL_RCC_OscConfig+0x31e>
 8003450:	4b66      	ldr	r3, [pc, #408]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	4a65      	ldr	r2, [pc, #404]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	@ 0x70
 800345c:	e01c      	b.n	8003498 <HAL_RCC_OscConfig+0x358>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b05      	cmp	r3, #5
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x340>
 8003466:	4b61      	ldr	r3, [pc, #388]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346a:	4a60      	ldr	r2, [pc, #384]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	6713      	str	r3, [r2, #112]	@ 0x70
 8003472:	4b5e      	ldr	r3, [pc, #376]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003476:	4a5d      	ldr	r2, [pc, #372]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6713      	str	r3, [r2, #112]	@ 0x70
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0x358>
 8003480:	4b5a      	ldr	r3, [pc, #360]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003484:	4a59      	ldr	r2, [pc, #356]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	6713      	str	r3, [r2, #112]	@ 0x70
 800348c:	4b57      	ldr	r3, [pc, #348]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003490:	4a56      	ldr	r2, [pc, #344]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003492:	f023 0304 	bic.w	r3, r3, #4
 8003496:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe ff08 	bl	80022b4 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fe ff04 	bl	80022b4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0d7      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	4b4b      	ldr	r3, [pc, #300]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0ee      	beq.n	80034a8 <HAL_RCC_OscConfig+0x368>
 80034ca:	e014      	b.n	80034f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fe fef2 	bl	80022b4 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fe feee 	bl	80022b4 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0c1      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	4b40      	ldr	r3, [pc, #256]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1ee      	bne.n	80034d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fc:	4b3b      	ldr	r3, [pc, #236]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	4a3a      	ldr	r2, [pc, #232]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003506:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80ad 	beq.w	800366c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003512:	4b36      	ldr	r3, [pc, #216]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b08      	cmp	r3, #8
 800351c:	d060      	beq.n	80035e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d145      	bne.n	80035b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b33      	ldr	r3, [pc, #204]	@ (80035f4 <HAL_RCC_OscConfig+0x4b4>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fec2 	bl	80022b4 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe febe 	bl	80022b4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e093      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	4b29      	ldr	r3, [pc, #164]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	3b01      	subs	r3, #1
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	071b      	lsls	r3, r3, #28
 800357e:	491b      	ldr	r1, [pc, #108]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003584:	4b1b      	ldr	r3, [pc, #108]	@ (80035f4 <HAL_RCC_OscConfig+0x4b4>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fe fe93 	bl	80022b4 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003592:	f7fe fe8f 	bl	80022b4 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e064      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a4:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x452>
 80035b0:	e05c      	b.n	800366c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b2:	4b10      	ldr	r3, [pc, #64]	@ (80035f4 <HAL_RCC_OscConfig+0x4b4>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe fe7c 	bl	80022b4 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe fe78 	bl	80022b4 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e04d      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x480>
 80035de:	e045      	b.n	800366c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e040      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003678 <HAL_RCC_OscConfig+0x538>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d030      	beq.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d129      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d122      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800362e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003630:	4293      	cmp	r3, r2
 8003632:	d119      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	3b01      	subs	r3, #1
 8003642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d10f      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800

0800367c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e07b      	b.n	8003786 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d108      	bne.n	80036a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800369e:	d009      	beq.n	80036b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	61da      	str	r2, [r3, #28]
 80036a6:	e005      	b.n	80036b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd fb6c 	bl	8000dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003738:	ea42 0103 	orr.w	r1, r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003740:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	f003 0104 	and.w	r1, r3, #4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	f003 0210 	and.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003774:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e01a      	b.n	80037d6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fd fb3f 	bl	8000e3c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b088      	sub	sp, #32
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_SPI_Transmit+0x22>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e12d      	b.n	8003a5c <HAL_SPI_Transmit+0x27e>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003808:	f7fe fd54 	bl	80022b4 <HAL_GetTick>
 800380c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d002      	beq.n	8003824 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800381e:	2302      	movs	r3, #2
 8003820:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003822:	e116      	b.n	8003a52 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_SPI_Transmit+0x52>
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003834:	e10d      	b.n	8003a52 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2203      	movs	r2, #3
 800383a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	88fa      	ldrh	r2, [r7, #6]
 800384e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800387c:	d10f      	bne.n	800389e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800388c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800389c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a8:	2b40      	cmp	r3, #64	@ 0x40
 80038aa:	d007      	beq.n	80038bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038c4:	d14f      	bne.n	8003966 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_SPI_Transmit+0xf6>
 80038ce:	8afb      	ldrh	r3, [r7, #22]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d142      	bne.n	800395a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	881a      	ldrh	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e4:	1c9a      	adds	r2, r3, #2
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038f8:	e02f      	b.n	800395a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b02      	cmp	r3, #2
 8003906:	d112      	bne.n	800392e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	881a      	ldrh	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	1c9a      	adds	r2, r3, #2
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800392c:	e015      	b.n	800395a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392e:	f7fe fcc1 	bl	80022b4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d803      	bhi.n	8003946 <HAL_SPI_Transmit+0x168>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d102      	bne.n	800394c <HAL_SPI_Transmit+0x16e>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003958:	e07b      	b.n	8003a52 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ca      	bne.n	80038fa <HAL_SPI_Transmit+0x11c>
 8003964:	e050      	b.n	8003a08 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_SPI_Transmit+0x196>
 800396e:	8afb      	ldrh	r3, [r7, #22]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d144      	bne.n	80039fe <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	330c      	adds	r3, #12
 800397e:	7812      	ldrb	r2, [r2, #0]
 8003980:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800399a:	e030      	b.n	80039fe <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d113      	bne.n	80039d2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	7812      	ldrb	r2, [r2, #0]
 80039b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039d0:	e015      	b.n	80039fe <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d2:	f7fe fc6f 	bl	80022b4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d803      	bhi.n	80039ea <HAL_SPI_Transmit+0x20c>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d102      	bne.n	80039f0 <HAL_SPI_Transmit+0x212>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80039fc:	e029      	b.n	8003a52 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1c9      	bne.n	800399c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	6839      	ldr	r1, [r7, #0]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fa6f 	bl	8003ef0 <SPI_EndRxTxTransaction>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e003      	b.n	8003a52 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003a5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08c      	sub	sp, #48	@ 0x30
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a72:	2301      	movs	r3, #1
 8003a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_SPI_TransmitReceive+0x26>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e198      	b.n	8003dbc <HAL_SPI_TransmitReceive+0x358>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a92:	f7fe fc0f 	bl	80022b4 <HAL_GetTick>
 8003a96:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003aac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d00f      	beq.n	8003ad4 <HAL_SPI_TransmitReceive+0x70>
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aba:	d107      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x68>
 8003ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d003      	beq.n	8003ad4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
 8003ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003ad2:	e16d      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_SPI_TransmitReceive+0x82>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_SPI_TransmitReceive+0x82>
 8003ae0:	887b      	ldrh	r3, [r7, #2]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003aec:	e160      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d003      	beq.n	8003b02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2205      	movs	r2, #5
 8003afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	887a      	ldrh	r2, [r7, #2]
 8003b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	887a      	ldrh	r2, [r7, #2]
 8003b18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	887a      	ldrh	r2, [r7, #2]
 8003b2a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b42:	2b40      	cmp	r3, #64	@ 0x40
 8003b44:	d007      	beq.n	8003b56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b5e:	d17c      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_SPI_TransmitReceive+0x10a>
 8003b68:	8b7b      	ldrh	r3, [r7, #26]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d16a      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	1c9a      	adds	r2, r3, #2
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b92:	e057      	b.n	8003c44 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d11b      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x176>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d016      	beq.n	8003bda <HAL_SPI_TransmitReceive+0x176>
 8003bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d113      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	1c9a      	adds	r2, r3, #2
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d119      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x1b8>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d014      	beq.n	8003c1c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	b292      	uxth	r2, r2
 8003bfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c1c:	f7fe fb4a 	bl	80022b4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d80b      	bhi.n	8003c44 <HAL_SPI_TransmitReceive+0x1e0>
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d007      	beq.n	8003c44 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003c42:	e0b5      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1a2      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x130>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d19d      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x130>
 8003c58:	e080      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x204>
 8003c62:	8b7b      	ldrh	r3, [r7, #26]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d16f      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	7812      	ldrb	r2, [r2, #0]
 8003c74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c8e:	e05b      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d11c      	bne.n	8003cd8 <HAL_SPI_TransmitReceive+0x274>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d017      	beq.n	8003cd8 <HAL_SPI_TransmitReceive+0x274>
 8003ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d114      	bne.n	8003cd8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	7812      	ldrb	r2, [r2, #0]
 8003cba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d119      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x2b6>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d014      	beq.n	8003d1a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d16:	2301      	movs	r3, #1
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d1a:	f7fe facb 	bl	80022b4 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d803      	bhi.n	8003d32 <HAL_SPI_TransmitReceive+0x2ce>
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d102      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x2d4>
 8003d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d107      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003d46:	e033      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d19e      	bne.n	8003c90 <HAL_SPI_TransmitReceive+0x22c>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d199      	bne.n	8003c90 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f8c5 	bl	8003ef0 <SPI_EndRxTxTransaction>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003d78:	e01a      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003da6:	e003      	b.n	8003db0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003db8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3730      	adds	r7, #48	@ 0x30
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dd2:	b2db      	uxtb	r3, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003df0:	f7fe fa60 	bl	80022b4 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e00:	f7fe fa58 	bl	80022b4 <HAL_GetTick>
 8003e04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e06:	4b39      	ldr	r3, [pc, #228]	@ (8003eec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	015b      	lsls	r3, r3, #5
 8003e0c:	0d1b      	lsrs	r3, r3, #20
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	fb02 f303 	mul.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e16:	e054      	b.n	8003ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d050      	beq.n	8003ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e20:	f7fe fa48 	bl	80022b4 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d902      	bls.n	8003e36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d13d      	bne.n	8003eb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e4e:	d111      	bne.n	8003e74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e58:	d004      	beq.n	8003e64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e62:	d107      	bne.n	8003e74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e7c:	d10f      	bne.n	8003e9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e017      	b.n	8003ee2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	bf0c      	ite	eq
 8003ed2:	2301      	moveq	r3, #1
 8003ed4:	2300      	movne	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d19b      	bne.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000134 	.word	0x20000134

08003ef0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2201      	movs	r2, #1
 8003f04:	2102      	movs	r1, #2
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff ff6a 	bl	8003de0 <SPI_WaitFlagStateUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e032      	b.n	8003f88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f22:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <SPI_EndRxTxTransaction+0xa0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1b      	ldr	r2, [pc, #108]	@ (8003f94 <SPI_EndRxTxTransaction+0xa4>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	0d5b      	lsrs	r3, r3, #21
 8003f2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f40:	d112      	bne.n	8003f68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2180      	movs	r1, #128	@ 0x80
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff ff47 	bl	8003de0 <SPI_WaitFlagStateUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d016      	beq.n	8003f86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e00f      	b.n	8003f88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7e:	2b80      	cmp	r3, #128	@ 0x80
 8003f80:	d0f2      	beq.n	8003f68 <SPI_EndRxTxTransaction+0x78>
 8003f82:	e000      	b.n	8003f86 <SPI_EndRxTxTransaction+0x96>
        break;
 8003f84:	bf00      	nop
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000134 	.word	0x20000134
 8003f94:	165e9f81 	.word	0x165e9f81

08003f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e042      	b.n	8004030 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fc ff5a 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	@ 0x24
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f82b 	bl	8004038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800403c:	b0c0      	sub	sp, #256	@ 0x100
 800403e:	af00      	add	r7, sp, #0
 8004040:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	68d9      	ldr	r1, [r3, #12]
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	ea40 0301 	orr.w	r3, r0, r1
 8004060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	431a      	orrs	r2, r3
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	431a      	orrs	r2, r3
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004090:	f021 010c 	bic.w	r1, r1, #12
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800409e:	430b      	orrs	r3, r1
 80040a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	6999      	ldr	r1, [r3, #24]
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	ea40 0301 	orr.w	r3, r0, r1
 80040be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004304 <UART_SetConfig+0x2cc>)
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d005      	beq.n	80040d8 <UART_SetConfig+0xa0>
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004308 <UART_SetConfig+0x2d0>)
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d104      	bne.n	80040e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040d8:	f7fe fdee 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 80040dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040e0:	e003      	b.n	80040ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040e2:	f7fe fdd5 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 80040e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f4:	f040 810c 	bne.w	8004310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004102:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800410a:	4622      	mov	r2, r4
 800410c:	462b      	mov	r3, r5
 800410e:	1891      	adds	r1, r2, r2
 8004110:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004112:	415b      	adcs	r3, r3
 8004114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800411a:	4621      	mov	r1, r4
 800411c:	eb12 0801 	adds.w	r8, r2, r1
 8004120:	4629      	mov	r1, r5
 8004122:	eb43 0901 	adc.w	r9, r3, r1
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800413a:	4690      	mov	r8, r2
 800413c:	4699      	mov	r9, r3
 800413e:	4623      	mov	r3, r4
 8004140:	eb18 0303 	adds.w	r3, r8, r3
 8004144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004148:	462b      	mov	r3, r5
 800414a:	eb49 0303 	adc.w	r3, r9, r3
 800414e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800415e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004166:	460b      	mov	r3, r1
 8004168:	18db      	adds	r3, r3, r3
 800416a:	653b      	str	r3, [r7, #80]	@ 0x50
 800416c:	4613      	mov	r3, r2
 800416e:	eb42 0303 	adc.w	r3, r2, r3
 8004172:	657b      	str	r3, [r7, #84]	@ 0x54
 8004174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800417c:	f7fc f842 	bl	8000204 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4b61      	ldr	r3, [pc, #388]	@ (800430c <UART_SetConfig+0x2d4>)
 8004186:	fba3 2302 	umull	r2, r3, r3, r2
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	011c      	lsls	r4, r3, #4
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004198:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800419c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041a8:	415b      	adcs	r3, r3
 80041aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041b0:	4641      	mov	r1, r8
 80041b2:	eb12 0a01 	adds.w	sl, r2, r1
 80041b6:	4649      	mov	r1, r9
 80041b8:	eb43 0b01 	adc.w	fp, r3, r1
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d0:	4692      	mov	sl, r2
 80041d2:	469b      	mov	fp, r3
 80041d4:	4643      	mov	r3, r8
 80041d6:	eb1a 0303 	adds.w	r3, sl, r3
 80041da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041de:	464b      	mov	r3, r9
 80041e0:	eb4b 0303 	adc.w	r3, fp, r3
 80041e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041fc:	460b      	mov	r3, r1
 80041fe:	18db      	adds	r3, r3, r3
 8004200:	643b      	str	r3, [r7, #64]	@ 0x40
 8004202:	4613      	mov	r3, r2
 8004204:	eb42 0303 	adc.w	r3, r2, r3
 8004208:	647b      	str	r3, [r7, #68]	@ 0x44
 800420a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800420e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004212:	f7fb fff7 	bl	8000204 <__aeabi_uldivmod>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4611      	mov	r1, r2
 800421c:	4b3b      	ldr	r3, [pc, #236]	@ (800430c <UART_SetConfig+0x2d4>)
 800421e:	fba3 2301 	umull	r2, r3, r3, r1
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2264      	movs	r2, #100	@ 0x64
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	1acb      	subs	r3, r1, r3
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004232:	4b36      	ldr	r3, [pc, #216]	@ (800430c <UART_SetConfig+0x2d4>)
 8004234:	fba3 2302 	umull	r2, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004240:	441c      	add	r4, r3
 8004242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800424c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	1891      	adds	r1, r2, r2
 800425a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800425c:	415b      	adcs	r3, r3
 800425e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004264:	4641      	mov	r1, r8
 8004266:	1851      	adds	r1, r2, r1
 8004268:	6339      	str	r1, [r7, #48]	@ 0x30
 800426a:	4649      	mov	r1, r9
 800426c:	414b      	adcs	r3, r1
 800426e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800427c:	4659      	mov	r1, fp
 800427e:	00cb      	lsls	r3, r1, #3
 8004280:	4651      	mov	r1, sl
 8004282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004286:	4651      	mov	r1, sl
 8004288:	00ca      	lsls	r2, r1, #3
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	4603      	mov	r3, r0
 8004290:	4642      	mov	r2, r8
 8004292:	189b      	adds	r3, r3, r2
 8004294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004298:	464b      	mov	r3, r9
 800429a:	460a      	mov	r2, r1
 800429c:	eb42 0303 	adc.w	r3, r2, r3
 80042a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042b8:	460b      	mov	r3, r1
 80042ba:	18db      	adds	r3, r3, r3
 80042bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042be:	4613      	mov	r3, r2
 80042c0:	eb42 0303 	adc.w	r3, r2, r3
 80042c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042ce:	f7fb ff99 	bl	8000204 <__aeabi_uldivmod>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <UART_SetConfig+0x2d4>)
 80042d8:	fba3 1302 	umull	r1, r3, r3, r2
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	2164      	movs	r1, #100	@ 0x64
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	3332      	adds	r3, #50	@ 0x32
 80042ea:	4a08      	ldr	r2, [pc, #32]	@ (800430c <UART_SetConfig+0x2d4>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	f003 0207 	and.w	r2, r3, #7
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4422      	add	r2, r4
 80042fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004300:	e106      	b.n	8004510 <UART_SetConfig+0x4d8>
 8004302:	bf00      	nop
 8004304:	40011000 	.word	0x40011000
 8004308:	40011400 	.word	0x40011400
 800430c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800431a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800431e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004322:	4642      	mov	r2, r8
 8004324:	464b      	mov	r3, r9
 8004326:	1891      	adds	r1, r2, r2
 8004328:	6239      	str	r1, [r7, #32]
 800432a:	415b      	adcs	r3, r3
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
 800432e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004332:	4641      	mov	r1, r8
 8004334:	1854      	adds	r4, r2, r1
 8004336:	4649      	mov	r1, r9
 8004338:	eb43 0501 	adc.w	r5, r3, r1
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	00eb      	lsls	r3, r5, #3
 8004346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800434a:	00e2      	lsls	r2, r4, #3
 800434c:	4614      	mov	r4, r2
 800434e:	461d      	mov	r5, r3
 8004350:	4643      	mov	r3, r8
 8004352:	18e3      	adds	r3, r4, r3
 8004354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004358:	464b      	mov	r3, r9
 800435a:	eb45 0303 	adc.w	r3, r5, r3
 800435e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800436e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800437e:	4629      	mov	r1, r5
 8004380:	008b      	lsls	r3, r1, #2
 8004382:	4621      	mov	r1, r4
 8004384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004388:	4621      	mov	r1, r4
 800438a:	008a      	lsls	r2, r1, #2
 800438c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004390:	f7fb ff38 	bl	8000204 <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4b60      	ldr	r3, [pc, #384]	@ (800451c <UART_SetConfig+0x4e4>)
 800439a:	fba3 2302 	umull	r2, r3, r3, r2
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	011c      	lsls	r4, r3, #4
 80043a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	61b9      	str	r1, [r7, #24]
 80043bc:	415b      	adcs	r3, r3
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c4:	4641      	mov	r1, r8
 80043c6:	1851      	adds	r1, r2, r1
 80043c8:	6139      	str	r1, [r7, #16]
 80043ca:	4649      	mov	r1, r9
 80043cc:	414b      	adcs	r3, r1
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043dc:	4659      	mov	r1, fp
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	4651      	mov	r1, sl
 80043e8:	00ca      	lsls	r2, r1, #3
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	4642      	mov	r2, r8
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043f8:	464b      	mov	r3, r9
 80043fa:	460a      	mov	r2, r1
 80043fc:	eb42 0303 	adc.w	r3, r2, r3
 8004400:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800440e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800441c:	4649      	mov	r1, r9
 800441e:	008b      	lsls	r3, r1, #2
 8004420:	4641      	mov	r1, r8
 8004422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004426:	4641      	mov	r1, r8
 8004428:	008a      	lsls	r2, r1, #2
 800442a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800442e:	f7fb fee9 	bl	8000204 <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4611      	mov	r1, r2
 8004438:	4b38      	ldr	r3, [pc, #224]	@ (800451c <UART_SetConfig+0x4e4>)
 800443a:	fba3 2301 	umull	r2, r3, r3, r1
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	2264      	movs	r2, #100	@ 0x64
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	1acb      	subs	r3, r1, r3
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	3332      	adds	r3, #50	@ 0x32
 800444c:	4a33      	ldr	r2, [pc, #204]	@ (800451c <UART_SetConfig+0x4e4>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004458:	441c      	add	r4, r3
 800445a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800445e:	2200      	movs	r2, #0
 8004460:	673b      	str	r3, [r7, #112]	@ 0x70
 8004462:	677a      	str	r2, [r7, #116]	@ 0x74
 8004464:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	1891      	adds	r1, r2, r2
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	415b      	adcs	r3, r3
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004478:	4641      	mov	r1, r8
 800447a:	1851      	adds	r1, r2, r1
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	4649      	mov	r1, r9
 8004480:	414b      	adcs	r3, r1
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004490:	4659      	mov	r1, fp
 8004492:	00cb      	lsls	r3, r1, #3
 8004494:	4651      	mov	r1, sl
 8004496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800449a:	4651      	mov	r1, sl
 800449c:	00ca      	lsls	r2, r1, #3
 800449e:	4610      	mov	r0, r2
 80044a0:	4619      	mov	r1, r3
 80044a2:	4603      	mov	r3, r0
 80044a4:	4642      	mov	r2, r8
 80044a6:	189b      	adds	r3, r3, r2
 80044a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044aa:	464b      	mov	r3, r9
 80044ac:	460a      	mov	r2, r1
 80044ae:	eb42 0303 	adc.w	r3, r2, r3
 80044b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80044be:	667a      	str	r2, [r7, #100]	@ 0x64
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044cc:	4649      	mov	r1, r9
 80044ce:	008b      	lsls	r3, r1, #2
 80044d0:	4641      	mov	r1, r8
 80044d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d6:	4641      	mov	r1, r8
 80044d8:	008a      	lsls	r2, r1, #2
 80044da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044de:	f7fb fe91 	bl	8000204 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <UART_SetConfig+0x4e4>)
 80044e8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	2164      	movs	r1, #100	@ 0x64
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	3332      	adds	r3, #50	@ 0x32
 80044fa:	4a08      	ldr	r2, [pc, #32]	@ (800451c <UART_SetConfig+0x4e4>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	f003 020f 	and.w	r2, r3, #15
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4422      	add	r2, r4
 800450e:	609a      	str	r2, [r3, #8]
}
 8004510:	bf00      	nop
 8004512:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004516:	46bd      	mov	sp, r7
 8004518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451c:	51eb851f 	.word	0x51eb851f

08004520 <memset>:
 8004520:	4402      	add	r2, r0
 8004522:	4603      	mov	r3, r0
 8004524:	4293      	cmp	r3, r2
 8004526:	d100      	bne.n	800452a <memset+0xa>
 8004528:	4770      	bx	lr
 800452a:	f803 1b01 	strb.w	r1, [r3], #1
 800452e:	e7f9      	b.n	8004524 <memset+0x4>

08004530 <__libc_init_array>:
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	4d0d      	ldr	r5, [pc, #52]	@ (8004568 <__libc_init_array+0x38>)
 8004534:	4c0d      	ldr	r4, [pc, #52]	@ (800456c <__libc_init_array+0x3c>)
 8004536:	1b64      	subs	r4, r4, r5
 8004538:	10a4      	asrs	r4, r4, #2
 800453a:	2600      	movs	r6, #0
 800453c:	42a6      	cmp	r6, r4
 800453e:	d109      	bne.n	8004554 <__libc_init_array+0x24>
 8004540:	4d0b      	ldr	r5, [pc, #44]	@ (8004570 <__libc_init_array+0x40>)
 8004542:	4c0c      	ldr	r4, [pc, #48]	@ (8004574 <__libc_init_array+0x44>)
 8004544:	f000 f818 	bl	8004578 <_init>
 8004548:	1b64      	subs	r4, r4, r5
 800454a:	10a4      	asrs	r4, r4, #2
 800454c:	2600      	movs	r6, #0
 800454e:	42a6      	cmp	r6, r4
 8004550:	d105      	bne.n	800455e <__libc_init_array+0x2e>
 8004552:	bd70      	pop	{r4, r5, r6, pc}
 8004554:	f855 3b04 	ldr.w	r3, [r5], #4
 8004558:	4798      	blx	r3
 800455a:	3601      	adds	r6, #1
 800455c:	e7ee      	b.n	800453c <__libc_init_array+0xc>
 800455e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004562:	4798      	blx	r3
 8004564:	3601      	adds	r6, #1
 8004566:	e7f2      	b.n	800454e <__libc_init_array+0x1e>
 8004568:	080045b0 	.word	0x080045b0
 800456c:	080045b0 	.word	0x080045b0
 8004570:	080045b0 	.word	0x080045b0
 8004574:	080045b4 	.word	0x080045b4

08004578 <_init>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr

08004584 <_fini>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr

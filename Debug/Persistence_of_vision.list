
Persistence_of_vision.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004344  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004508  08004508  00005508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004520  08004520  00006140  2**0
                  CONTENTS
  4 .ARM          00000008  08004520  08004520  00005520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004528  08004528  00006140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004528  08004528  00005528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800452c  0800452c  0000552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000140  20000000  08004530  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000140  08004670  00006140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08004670  000062a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b5b  00000000  00000000  00006170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002074  00000000  00000000  0001dccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0001fd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f67  00000000  00000000  00021138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cb1  00000000  00000000  0002209f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c61  00000000  00000000  00043d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d158f  00000000  00000000  000549b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125f40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005550  00000000  00000000  00125f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0012b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000140 	.word	0x20000140
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080044f0 	.word	0x080044f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000144 	.word	0x20000144
 8000200:	080044f0 	.word	0x080044f0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <OutputEnable>:

	 would look like this, now i write each column into a vector, and i will light up these leds
	 with a delay to display the character
	 */

void OutputEnable(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Set PB2 low to enable output
 80004f8:	2200      	movs	r2, #0
 80004fa:	2104      	movs	r1, #4
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <OutputEnable+0x14>)
 80004fe:	f002 fa5f 	bl	80029c0 <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020400 	.word	0x40020400

0800050c <OutputDisable>:

void OutputDisable(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Set PB2 high to disable output
 8000510:	2201      	movs	r2, #1
 8000512:	2104      	movs	r1, #4
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <OutputDisable+0x14>)
 8000516:	f002 fa53 	bl	80029c0 <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020400 	.word	0x40020400

08000524 <LatchEnable>:

void LatchEnable(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // Set PB1 high
 8000528:	2201      	movs	r2, #1
 800052a:	2102      	movs	r1, #2
 800052c:	4806      	ldr	r0, [pc, #24]	@ (8000548 <LatchEnable+0x24>)
 800052e:	f002 fa47 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);  // Short delay to ensure the latch pulse is detected
 8000532:	2001      	movs	r0, #1
 8000534:	f001 fe86 	bl	8002244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Set PB1 low again
 8000538:	2200      	movs	r2, #0
 800053a:	2102      	movs	r1, #2
 800053c:	4802      	ldr	r0, [pc, #8]	@ (8000548 <LatchEnable+0x24>)
 800053e:	f002 fa3f 	bl	80029c0 <HAL_GPIO_WritePin>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40020400 	.word	0x40020400

0800054c <SendLEDData>:


void SendLEDData(uint8_t *data) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 8000554:	2305      	movs	r3, #5
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	e00a      	b.n	8000570 <SendLEDData+0x24>
		HAL_SPI_Transmit(&hspi2, &data[i], 1, 100);  // Send 1 byte per driver
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	18d1      	adds	r1, r2, r3
 8000560:	2364      	movs	r3, #100	@ 0x64
 8000562:	2201      	movs	r2, #1
 8000564:	4807      	ldr	r0, [pc, #28]	@ (8000584 <SendLEDData+0x38>)
 8000566:	f003 f8f6 	bl	8003756 <HAL_SPI_Transmit>
	for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3b01      	subs	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b00      	cmp	r3, #0
 8000574:	daf1      	bge.n	800055a <SendLEDData+0xe>
	}
	LatchEnable();  // Latch data once all have been transmitted
 8000576:	f7ff ffd5 	bl	8000524 <LatchEnable>
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000015c 	.word	0x2000015c

08000588 <CombineLEDData>:

void CombineLEDData(uint8_t *result, uint8_t ledIdx) {
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]

	for (int j = 0; j < 6; j++) {   // Each LED configuration is 6 bytes
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e016      	b.n	80005c8 <CombineLEDData+0x40>
		result[j] |= LED_ARRAY[ledIdx][j];
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	7819      	ldrb	r1, [r3, #0]
 80005a2:	78fa      	ldrb	r2, [r7, #3]
 80005a4:	480d      	ldr	r0, [pc, #52]	@ (80005dc <CombineLEDData+0x54>)
 80005a6:	4613      	mov	r3, r2
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	4413      	add	r3, r2
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	18c2      	adds	r2, r0, r3
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4413      	add	r3, r2
 80005b4:	781a      	ldrb	r2, [r3, #0]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	4403      	add	r3, r0
 80005bc:	430a      	orrs	r2, r1
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 6; j++) {   // Each LED configuration is 6 bytes
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3301      	adds	r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	dde5      	ble.n	800059a <CombineLEDData+0x12>
	}

}
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	20000014 	.word	0x20000014

080005e0 <CombineAndSendNEW>:
		result[j] += LED_ARRAY[ledIdx][j];
	}

}

void CombineAndSendNEW(uint16_t ledMask,uint8_t color) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	80fb      	strh	r3, [r7, #6]
 80005ec:	4613      	mov	r3, r2
 80005ee:	717b      	strb	r3, [r7, #5]

	//if the value of a variable is 1, concatenate that LED into the sum
	char a = (ledMask & 0b1000000000000000) >> 15;
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	0bdb      	lsrs	r3, r3, #15
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	77fb      	strb	r3, [r7, #31]
	char b = (ledMask & 0b0100000000000000) >> 14;
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	139b      	asrs	r3, r3, #14
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	77bb      	strb	r3, [r7, #30]
	char c = (ledMask & 0b0010000000000000) >> 13;
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	135b      	asrs	r3, r3, #13
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	777b      	strb	r3, [r7, #29]
	char d = (ledMask & 0b0001000000000000) >> 12;
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	131b      	asrs	r3, r3, #12
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	773b      	strb	r3, [r7, #28]
	char e = (ledMask & 0b0000100000000000) >> 11;
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	12db      	asrs	r3, r3, #11
 8000620:	b2db      	uxtb	r3, r3
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	76fb      	strb	r3, [r7, #27]
	char f = (ledMask & 0b0000010000000000) >> 10;
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	129b      	asrs	r3, r3, #10
 800062c:	b2db      	uxtb	r3, r3
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	76bb      	strb	r3, [r7, #26]
	char g = (ledMask & 0b0000001000000000) >> 9;
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	125b      	asrs	r3, r3, #9
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	767b      	strb	r3, [r7, #25]
	char h = (ledMask & 0b0000000100000000) >> 8;
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	121b      	asrs	r3, r3, #8
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	763b      	strb	r3, [r7, #24]
	char i = (ledMask & 0b0000000010000000) >> 7;
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	11db      	asrs	r3, r3, #7
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	75fb      	strb	r3, [r7, #23]
	char j = (ledMask & 0b0000000001000000) >> 6;
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	119b      	asrs	r3, r3, #6
 800065c:	b2db      	uxtb	r3, r3
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	75bb      	strb	r3, [r7, #22]
	char k = (ledMask & 0b0000000000100000) >> 5;
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	115b      	asrs	r3, r3, #5
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	757b      	strb	r3, [r7, #21]
	char l = (ledMask & 0b0000000000010000) >> 4;
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	111b      	asrs	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	753b      	strb	r3, [r7, #20]
	char m = (ledMask & 0b0000000000001000) >> 3;
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	10db      	asrs	r3, r3, #3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	74fb      	strb	r3, [r7, #19]
	char n = (ledMask & 0b0000000000000100) >> 2;
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	109b      	asrs	r3, r3, #2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	74bb      	strb	r3, [r7, #18]
	char o = (ledMask & 0b0000000000000010) >> 1;
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	105b      	asrs	r3, r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	747b      	strb	r3, [r7, #17]
	char p = (ledMask & 0b0000000000000001);
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	743b      	strb	r3, [r7, #16]

	uint8_t LED[6] = { 0 };
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	2300      	movs	r3, #0
 80006b0:	81bb      	strh	r3, [r7, #12]
	if(color == green){
		CombineLEDData(LED,green);
	}
*/

	if (a) {
 80006b2:	7ffb      	ldrb	r3, [r7, #31]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d005      	beq.n	80006c4 <CombineAndSendNEW+0xe4>
		CombineLEDData(LED, 0);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff62 	bl	8000588 <CombineLEDData>
	}
	if (b) {
 80006c4:	7fbb      	ldrb	r3, [r7, #30]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d005      	beq.n	80006d6 <CombineAndSendNEW+0xf6>
		CombineLEDData(LED, 3);
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2103      	movs	r1, #3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff59 	bl	8000588 <CombineLEDData>
	}
	if (c) {
 80006d6:	7f7b      	ldrb	r3, [r7, #29]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d005      	beq.n	80006e8 <CombineAndSendNEW+0x108>
		CombineLEDData(LED, 6);
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2106      	movs	r1, #6
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff50 	bl	8000588 <CombineLEDData>
	}
	if (d) {
 80006e8:	7f3b      	ldrb	r3, [r7, #28]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d005      	beq.n	80006fa <CombineAndSendNEW+0x11a>
		CombineLEDData(LED, 9);
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	2109      	movs	r1, #9
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff47 	bl	8000588 <CombineLEDData>
	}
	if (e) {
 80006fa:	7efb      	ldrb	r3, [r7, #27]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d005      	beq.n	800070c <CombineAndSendNEW+0x12c>
		CombineLEDData(LED, 12);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	210c      	movs	r1, #12
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff3e 	bl	8000588 <CombineLEDData>
	}
	if (f) {
 800070c:	7ebb      	ldrb	r3, [r7, #26]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d005      	beq.n	800071e <CombineAndSendNEW+0x13e>
		CombineLEDData(LED, 15);
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	210f      	movs	r1, #15
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff35 	bl	8000588 <CombineLEDData>
	}
	if (g) {
 800071e:	7e7b      	ldrb	r3, [r7, #25]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d005      	beq.n	8000730 <CombineAndSendNEW+0x150>
		CombineLEDData(LED, 18);
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2112      	movs	r1, #18
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff2c 	bl	8000588 <CombineLEDData>
	}
	if (h) {
 8000730:	7e3b      	ldrb	r3, [r7, #24]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d005      	beq.n	8000742 <CombineAndSendNEW+0x162>
		CombineLEDData(LED, 21);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2115      	movs	r1, #21
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff23 	bl	8000588 <CombineLEDData>
	}
	if (i) {
 8000742:	7dfb      	ldrb	r3, [r7, #23]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <CombineAndSendNEW+0x174>
		CombineLEDData(LED, 24);
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2118      	movs	r1, #24
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff1a 	bl	8000588 <CombineLEDData>
	}
	if (j) {
 8000754:	7dbb      	ldrb	r3, [r7, #22]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d005      	beq.n	8000766 <CombineAndSendNEW+0x186>
		CombineLEDData(LED, 27);
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	211b      	movs	r1, #27
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff11 	bl	8000588 <CombineLEDData>
	}
	if (k) {
 8000766:	7d7b      	ldrb	r3, [r7, #21]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d005      	beq.n	8000778 <CombineAndSendNEW+0x198>
		CombineLEDData(LED, 30);
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	211e      	movs	r1, #30
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff08 	bl	8000588 <CombineLEDData>
	}
	if (l) {
 8000778:	7d3b      	ldrb	r3, [r7, #20]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d005      	beq.n	800078a <CombineAndSendNEW+0x1aa>
		CombineLEDData(LED, 33);
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2121      	movs	r1, #33	@ 0x21
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff feff 	bl	8000588 <CombineLEDData>
	}
	if (m) {
 800078a:	7cfb      	ldrb	r3, [r7, #19]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d005      	beq.n	800079c <CombineAndSendNEW+0x1bc>
		CombineLEDData(LED, 36);
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2124      	movs	r1, #36	@ 0x24
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fef6 	bl	8000588 <CombineLEDData>
	}
	if (n) {
 800079c:	7cbb      	ldrb	r3, [r7, #18]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d005      	beq.n	80007ae <CombineAndSendNEW+0x1ce>
		CombineLEDData(LED, 39);
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2127      	movs	r1, #39	@ 0x27
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff feed 	bl	8000588 <CombineLEDData>
	}
	if (o) {
 80007ae:	7c7b      	ldrb	r3, [r7, #17]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d005      	beq.n	80007c0 <CombineAndSendNEW+0x1e0>
		CombineLEDData(LED, 42);
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	212a      	movs	r1, #42	@ 0x2a
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fee4 	bl	8000588 <CombineLEDData>
	}
	if (p) {
 80007c0:	7c3b      	ldrb	r3, [r7, #16]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d005      	beq.n	80007d2 <CombineAndSendNEW+0x1f2>
		CombineLEDData(LED, 45);
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	212d      	movs	r1, #45	@ 0x2d
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fedb 	bl	8000588 <CombineLEDData>
	}

	SendLEDData(LED);
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff feb8 	bl	800054c <SendLEDData>
}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <wrap_platform_read>:

int32_t wrap_platform_read(uint8_t Address, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	603a      	str	r2, [r7, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	460b      	mov	r3, r1
 80007f4:	71bb      	strb	r3, [r7, #6]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80bb      	strh	r3, [r7, #4]
	Reg |= 0x80;
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000800:	b2db      	uxtb	r3, r3
 8000802:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	480b      	ldr	r0, [pc, #44]	@ (8000838 <wrap_platform_read+0x54>)
 800080a:	f002 f8d9 	bl	80029c0 <HAL_GPIO_WritePin>
	BSP_SPI1_Send(&Reg, 1);
 800080e:	1dbb      	adds	r3, r7, #6
 8000810:	2101      	movs	r1, #1
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fbc8 	bl	8000fa8 <BSP_SPI1_Send>
	BSP_SPI1_SendRecv(&Reg, Bufp, len);
 8000818:	88ba      	ldrh	r2, [r7, #4]
 800081a:	1dbb      	adds	r3, r7, #6
 800081c:	6839      	ldr	r1, [r7, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fbde 	bl	8000fe0 <BSP_SPI1_SendRecv>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2110      	movs	r1, #16
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <wrap_platform_read+0x54>)
 800082a:	f002 f8c9 	bl	80029c0 <HAL_GPIO_WritePin>
	return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020000 	.word	0x40020000

0800083c <wrap_platform_write>:

int32_t wrap_platform_write(uint8_t Address, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	603a      	str	r2, [r7, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	460b      	mov	r3, r1
 800084c:	71bb      	strb	r3, [r7, #6]
 800084e:	4613      	mov	r3, r2
 8000850:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2110      	movs	r1, #16
 8000856:	480b      	ldr	r0, [pc, #44]	@ (8000884 <wrap_platform_write+0x48>)
 8000858:	f002 f8b2 	bl	80029c0 <HAL_GPIO_WritePin>
	BSP_SPI1_Send(&Reg, 1);
 800085c:	1dbb      	adds	r3, r7, #6
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fba1 	bl	8000fa8 <BSP_SPI1_Send>
	BSP_SPI1_Send(Bufp, len);
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	4619      	mov	r1, r3
 800086a:	6838      	ldr	r0, [r7, #0]
 800086c:	f000 fb9c 	bl	8000fa8 <BSP_SPI1_Send>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2110      	movs	r1, #16
 8000874:	4803      	ldr	r0, [pc, #12]	@ (8000884 <wrap_platform_write+0x48>)
 8000876:	f002 f8a3 	bl	80029c0 <HAL_GPIO_WritePin>
	return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020000 	.word	0x40020000

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088e:	f001 fc67 	bl	8002160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000892:	f000 f851 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000896:	f000 f91d 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089a:	f000 f8f1 	bl	8000a80 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800089e:	f000 f8b9 	bl	8000a14 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  OutputDisable();  // Disable outputs during initialization
 80008a2:	f7ff fe33 	bl	800050c <OutputDisable>
  SendLEDData(LED_CLEAR);
 80008a6:	4821      	ldr	r0, [pc, #132]	@ (800092c <main+0xa4>)
 80008a8:	f7ff fe50 	bl	800054c <SendLEDData>
  OutputEnable();
 80008ac:	f7ff fe22 	bl	80004f4 <OutputEnable>

  MEMS_Init();
 80008b0:	f000 f9aa 	bl	8000c08 <MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		LSM6DSL_Axes_t acc_axes;
		LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4619      	mov	r1, r3
 80008b8:	481d      	ldr	r0, [pc, #116]	@ (8000930 <main+0xa8>)
 80008ba:	f000 fe63 	bl	8001584 <LSM6DSL_ACC_GetAxes>
		//printf("% 5d, % 5d, % 5d\r\n", (int) acc_axes.x, (int) acc_axes.y,
			//	(int) acc_axes.z);

		CombineAndSendNEW(0b1111111111111111,red);
 80008be:	2105      	movs	r1, #5
 80008c0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80008c4:	f7ff fe8c 	bl	80005e0 <CombineAndSendNEW>
	  if( ((int) acc_axes.x) > 500){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008ce:	dd14      	ble.n	80008fa <main+0x72>

			for (int i = 0; i < 9; i++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e00d      	b.n	80008f2 <main+0x6a>
				CombineAndSendNEW(A[i],red);
 80008d6:	4a17      	ldr	r2, [pc, #92]	@ (8000934 <main+0xac>)
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008de:	2105      	movs	r1, #5
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe7d 	bl	80005e0 <CombineAndSendNEW>
				HAL_Delay(5);
 80008e6:	2005      	movs	r0, #5
 80008e8:	f001 fcac 	bl	8002244 <HAL_Delay>
			for (int i = 0; i < 9; i++) {
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	3301      	adds	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2b08      	cmp	r3, #8
 80008f6:	ddee      	ble.n	80008d6 <main+0x4e>
 80008f8:	e7dc      	b.n	80008b4 <main+0x2c>
			}

	  }

	  else if( ((int) acc_axes.x) < -500){
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8000900:	dad8      	bge.n	80008b4 <main+0x2c>

			for (int i = 0; i < 9; i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	e00d      	b.n	8000924 <main+0x9c>
				CombineAndSendNEW(A[i],red);
 8000908:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <main+0xac>)
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000910:	2105      	movs	r1, #5
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fe64 	bl	80005e0 <CombineAndSendNEW>
				HAL_Delay(5);
 8000918:	2005      	movs	r0, #5
 800091a:	f001 fc93 	bl	8002244 <HAL_Delay>
			for (int i = 0; i < 9; i++) {
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	3301      	adds	r3, #1
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	2b08      	cmp	r3, #8
 8000928:	ddee      	ble.n	8000908 <main+0x80>
  {
 800092a:	e7c3      	b.n	80008b4 <main+0x2c>
 800092c:	20000238 	.word	0x20000238
 8000930:	200001fc 	.word	0x200001fc
 8000934:	20000000 	.word	0x20000000

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	@ 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2234      	movs	r2, #52	@ 0x34
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f003 fda6 	bl	8004498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4b2a      	ldr	r3, [pc, #168]	@ (8000a0c <SystemClock_Config+0xd4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	4a29      	ldr	r2, [pc, #164]	@ (8000a0c <SystemClock_Config+0xd4>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	@ 0x40
 800096c:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <SystemClock_Config+0xd4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000978:	2300      	movs	r3, #0
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <SystemClock_Config+0xd8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000984:	4a22      	ldr	r2, [pc, #136]	@ (8000a10 <SystemClock_Config+0xd8>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <SystemClock_Config+0xd8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a0:	2310      	movs	r3, #16
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a4:	2302      	movs	r3, #2
 80009a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009ac:	2310      	movs	r3, #16
 80009ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fb76 	bl	80030b8 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009d2:	f000 f979 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2102      	movs	r1, #2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 f816 	bl	8002a24 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009fe:	f000 f963 	bl	8000cc8 <Error_Handler>
  }
}
 8000a02:	bf00      	nop
 8000a04:	3750      	adds	r7, #80	@ 0x50
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a18:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a1a:	4a18      	ldr	r2, [pc, #96]	@ (8000a7c <MX_SPI2_Init+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a60:	220a      	movs	r2, #10
 8000a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_SPI2_Init+0x64>)
 8000a66:	f002 fdc5 	bl	80035f4 <HAL_SPI_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a70:	f000 f92a 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000015c 	.word	0x2000015c
 8000a7c:	40003800 	.word	0x40003800

08000a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <MX_USART2_UART_Init+0x50>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000ab8:	f003 fa2a 	bl	8003f10 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ac2:	f000 f901 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200001b4 	.word	0x200001b4
 8000ad0:	40004400 	.word	0x40004400

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b42      	ldr	r3, [pc, #264]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a41      	ldr	r2, [pc, #260]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a3a      	ldr	r2, [pc, #232]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b38      	ldr	r3, [pc, #224]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a33      	ldr	r2, [pc, #204]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a2c      	ldr	r2, [pc, #176]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <MX_GPIO_Init+0x124>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	4827      	ldr	r0, [pc, #156]	@ (8000bfc <MX_GPIO_Init+0x128>)
 8000b60:	f001 ff2e 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_LE_Pin|LED_OE_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2106      	movs	r1, #6
 8000b68:	4825      	ldr	r0, [pc, #148]	@ (8000c00 <MX_GPIO_Init+0x12c>)
 8000b6a:	f001 ff29 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b74:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	481f      	ldr	r0, [pc, #124]	@ (8000c04 <MX_GPIO_Init+0x130>)
 8000b86:	f001 fc93 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4816      	ldr	r0, [pc, #88]	@ (8000bfc <MX_GPIO_Init+0x128>)
 8000ba2:	f001 fc85 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LE_Pin LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_LE_Pin|LED_OE_Pin;
 8000ba6:	2306      	movs	r3, #6
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4810      	ldr	r0, [pc, #64]	@ (8000c00 <MX_GPIO_Init+0x12c>)
 8000bbe:	f001 fc77 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_INT1_EXTI11_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_INT1_EXTI11_Pin;
 8000bc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6DSL_INT1_EXTI11_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480a      	ldr	r0, [pc, #40]	@ (8000c04 <MX_GPIO_Init+0x130>)
 8000bda:	f001 fc69 	bl	80024b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2028      	movs	r0, #40	@ 0x28
 8000be4:	f001 fc2d 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000be8:	2028      	movs	r0, #40	@ 0x28
 8000bea:	f001 fc46 	bl	800247a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	@ 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40020800 	.word	0x40020800

08000c08 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	@ 0x28
 8000c0c:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id ;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
	io_ctx.BusType = LSM6DSL_SPI_4WIRES_BUS;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
	io_ctx.Address = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	753b      	strb	r3, [r7, #20]
	io_ctx.Init = BSP_SPI1_Init;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MEMS_Init+0x7c>)
 8000c18:	60bb      	str	r3, [r7, #8]
	io_ctx.DeInit = BSP_SPI1_DeInit;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <MEMS_Init+0x80>)
 8000c1c:	60fb      	str	r3, [r7, #12]
	io_ctx.ReadReg = wrap_platform_read;
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <MEMS_Init+0x84>)
 8000c20:	61fb      	str	r3, [r7, #28]
	io_ctx.WriteReg = wrap_platform_write;
 8000c22:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <MEMS_Init+0x88>)
 8000c24:	61bb      	str	r3, [r7, #24]
	io_ctx.GetTick = BSP_GetTick;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <MEMS_Init+0x8c>)
 8000c28:	623b      	str	r3, [r7, #32]
	LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4819      	ldr	r0, [pc, #100]	@ (8000c98 <MEMS_Init+0x90>)
 8000c32:	f000 faeb 	bl	800120c <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4817      	ldr	r0, [pc, #92]	@ (8000c98 <MEMS_Init+0x90>)
 8000c3c:	f000 fbb9 	bl	80013b2 <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	2b6a      	cmp	r3, #106	@ 0x6a
 8000c44:	d001      	beq.n	8000c4a <MEMS_Init+0x42>
    Error_Handler();
 8000c46:	f000 f83f 	bl	8000cc8 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 8000c4a:	4813      	ldr	r0, [pc, #76]	@ (8000c98 <MEMS_Init+0x90>)
 8000c4c:	f000 fb48 	bl	80012e0 <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 8000c50:	eeb3 0a0a 	vmov.f32	s0, #58	@ 0x41d00000  26.0
 8000c54:	4810      	ldr	r0, [pc, #64]	@ (8000c98 <MEMS_Init+0x90>)
 8000c56:	f000 fc2d 	bl	80014b4 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <MEMS_Init+0x90>)
 8000c5e:	f000 fc45 	bl	80014ec <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 8000c62:	2101      	movs	r1, #1
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <MEMS_Init+0x90>)
 8000c66:	f000 fcff 	bl	8001668 <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480a      	ldr	r0, [pc, #40]	@ (8000c98 <MEMS_Init+0x90>)
 8000c70:	f000 fc64 	bl	800153c <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 8000c74:	4808      	ldr	r0, [pc, #32]	@ (8000c98 <MEMS_Init+0x90>)
 8000c76:	f000 fbb2 	bl	80013de <LSM6DSL_ACC_Enable>
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	@ 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	08000ef9 	.word	0x08000ef9
 8000c88:	08000f59 	.word	0x08000f59
 8000c8c:	080007e5 	.word	0x080007e5
 8000c90:	0800083d 	.word	0x0800083d
 8000c94:	08001021 	.word	0x08001021
 8000c98:	200001fc 	.word	0x200001fc

08000c9c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cac:	d104      	bne.n	8000cb8 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 8000cae:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a03      	ldr	r2, [pc, #12]	@ (8000cc4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000cb6:	6013      	str	r3, [r2, #0]
  }
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	20000234 	.word	0x20000234

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <Error_Handler+0x8>

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cea:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	4a08      	ldr	r2, [pc, #32]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d12:	2007      	movs	r0, #7
 8000d14:	f001 fb8a 	bl	800242c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a19      	ldr	r2, [pc, #100]	@ (8000da8 <HAL_SPI_MspInit+0x84>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12c      	bne.n	8000da0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	4a17      	ldr	r2, [pc, #92]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a10      	ldr	r2, [pc, #64]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000d7e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d90:	2305      	movs	r3, #5
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <HAL_SPI_MspInit+0x8c>)
 8000d9c:	f001 fb88 	bl	80024b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	@ 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40003800 	.word	0x40003800
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020400 	.word	0x40020400

08000db4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_SPI_MspDeInit+0x30>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10a      	bne.n	8000ddc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000dc6:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HAL_SPI_MspDeInit+0x34>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_SPI_MspDeInit+0x34>)
 8000dcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000dd0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 8000dd2:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <HAL_SPI_MspDeInit+0x38>)
 8000dd8:	f001 fcfe 	bl	80027d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40003800 	.word	0x40003800
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020400 	.word	0x40020400

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	@ 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a19      	ldr	r2, [pc, #100]	@ (8000e74 <HAL_UART_MspInit+0x84>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12b      	bne.n	8000e6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	4a17      	ldr	r2, [pc, #92]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a10      	ldr	r2, [pc, #64]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <HAL_UART_MspInit+0x8c>)
 8000e66:	f001 fb23 	bl	80024b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	@ 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f001 f995 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}

08000ede <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000ee2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000ee6:	f001 fd85 	bl	80029f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000eea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000eee:	f001 fd81 	bl	80029f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000f02:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <BSP_SPI1_Init+0x54>)
 8000f04:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <BSP_SPI1_Init+0x58>)
 8000f06:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <BSP_SPI1_Init+0x5c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	4911      	ldr	r1, [pc, #68]	@ (8000f54 <BSP_SPI1_Init+0x5c>)
 8000f10:	600a      	str	r2, [r1, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d114      	bne.n	8000f40 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <BSP_SPI1_Init+0x54>)
 8000f18:	f002 ff10 	bl	8003d3c <HAL_SPI_GetState>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10e      	bne.n	8000f40 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000f22:	480a      	ldr	r0, [pc, #40]	@ (8000f4c <BSP_SPI1_Init+0x54>)
 8000f24:	f000 f8c0 	bl	80010a8 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d108      	bne.n	8000f40 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000f2e:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <BSP_SPI1_Init+0x54>)
 8000f30:	f000 f87e 	bl	8001030 <MX_SPI1_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000f3a:	f06f 0307 	mvn.w	r3, #7
 8000f3e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000240 	.word	0x20000240
 8000f50:	40013000 	.word	0x40013000
 8000f54:	20000298 	.word	0x20000298

08000f58 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000f5e:	f06f 0307 	mvn.w	r3, #7
 8000f62:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 8000f64:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <BSP_SPI1_DeInit+0x48>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d013      	beq.n	8000f94 <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <BSP_SPI1_DeInit+0x48>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <BSP_SPI1_DeInit+0x48>)
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <BSP_SPI1_DeInit+0x48>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10a      	bne.n	8000f94 <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 8000f7e:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <BSP_SPI1_DeInit+0x4c>)
 8000f80:	f000 f8ea 	bl	8001158 <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8000f84:	4807      	ldr	r0, [pc, #28]	@ (8000fa4 <BSP_SPI1_DeInit+0x4c>)
 8000f86:	f002 fbbe 	bl	8003706 <HAL_SPI_DeInit>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000298 	.word	0x20000298
 8000fa4:	20000240 	.word	0x20000240

08000fa8 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000fb8:	887a      	ldrh	r2, [r7, #2]
 8000fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <BSP_SPI1_Send+0x34>)
 8000fc2:	f002 fbc8 	bl	8003756 <HAL_SPI_Transmit>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000fcc:	f06f 0305 	mvn.w	r3, #5
 8000fd0:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000240 	.word	0x20000240

08000fe0 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	4613      	mov	r3, r2
 8000fec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ff8:	9200      	str	r2, [sp, #0]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	68f9      	ldr	r1, [r7, #12]
 8000ffe:	4807      	ldr	r0, [pc, #28]	@ (800101c <BSP_SPI1_SendRecv+0x3c>)
 8001000:	f002 fcec 	bl	80039dc <HAL_SPI_TransmitReceive>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800100a:	f06f 0305 	mvn.w	r3, #5
 800100e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001010:	697b      	ldr	r3, [r7, #20]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000240 	.word	0x20000240

08001020 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001024:	f001 f902 	bl	800222c <HAL_GetTick>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a19      	ldr	r2, [pc, #100]	@ (80010a4 <MX_SPI1_Init+0x74>)
 8001040:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001048:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001068:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2218      	movs	r2, #24
 800106e:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	220a      	movs	r2, #10
 8001086:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f002 fab3 	bl	80035f4 <HAL_SPI_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40013000 	.word	0x40013000

080010a8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	@ 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	4b26      	ldr	r3, [pc, #152]	@ (8001150 <SPI1_MspInit+0xa8>)
 80010b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b8:	4a25      	ldr	r2, [pc, #148]	@ (8001150 <SPI1_MspInit+0xa8>)
 80010ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010be:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c0:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <SPI1_MspInit+0xa8>)
 80010c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <SPI1_MspInit+0xa8>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001150 <SPI1_MspInit+0xa8>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6313      	str	r3, [r2, #48]	@ 0x30
 80010dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <SPI1_MspInit+0xa8>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80010e8:	2320      	movs	r3, #32
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80010f8:	2305      	movs	r3, #5
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4814      	ldr	r0, [pc, #80]	@ (8001154 <SPI1_MspInit+0xac>)
 8001104:	f001 f9d4 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001108:	2340      	movs	r3, #64	@ 0x40
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001118:	2305      	movs	r3, #5
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	480c      	ldr	r0, [pc, #48]	@ (8001154 <SPI1_MspInit+0xac>)
 8001124:	f001 f9c4 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001138:	2305      	movs	r3, #5
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4804      	ldr	r0, [pc, #16]	@ (8001154 <SPI1_MspInit+0xac>)
 8001144:	f001 f9b4 	bl	80024b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000

08001158 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001160:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <SPI1_MspDeInit+0x34>)
 8001162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001164:	4a09      	ldr	r2, [pc, #36]	@ (800118c <SPI1_MspDeInit+0x34>)
 8001166:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800116a:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 800116c:	2120      	movs	r1, #32
 800116e:	4808      	ldr	r0, [pc, #32]	@ (8001190 <SPI1_MspDeInit+0x38>)
 8001170:	f001 fb32 	bl	80027d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8001174:	2140      	movs	r1, #64	@ 0x40
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <SPI1_MspDeInit+0x38>)
 8001178:	f001 fb2e 	bl	80027d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 800117c:	2180      	movs	r1, #128	@ 0x80
 800117e:	4804      	ldr	r0, [pc, #16]	@ (8001190 <SPI1_MspDeInit+0x38>)
 8001180:	f001 fb2a 	bl	80027d8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000

08001194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <SystemInit+0x20>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119e:	4a05      	ldr	r2, [pc, #20]	@ (80011b4 <SystemInit+0x20>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011bc:	f7ff ffea 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f003 f95f 	bl	80044a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff fb4d 	bl	8000888 <main>
  bx  lr    
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 80011fc:	08004530 	.word	0x08004530
  ldr r2, =_sbss
 8001200:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8001204:	200002a0 	.word	0x200002a0

08001208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>
	...

0800120c <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d103      	bne.n	8001228 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	e051      	b.n	80012cc <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	7b1a      	ldrb	r2, [r3, #12]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	695a      	ldr	r2, [r3, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	699a      	ldr	r2, [r3, #24]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <LSM6DSL_RegisterBusIO+0xcc>)
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a1c      	ldr	r2, [pc, #112]	@ (80012dc <LSM6DSL_RegisterBusIO+0xd0>)
 800126a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	69da      	ldr	r2, [r3, #28]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d103      	bne.n	800128a <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e020      	b.n	80012cc <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4798      	blx	r3
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	e016      	b.n	80012cc <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d112      	bne.n	80012cc <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10d      	bne.n	80012cc <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80012b0:	230c      	movs	r3, #12
 80012b2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	461a      	mov	r2, r3
 80012b8:	2112      	movs	r1, #18
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f9b9 	bl	8001632 <LSM6DSL_Write_Reg>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80012cc:	68fb      	ldr	r3, [r7, #12]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	080018ed 	.word	0x080018ed
 80012dc:	08001923 	.word	0x08001923

080012e0 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3320      	adds	r3, #32
 80012ec:	2101      	movs	r1, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fcb1 	bl	8001c56 <lsm6dsl_auto_increment_set>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e054      	b.n	80013aa <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3320      	adds	r3, #32
 8001304:	2101      	movs	r1, #1
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fc26 	bl	8001b58 <lsm6dsl_block_data_update_set>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e048      	b.n	80013aa <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3320      	adds	r3, #32
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fef8 	bl	8002114 <lsm6dsl_fifo_mode_set>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e03c      	b.n	80013aa <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2204      	movs	r2, #4
 8001334:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3320      	adds	r3, #32
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fb98 	bl	8001a74 <lsm6dsl_xl_data_rate_set>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e02c      	b.n	80013aa <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3320      	adds	r3, #32
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fb2e 	bl	80019b8 <lsm6dsl_xl_full_scale_set>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e020      	b.n	80013aa <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2204      	movs	r2, #4
 800136c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3320      	adds	r3, #32
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fbc8 	bl	8001b0c <lsm6dsl_gy_data_rate_set>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e010      	b.n	80013aa <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3320      	adds	r3, #32
 800138c:	2106      	movs	r1, #6
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fb96 	bl	8001ac0 <lsm6dsl_gy_full_scale_set>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e004      	b.n	80013aa <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3320      	adds	r3, #32
 80013c0:	6839      	ldr	r1, [r7, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fc36 	bl	8001c34 <lsm6dsl_device_id_get>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e000      	b.n	80013d6 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e014      	b.n	800141e <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f103 0220 	add.w	r2, r3, #32
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001400:	4619      	mov	r1, r3
 8001402:	4610      	mov	r0, r2
 8001404:	f000 fb36 	bl	8001a74 <lsm6dsl_xl_data_rate_set>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	e004      	b.n	800141e <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3320      	adds	r3, #32
 800143a:	f107 020b 	add.w	r2, r7, #11
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fadf 	bl	8001a04 <lsm6dsl_xl_full_scale_get>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	e023      	b.n	800149a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001452:	7afb      	ldrb	r3, [r7, #11]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d81b      	bhi.n	8001490 <LSM6DSL_ACC_GetSensitivity+0x68>
 8001458:	a201      	add	r2, pc, #4	@ (adr r2, 8001460 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001471 	.word	0x08001471
 8001464:	08001489 	.word	0x08001489
 8001468:	08001479 	.word	0x08001479
 800146c:	08001481 	.word	0x08001481
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4a0c      	ldr	r2, [pc, #48]	@ (80014a4 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8001474:	601a      	str	r2, [r3, #0]
      break;
 8001476:	e00f      	b.n	8001498 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4a0b      	ldr	r2, [pc, #44]	@ (80014a8 <LSM6DSL_ACC_GetSensitivity+0x80>)
 800147c:	601a      	str	r2, [r3, #0]
      break;
 800147e:	e00b      	b.n	8001498 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <LSM6DSL_ACC_GetSensitivity+0x84>)
 8001484:	601a      	str	r2, [r3, #0]
      break;
 8001486:	e007      	b.n	8001498 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4a09      	ldr	r2, [pc, #36]	@ (80014b0 <LSM6DSL_ACC_GetSensitivity+0x88>)
 800148c:	601a      	str	r2, [r3, #0]
      break;
 800148e:	e003      	b.n	8001498 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	60fb      	str	r3, [r7, #12]
      break;
 8001496:	bf00      	nop
  }

  return ret;
 8001498:	68fb      	ldr	r3, [r7, #12]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	3d79db23 	.word	0x3d79db23
 80014a8:	3df9db23 	.word	0x3df9db23
 80014ac:	3e79db23 	.word	0x3e79db23
 80014b0:	3ef9db23 	.word	0x3ef9db23

080014b4 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d106      	bne.n	80014d8 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80014ca:	ed97 0a00 	vldr	s0, [r7]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f8fe 	bl	80016d0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80014d4:	4603      	mov	r3, r0
 80014d6:	e005      	b.n	80014e4 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80014d8:	ed97 0a00 	vldr	s0, [r7]
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f983 	bl	80017e8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80014e2:	4603      	mov	r3, r0
  }
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	dd0b      	ble.n	8001514 <LSM6DSL_ACC_SetFullScale+0x28>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b04      	cmp	r3, #4
 8001500:	dd06      	ble.n	8001510 <LSM6DSL_ACC_SetFullScale+0x24>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b08      	cmp	r3, #8
 8001506:	dc01      	bgt.n	800150c <LSM6DSL_ACC_SetFullScale+0x20>
 8001508:	2303      	movs	r3, #3
 800150a:	e004      	b.n	8001516 <LSM6DSL_ACC_SetFullScale+0x2a>
 800150c:	2301      	movs	r3, #1
 800150e:	e002      	b.n	8001516 <LSM6DSL_ACC_SetFullScale+0x2a>
 8001510:	2302      	movs	r3, #2
 8001512:	e000      	b.n	8001516 <LSM6DSL_ACC_SetFullScale+0x2a>
 8001514:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8001516:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3320      	adds	r3, #32
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fa49 	bl	80019b8 <lsm6dsl_xl_full_scale_set>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	e000      	b.n	8001534 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3320      	adds	r3, #32
 800154a:	f107 0208 	add.w	r2, r7, #8
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fb27 	bl	8001ba4 <lsm6dsl_acceleration_raw_get>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	e00c      	b.n	800157c <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8001562:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800156a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8001572:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3320      	adds	r3, #32
 8001598:	f107 0210 	add.w	r2, r7, #16
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fb00 	bl	8001ba4 <lsm6dsl_acceleration_raw_get>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e03c      	b.n	800162a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff36 	bl	8001428 <LSM6DSL_ACC_GetSensitivity>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e030      	b.n	800162a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80015c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e0:	ee17 2a90 	vmov	r2, s15
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80015e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001600:	ee17 2a90 	vmov	r2, s15
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001608:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800160c:	ee07 3a90 	vmov	s15, r3
 8001610:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001614:	edd7 7a03 	vldr	s15, [r7, #12]
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001620:	ee17 2a90 	vmov	r2, s15
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	70fb      	strb	r3, [r7, #3]
 800163e:	4613      	mov	r3, r2
 8001640:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f103 0020 	add.w	r0, r3, #32
 8001648:	1cba      	adds	r2, r7, #2
 800164a:	78f9      	ldrb	r1, [r7, #3]
 800164c:	2301      	movs	r3, #1
 800164e:	f000 f99b 	bl	8001988 <lsm6dsl_write_reg>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	e000      	b.n	8001660 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3320      	adds	r3, #32
 8001678:	f107 020c 	add.w	r2, r7, #12
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fc72 	bl	8001f68 <lsm6dsl_pin_int1_route_get>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	e01b      	b.n	80016c8 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d811      	bhi.n	80016ba <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	b2da      	uxtb	r2, r3
 800169e:	7b3b      	ldrb	r3, [r7, #12]
 80016a0:	f362 0300 	bfi	r3, r2, #0, #1
 80016a4:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3320      	adds	r3, #32
 80016aa:	68f9      	ldr	r1, [r7, #12]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 faf8 	bl	8001ca2 <lsm6dsl_pin_int1_route_set>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 80016b8:	e002      	b.n	80016c0 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e003      	b.n	80016c8 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
 80016c4:	e000      	b.n	80016c8 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80016dc:	edd7 7a00 	vldr	s15, [r7]
 80016e0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80016e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ec:	d801      	bhi.n	80016f2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e058      	b.n	80017a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80016f2:	edd7 7a00 	vldr	s15, [r7]
 80016f6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80016fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	d801      	bhi.n	8001708 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8001704:	2302      	movs	r3, #2
 8001706:	e04d      	b.n	80017a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001708:	edd7 7a00 	vldr	s15, [r7]
 800170c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80017cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8001710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	d801      	bhi.n	800171e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800171a:	2303      	movs	r3, #3
 800171c:	e042      	b.n	80017a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800171e:	edd7 7a00 	vldr	s15, [r7]
 8001722:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80017d0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	d801      	bhi.n	8001734 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8001730:	2304      	movs	r3, #4
 8001732:	e037      	b.n	80017a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001734:	edd7 7a00 	vldr	s15, [r7]
 8001738:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80017d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 800173c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	d801      	bhi.n	800174a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8001746:	2305      	movs	r3, #5
 8001748:	e02c      	b.n	80017a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800174a:	edd7 7a00 	vldr	s15, [r7]
 800174e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80017d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8001752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	d801      	bhi.n	8001760 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 800175c:	2306      	movs	r3, #6
 800175e:	e021      	b.n	80017a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001760:	edd7 7a00 	vldr	s15, [r7]
 8001764:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80017dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8001768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	d801      	bhi.n	8001776 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8001772:	2307      	movs	r3, #7
 8001774:	e016      	b.n	80017a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001776:	edd7 7a00 	vldr	s15, [r7]
 800177a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80017e0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800177e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	d801      	bhi.n	800178c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8001788:	2308      	movs	r3, #8
 800178a:	e00b      	b.n	80017a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800178c:	edd7 7a00 	vldr	s15, [r7]
 8001790:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80017e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8001794:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179c:	d801      	bhi.n	80017a2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800179e:	2309      	movs	r3, #9
 80017a0:	e000      	b.n	80017a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80017a2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80017a4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3320      	adds	r3, #32
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f960 	bl	8001a74 <lsm6dsl_xl_data_rate_set>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e000      	b.n	80017c2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	42500000 	.word	0x42500000
 80017d0:	42d00000 	.word	0x42d00000
 80017d4:	43500000 	.word	0x43500000
 80017d8:	43d00000 	.word	0x43d00000
 80017dc:	44504000 	.word	0x44504000
 80017e0:	44cf8000 	.word	0x44cf8000
 80017e4:	45502000 	.word	0x45502000

080017e8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80017f4:	edd7 7a00 	vldr	s15, [r7]
 80017f8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80017fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001804:	d801      	bhi.n	800180a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8001806:	2301      	movs	r3, #1
 8001808:	e058      	b.n	80018bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800180a:	edd7 7a00 	vldr	s15, [r7]
 800180e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d801      	bhi.n	8001820 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 800181c:	2302      	movs	r3, #2
 800181e:	e04d      	b.n	80018bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001820:	edd7 7a00 	vldr	s15, [r7]
 8001824:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80018d0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	d801      	bhi.n	8001836 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8001832:	2303      	movs	r3, #3
 8001834:	e042      	b.n	80018bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001836:	edd7 7a00 	vldr	s15, [r7]
 800183a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80018d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 800183e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	d801      	bhi.n	800184c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8001848:	2304      	movs	r3, #4
 800184a:	e037      	b.n	80018bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800184c:	edd7 7a00 	vldr	s15, [r7]
 8001850:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80018d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	d801      	bhi.n	8001862 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800185e:	2305      	movs	r3, #5
 8001860:	e02c      	b.n	80018bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001862:	edd7 7a00 	vldr	s15, [r7]
 8001866:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80018dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800186a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001872:	d801      	bhi.n	8001878 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8001874:	2306      	movs	r3, #6
 8001876:	e021      	b.n	80018bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001878:	edd7 7a00 	vldr	s15, [r7]
 800187c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80018e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	d801      	bhi.n	800188e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800188a:	2307      	movs	r3, #7
 800188c:	e016      	b.n	80018bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800188e:	edd7 7a00 	vldr	s15, [r7]
 8001892:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80018e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8001896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189e:	d801      	bhi.n	80018a4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80018a0:	2308      	movs	r3, #8
 80018a2:	e00b      	b.n	80018bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80018a4:	edd7 7a00 	vldr	s15, [r7]
 80018a8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80018e8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80018ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	d801      	bhi.n	80018ba <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80018b6:	2309      	movs	r3, #9
 80018b8:	e000      	b.n	80018bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80018ba:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	42500000 	.word	0x42500000
 80018d4:	42d00000 	.word	0x42d00000
 80018d8:	43500000 	.word	0x43500000
 80018dc:	43d00000 	.word	0x43d00000
 80018e0:	44504000 	.word	0x44504000
 80018e4:	44cf8000 	.word	0x44cf8000
 80018e8:	45502000 	.word	0x45502000

080018ec <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	461a      	mov	r2, r3
 80018f8:	460b      	mov	r3, r1
 80018fa:	72fb      	strb	r3, [r7, #11]
 80018fc:	4613      	mov	r3, r2
 80018fe:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	695c      	ldr	r4, [r3, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	7b1b      	ldrb	r3, [r3, #12]
 800190c:	4618      	mov	r0, r3
 800190e:	7afb      	ldrb	r3, [r7, #11]
 8001910:	b299      	uxth	r1, r3
 8001912:	893b      	ldrh	r3, [r7, #8]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	47a0      	blx	r4
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd90      	pop	{r4, r7, pc}

08001922 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001922:	b590      	push	{r4, r7, lr}
 8001924:	b087      	sub	sp, #28
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	461a      	mov	r2, r3
 800192e:	460b      	mov	r3, r1
 8001930:	72fb      	strb	r3, [r7, #11]
 8001932:	4613      	mov	r3, r2
 8001934:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	691c      	ldr	r4, [r3, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	7b1b      	ldrb	r3, [r3, #12]
 8001942:	4618      	mov	r0, r3
 8001944:	7afb      	ldrb	r3, [r7, #11]
 8001946:	b299      	uxth	r1, r3
 8001948:	893b      	ldrh	r3, [r7, #8]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	47a0      	blx	r4
 800194e:	4603      	mov	r3, r0
}
 8001950:	4618      	mov	r0, r3
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd90      	pop	{r4, r7, pc}

08001958 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	461a      	mov	r2, r3
 8001964:	460b      	mov	r3, r1
 8001966:	72fb      	strb	r3, [r7, #11]
 8001968:	4613      	mov	r3, r2
 800196a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685c      	ldr	r4, [r3, #4]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	68d8      	ldr	r0, [r3, #12]
 8001974:	893b      	ldrh	r3, [r7, #8]
 8001976:	7af9      	ldrb	r1, [r7, #11]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	47a0      	blx	r4
 800197c:	6178      	str	r0, [r7, #20]

  return ret;
 800197e:	697b      	ldr	r3, [r7, #20]
}
 8001980:	4618      	mov	r0, r3
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd90      	pop	{r4, r7, pc}

08001988 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	461a      	mov	r2, r3
 8001994:	460b      	mov	r3, r1
 8001996:	72fb      	strb	r3, [r7, #11]
 8001998:	4613      	mov	r3, r2
 800199a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681c      	ldr	r4, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	68d8      	ldr	r0, [r3, #12]
 80019a4:	893b      	ldrh	r3, [r7, #8]
 80019a6:	7af9      	ldrb	r1, [r7, #11]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	47a0      	blx	r4
 80019ac:	6178      	str	r0, [r7, #20]

  return ret;
 80019ae:	697b      	ldr	r3, [r7, #20]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}

080019b8 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80019c4:	f107 0208 	add.w	r2, r7, #8
 80019c8:	2301      	movs	r3, #1
 80019ca:	2110      	movs	r1, #16
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ffc3 	bl	8001958 <lsm6dsl_read_reg>
 80019d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10f      	bne.n	80019fa <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	7a3b      	ldrb	r3, [r7, #8]
 80019e4:	f362 0383 	bfi	r3, r2, #2, #2
 80019e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80019ea:	f107 0208 	add.w	r2, r7, #8
 80019ee:	2301      	movs	r3, #1
 80019f0:	2110      	movs	r1, #16
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffc8 	bl	8001988 <lsm6dsl_write_reg>
 80019f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001a0e:	f107 0208 	add.w	r2, r7, #8
 8001a12:	2301      	movs	r3, #1
 8001a14:	2110      	movs	r1, #16
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff9e 	bl	8001958 <lsm6dsl_read_reg>
 8001a1c:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8001a1e:	7a3b      	ldrb	r3, [r7, #8]
 8001a20:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d81a      	bhi.n	8001a60 <lsm6dsl_xl_full_scale_get+0x5c>
 8001a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a30 <lsm6dsl_xl_full_scale_get+0x2c>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001a41 	.word	0x08001a41
 8001a34:	08001a49 	.word	0x08001a49
 8001a38:	08001a51 	.word	0x08001a51
 8001a3c:	08001a59 	.word	0x08001a59
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
      break;
 8001a46:	e00f      	b.n	8001a68 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
      break;
 8001a4e:	e00b      	b.n	8001a68 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2202      	movs	r2, #2
 8001a54:	701a      	strb	r2, [r3, #0]
      break;
 8001a56:	e007      	b.n	8001a68 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	701a      	strb	r2, [r3, #0]
      break;
 8001a5e:	e003      	b.n	8001a68 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2204      	movs	r2, #4
 8001a64:	701a      	strb	r2, [r3, #0]
      break;
 8001a66:	bf00      	nop
  }

  return ret;
 8001a68:	68fb      	ldr	r3, [r7, #12]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop

08001a74 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001a80:	f107 0208 	add.w	r2, r7, #8
 8001a84:	2301      	movs	r3, #1
 8001a86:	2110      	movs	r1, #16
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff65 	bl	8001958 <lsm6dsl_read_reg>
 8001a8e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10f      	bne.n	8001ab6 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	7a3b      	ldrb	r3, [r7, #8]
 8001aa0:	f362 1307 	bfi	r3, r2, #4, #4
 8001aa4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001aa6:	f107 0208 	add.w	r2, r7, #8
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2110      	movs	r1, #16
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff6a 	bl	8001988 <lsm6dsl_write_reg>
 8001ab4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001acc:	f107 0208 	add.w	r2, r7, #8
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	2111      	movs	r1, #17
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff3f 	bl	8001958 <lsm6dsl_read_reg>
 8001ada:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	7a3b      	ldrb	r3, [r7, #8]
 8001aec:	f362 0343 	bfi	r3, r2, #1, #3
 8001af0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001af2:	f107 0208 	add.w	r2, r7, #8
 8001af6:	2301      	movs	r3, #1
 8001af8:	2111      	movs	r1, #17
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ff44 	bl	8001988 <lsm6dsl_write_reg>
 8001b00:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001b18:	f107 0208 	add.w	r2, r7, #8
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	2111      	movs	r1, #17
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff19 	bl	8001958 <lsm6dsl_read_reg>
 8001b26:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	7a3b      	ldrb	r3, [r7, #8]
 8001b38:	f362 1307 	bfi	r3, r2, #4, #4
 8001b3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001b3e:	f107 0208 	add.w	r2, r7, #8
 8001b42:	2301      	movs	r3, #1
 8001b44:	2111      	movs	r1, #17
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff1e 	bl	8001988 <lsm6dsl_write_reg>
 8001b4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b64:	f107 0208 	add.w	r2, r7, #8
 8001b68:	2301      	movs	r3, #1
 8001b6a:	2112      	movs	r1, #18
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fef3 	bl	8001958 <lsm6dsl_read_reg>
 8001b72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10f      	bne.n	8001b9a <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	7a3b      	ldrb	r3, [r7, #8]
 8001b84:	f362 1386 	bfi	r3, r2, #6, #1
 8001b88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b8a:	f107 0208 	add.w	r2, r7, #8
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2112      	movs	r1, #18
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fef8 	bl	8001988 <lsm6dsl_write_reg>
 8001b98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001bae:	f107 020c 	add.w	r2, r7, #12
 8001bb2:	2306      	movs	r3, #6
 8001bb4:	2128      	movs	r1, #40	@ 0x28
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fece 	bl	8001958 <lsm6dsl_read_reg>
 8001bbc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001bbe:	7b7b      	ldrb	r3, [r7, #13]
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	7b3a      	ldrb	r2, [r7, #12]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	3302      	adds	r3, #2
 8001be4:	b212      	sxth	r2, r2
 8001be6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	3302      	adds	r3, #2
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	7bba      	ldrb	r2, [r7, #14]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3302      	adds	r3, #2
 8001c00:	b212      	sxth	r2, r2
 8001c02:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001c04:	7c7a      	ldrb	r2, [r7, #17]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	b212      	sxth	r2, r2
 8001c0c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3304      	adds	r3, #4
 8001c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	7c3a      	ldrb	r2, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	3304      	adds	r3, #4
 8001c26:	b212      	sxth	r2, r2
 8001c28:	801a      	strh	r2, [r3, #0]

  return ret;
 8001c2a:	697b      	ldr	r3, [r7, #20]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001c3e:	2301      	movs	r3, #1
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	210f      	movs	r1, #15
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fe87 	bl	8001958 <lsm6dsl_read_reg>
 8001c4a:	60f8      	str	r0, [r7, #12]

  return ret;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c62:	f107 0208 	add.w	r2, r7, #8
 8001c66:	2301      	movs	r3, #1
 8001c68:	2112      	movs	r1, #18
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fe74 	bl	8001958 <lsm6dsl_read_reg>
 8001c70:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10f      	bne.n	8001c98 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	7a3b      	ldrb	r3, [r7, #8]
 8001c82:	f362 0382 	bfi	r3, r2, #2, #1
 8001c86:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c88:	f107 0208 	add.w	r2, r7, #8
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	2112      	movs	r1, #18
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff fe79 	bl	8001988 <lsm6dsl_write_reg>
 8001c96:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c98:	68fb      	ldr	r3, [r7, #12]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b08a      	sub	sp, #40	@ 0x28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001cac:	f107 021c 	add.w	r2, r7, #28
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	210d      	movs	r1, #13
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fe4f 	bl	8001958 <lsm6dsl_read_reg>
 8001cba:	6278      	str	r0, [r7, #36]	@ 0x24

  if (ret == 0)
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d147      	bne.n	8001d52 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8001cc2:	783b      	ldrb	r3, [r7, #0]
 8001cc4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	7f3b      	ldrb	r3, [r7, #28]
 8001ccc:	f362 0300 	bfi	r3, r2, #0, #1
 8001cd0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8001cd2:	783b      	ldrb	r3, [r7, #0]
 8001cd4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	7f3b      	ldrb	r3, [r7, #28]
 8001cdc:	f362 0341 	bfi	r3, r2, #1, #1
 8001ce0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8001ce2:	783b      	ldrb	r3, [r7, #0]
 8001ce4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	7f3b      	ldrb	r3, [r7, #28]
 8001cec:	f362 0382 	bfi	r3, r2, #2, #1
 8001cf0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8001cf2:	783b      	ldrb	r3, [r7, #0]
 8001cf4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	7f3b      	ldrb	r3, [r7, #28]
 8001cfc:	f362 03c3 	bfi	r3, r2, #3, #1
 8001d00:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8001d02:	783b      	ldrb	r3, [r7, #0]
 8001d04:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	7f3b      	ldrb	r3, [r7, #28]
 8001d0c:	f362 1304 	bfi	r3, r2, #4, #1
 8001d10:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8001d12:	783b      	ldrb	r3, [r7, #0]
 8001d14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	7f3b      	ldrb	r3, [r7, #28]
 8001d1c:	f362 1345 	bfi	r3, r2, #5, #1
 8001d20:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8001d22:	783b      	ldrb	r3, [r7, #0]
 8001d24:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	7f3b      	ldrb	r3, [r7, #28]
 8001d2c:	f362 1386 	bfi	r3, r2, #6, #1
 8001d30:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8001d32:	783b      	ldrb	r3, [r7, #0]
 8001d34:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	7f3b      	ldrb	r3, [r7, #28]
 8001d3c:	f362 13c7 	bfi	r3, r2, #7, #1
 8001d40:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001d42:	f107 021c 	add.w	r2, r7, #28
 8001d46:	2301      	movs	r3, #1
 8001d48:	210d      	movs	r1, #13
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fe1c 	bl	8001988 <lsm6dsl_write_reg>
 8001d50:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d107      	bne.n	8001d68 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8001d58:	f107 0218 	add.w	r2, r7, #24
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	215e      	movs	r1, #94	@ 0x5e
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff fdf9 	bl	8001958 <lsm6dsl_read_reg>
 8001d66:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d107      	bne.n	8001d7e <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8001d6e:	f107 0214 	add.w	r2, r7, #20
 8001d72:	2301      	movs	r3, #1
 8001d74:	215f      	movs	r1, #95	@ 0x5f
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fdee 	bl	8001958 <lsm6dsl_read_reg>
 8001d7c:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d147      	bne.n	8001e14 <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	7e3b      	ldrb	r3, [r7, #24]
 8001d8e:	f362 0300 	bfi	r3, r2, #0, #1
 8001d92:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	7e3b      	ldrb	r3, [r7, #24]
 8001d9e:	f362 0341 	bfi	r3, r2, #1, #1
 8001da2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	7e3b      	ldrb	r3, [r7, #24]
 8001dae:	f362 0382 	bfi	r3, r2, #2, #1
 8001db2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	7e3b      	ldrb	r3, [r7, #24]
 8001dbe:	f362 03c3 	bfi	r3, r2, #3, #1
 8001dc2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	7e3b      	ldrb	r3, [r7, #24]
 8001dce:	f362 1304 	bfi	r3, r2, #4, #1
 8001dd2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	7e3b      	ldrb	r3, [r7, #24]
 8001dde:	f362 1345 	bfi	r3, r2, #5, #1
 8001de2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	7e3b      	ldrb	r3, [r7, #24]
 8001dee:	f362 1386 	bfi	r3, r2, #6, #1
 8001df2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	7e3b      	ldrb	r3, [r7, #24]
 8001dfe:	f362 13c7 	bfi	r3, r2, #7, #1
 8001e02:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8001e04:	f107 0218 	add.w	r2, r7, #24
 8001e08:	2301      	movs	r3, #1
 8001e0a:	215e      	movs	r1, #94	@ 0x5e
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fdbb 	bl	8001988 <lsm6dsl_write_reg>
 8001e12:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d107      	bne.n	8001e2a <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8001e1a:	f107 0210 	add.w	r2, r7, #16
 8001e1e:	2301      	movs	r3, #1
 8001e20:	2113      	movs	r1, #19
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff fd98 	bl	8001958 <lsm6dsl_read_reg>
 8001e28:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10f      	bne.n	8001e50 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8001e30:	78bb      	ldrb	r3, [r7, #2]
 8001e32:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	7c3b      	ldrb	r3, [r7, #16]
 8001e3a:	f362 1304 	bfi	r3, r2, #4, #1
 8001e3e:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8001e40:	f107 0210 	add.w	r2, r7, #16
 8001e44:	2301      	movs	r3, #1
 8001e46:	2113      	movs	r1, #19
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff fd9d 	bl	8001988 <lsm6dsl_write_reg>
 8001e4e:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8001e56:	f107 0220 	add.w	r2, r7, #32
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	211a      	movs	r1, #26
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fd7a 	bl	8001958 <lsm6dsl_read_reg>
 8001e64:	6278      	str	r0, [r7, #36]	@ 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8001e6c:	78bb      	ldrb	r3, [r7, #2]
 8001e6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e78:	f362 13c7 	bfi	r3, r2, #7, #1
 8001e7c:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8001e80:	f107 0220 	add.w	r2, r7, #32
 8001e84:	2301      	movs	r3, #1
 8001e86:	211a      	movs	r1, #26
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff fd7d 	bl	8001988 <lsm6dsl_write_reg>
 8001e8e:	6278      	str	r0, [r7, #36]	@ 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d158      	bne.n	8001f48 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8001e96:	f107 020c 	add.w	r2, r7, #12
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	2158      	movs	r1, #88	@ 0x58
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fd5a 	bl	8001958 <lsm6dsl_read_reg>
 8001ea4:	6278      	str	r0, [r7, #36]	@ 0x24

    if ((val.int1_6d != 0x00U) ||
 8001ea6:	787b      	ldrb	r3, [r7, #1]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d141      	bne.n	8001f36 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8001eb2:	787b      	ldrb	r3, [r7, #1]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d13b      	bne.n	8001f36 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8001ebe:	787b      	ldrb	r3, [r7, #1]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d135      	bne.n	8001f36 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8001eca:	787b      	ldrb	r3, [r7, #1]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed0:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d12f      	bne.n	8001f36 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8001ed6:	787b      	ldrb	r3, [r7, #1]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d129      	bne.n	8001f36 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8001ee2:	787b      	ldrb	r3, [r7, #1]
 8001ee4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001ee8:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d123      	bne.n	8001f36 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8001eee:	7d3b      	ldrb	r3, [r7, #20]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d11d      	bne.n	8001f36 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8001efa:	7d3b      	ldrb	r3, [r7, #20]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d117      	bne.n	8001f36 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8001f06:	7d3b      	ldrb	r3, [r7, #20]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d111      	bne.n	8001f36 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8001f12:	7d3b      	ldrb	r3, [r7, #20]
 8001f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f18:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10b      	bne.n	8001f36 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8001f1e:	7d3b      	ldrb	r3, [r7, #20]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8001f2a:	7d3b      	ldrb	r3, [r7, #20]
 8001f2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001f30:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8001f36:	7b3b      	ldrb	r3, [r7, #12]
 8001f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f3c:	733b      	strb	r3, [r7, #12]
 8001f3e:	e003      	b.n	8001f48 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8001f40:	7b3b      	ldrb	r3, [r7, #12]
 8001f42:	f36f 13c7 	bfc	r3, #7, #1
 8001f46:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d107      	bne.n	8001f5e <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8001f4e:	f107 020c 	add.w	r2, r7, #12
 8001f52:	2301      	movs	r3, #1
 8001f54:	2158      	movs	r1, #88	@ 0x58
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fd16 	bl	8001988 <lsm6dsl_write_reg>
 8001f5c:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return ret;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3728      	adds	r7, #40	@ 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001f72:	f107 0214 	add.w	r2, r7, #20
 8001f76:	2301      	movs	r3, #1
 8001f78:	210d      	movs	r1, #13
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fcec 	bl	8001958 <lsm6dsl_read_reg>
 8001f80:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f040 80c0 	bne.w	800210a <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8001f8a:	7d3b      	ldrb	r3, [r7, #20]
 8001f8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f90:	b2d9      	uxtb	r1, r3
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	7813      	ldrb	r3, [r2, #0]
 8001f96:	f361 0300 	bfi	r3, r1, #0, #1
 8001f9a:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8001f9c:	7d3b      	ldrb	r3, [r7, #20]
 8001f9e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001fa2:	b2d9      	uxtb	r1, r3
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	7813      	ldrb	r3, [r2, #0]
 8001fa8:	f361 0341 	bfi	r3, r1, #1, #1
 8001fac:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8001fae:	7d3b      	ldrb	r3, [r7, #20]
 8001fb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001fb4:	b2d9      	uxtb	r1, r3
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	7813      	ldrb	r3, [r2, #0]
 8001fba:	f361 0382 	bfi	r3, r1, #2, #1
 8001fbe:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8001fc0:	7d3b      	ldrb	r3, [r7, #20]
 8001fc2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001fc6:	b2d9      	uxtb	r1, r3
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	7813      	ldrb	r3, [r2, #0]
 8001fcc:	f361 03c3 	bfi	r3, r1, #3, #1
 8001fd0:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8001fd2:	7d3b      	ldrb	r3, [r7, #20]
 8001fd4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001fd8:	b2d9      	uxtb	r1, r3
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	7813      	ldrb	r3, [r2, #0]
 8001fde:	f361 1304 	bfi	r3, r1, #4, #1
 8001fe2:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8001fe4:	7d3b      	ldrb	r3, [r7, #20]
 8001fe6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001fea:	b2d9      	uxtb	r1, r3
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	7813      	ldrb	r3, [r2, #0]
 8001ff0:	f361 1345 	bfi	r3, r1, #5, #1
 8001ff4:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8001ff6:	7d3b      	ldrb	r3, [r7, #20]
 8001ff8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ffc:	b2d9      	uxtb	r1, r3
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	7813      	ldrb	r3, [r2, #0]
 8002002:	f361 1386 	bfi	r3, r1, #6, #1
 8002006:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8002008:	7d3b      	ldrb	r3, [r7, #20]
 800200a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800200e:	b2d9      	uxtb	r1, r3
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	7813      	ldrb	r3, [r2, #0]
 8002014:	f361 13c7 	bfi	r3, r1, #7, #1
 8002018:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800201a:	f107 0210 	add.w	r2, r7, #16
 800201e:	2301      	movs	r3, #1
 8002020:	215e      	movs	r1, #94	@ 0x5e
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fc98 	bl	8001958 <lsm6dsl_read_reg>
 8002028:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d16c      	bne.n	800210a <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 8002030:	7c3b      	ldrb	r3, [r7, #16]
 8002032:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002036:	b2d9      	uxtb	r1, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	7853      	ldrb	r3, [r2, #1]
 800203c:	f361 0300 	bfi	r3, r1, #0, #1
 8002040:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 8002042:	7c3b      	ldrb	r3, [r7, #16]
 8002044:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002048:	b2d9      	uxtb	r1, r3
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	7853      	ldrb	r3, [r2, #1]
 800204e:	f361 0341 	bfi	r3, r1, #1, #1
 8002052:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 8002054:	7c3b      	ldrb	r3, [r7, #16]
 8002056:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800205a:	b2d9      	uxtb	r1, r3
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	7853      	ldrb	r3, [r2, #1]
 8002060:	f361 0382 	bfi	r3, r1, #2, #1
 8002064:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 8002066:	7c3b      	ldrb	r3, [r7, #16]
 8002068:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800206c:	b2d9      	uxtb	r1, r3
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	7853      	ldrb	r3, [r2, #1]
 8002072:	f361 03c3 	bfi	r3, r1, #3, #1
 8002076:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8002078:	7c3b      	ldrb	r3, [r7, #16]
 800207a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800207e:	b2d9      	uxtb	r1, r3
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	7853      	ldrb	r3, [r2, #1]
 8002084:	f361 1304 	bfi	r3, r1, #4, #1
 8002088:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 800208a:	7c3b      	ldrb	r3, [r7, #16]
 800208c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002090:	b2d9      	uxtb	r1, r3
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	7853      	ldrb	r3, [r2, #1]
 8002096:	f361 1345 	bfi	r3, r1, #5, #1
 800209a:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 800209c:	7c3b      	ldrb	r3, [r7, #16]
 800209e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80020a2:	b2d9      	uxtb	r1, r3
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	7853      	ldrb	r3, [r2, #1]
 80020a8:	f361 1386 	bfi	r3, r1, #6, #1
 80020ac:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 80020ae:	7c3b      	ldrb	r3, [r7, #16]
 80020b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80020b4:	b2d9      	uxtb	r1, r3
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	7853      	ldrb	r3, [r2, #1]
 80020ba:	f361 13c7 	bfi	r3, r1, #7, #1
 80020be:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80020c0:	f107 020c 	add.w	r2, r7, #12
 80020c4:	2301      	movs	r3, #1
 80020c6:	2113      	movs	r1, #19
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fc45 	bl	8001958 <lsm6dsl_read_reg>
 80020ce:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d119      	bne.n	800210a <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 80020d6:	7b3b      	ldrb	r3, [r7, #12]
 80020d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020dc:	b2d9      	uxtb	r1, r3
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	7893      	ldrb	r3, [r2, #2]
 80020e2:	f361 0300 	bfi	r3, r1, #0, #1
 80020e6:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80020e8:	f107 0218 	add.w	r2, r7, #24
 80020ec:	2301      	movs	r3, #1
 80020ee:	211a      	movs	r1, #26
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fc31 	bl	8001958 <lsm6dsl_read_reg>
 80020f6:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 80020f8:	7e3b      	ldrb	r3, [r7, #24]
 80020fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80020fe:	b2d9      	uxtb	r1, r3
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	7893      	ldrb	r3, [r2, #2]
 8002104:	f361 0300 	bfi	r3, r1, #0, #1
 8002108:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 800210a:	69fb      	ldr	r3, [r7, #28]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002120:	f107 0208 	add.w	r2, r7, #8
 8002124:	2301      	movs	r3, #1
 8002126:	210a      	movs	r1, #10
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fc15 	bl	8001958 <lsm6dsl_read_reg>
 800212e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	b2da      	uxtb	r2, r3
 800213e:	7a3b      	ldrb	r3, [r7, #8]
 8002140:	f362 0302 	bfi	r3, r2, #0, #3
 8002144:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002146:	f107 0208 	add.w	r2, r7, #8
 800214a:	2301      	movs	r3, #1
 800214c:	210a      	movs	r1, #10
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fc1a 	bl	8001988 <lsm6dsl_write_reg>
 8002154:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002164:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0d      	ldr	r2, [pc, #52]	@ (80021a0 <HAL_Init+0x40>)
 800216a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800216e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <HAL_Init+0x40>)
 8002176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800217a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	@ (80021a0 <HAL_Init+0x40>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f000 f94f 	bl	800242c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218e:	2000      	movs	r0, #0
 8002190:	f000 f808 	bl	80021a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002194:	f7fe fd9e 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40023c00 	.word	0x40023c00

080021a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <HAL_InitTick+0x54>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_InitTick+0x58>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f967 	bl	8002496 <HAL_SYSTICK_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00e      	b.n	80021f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d80a      	bhi.n	80021ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f000 f92f 	bl	8002442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e4:	4a06      	ldr	r2, [pc, #24]	@ (8002200 <HAL_InitTick+0x5c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000134 	.word	0x20000134
 80021fc:	2000013c 	.word	0x2000013c
 8002200:	20000138 	.word	0x20000138

08002204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_IncTick+0x20>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_IncTick+0x24>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <HAL_IncTick+0x24>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	2000013c 	.word	0x2000013c
 8002228:	2000029c 	.word	0x2000029c

0800222c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <HAL_GetTick+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	2000029c 	.word	0x2000029c

08002244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff ffee 	bl	800222c <HAL_GetTick>
 8002250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d005      	beq.n	800226a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_Delay+0x44>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800226a:	bf00      	nop
 800226c:	f7ff ffde 	bl	800222c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	d8f7      	bhi.n	800226c <HAL_Delay+0x28>
  {
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000013c 	.word	0x2000013c

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4907      	ldr	r1, [pc, #28]	@ (8002328 <__NVIC_EnableIRQ+0x38>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	@ (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	@ (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	@ 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
         );
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	@ 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f8:	d301      	bcc.n	80023fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00f      	b.n	800241e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <SysTick_Config+0x40>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002406:	210f      	movs	r1, #15
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f7ff ff8e 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <SysTick_Config+0x40>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <SysTick_Config+0x40>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	e000e010 	.word	0xe000e010

0800242c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff29 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002454:	f7ff ff3e 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 8002458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff ff8e 	bl	8002380 <NVIC_EncodePriority>
 8002464:	4602      	mov	r2, r0
 8002466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff5d 	bl	800232c <__NVIC_SetPriority>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff31 	bl	80022f0 <__NVIC_EnableIRQ>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffa2 	bl	80023e8 <SysTick_Config>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	e165      	b.n	8002798 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 8154 	bne.w	8002792 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d005      	beq.n	8002502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d130      	bne.n	8002564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 0201 	and.w	r2, r3, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b03      	cmp	r3, #3
 800256e:	d017      	beq.n	80025a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d123      	bne.n	80025f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3208      	adds	r2, #8
 80025ee:	69b9      	ldr	r1, [r7, #24]
 80025f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0203 	and.w	r2, r3, #3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80ae 	beq.w	8002792 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b5d      	ldr	r3, [pc, #372]	@ (80027b0 <HAL_GPIO_Init+0x300>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	4a5c      	ldr	r2, [pc, #368]	@ (80027b0 <HAL_GPIO_Init+0x300>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002644:	6453      	str	r3, [r2, #68]	@ 0x44
 8002646:	4b5a      	ldr	r3, [pc, #360]	@ (80027b0 <HAL_GPIO_Init+0x300>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002652:	4a58      	ldr	r2, [pc, #352]	@ (80027b4 <HAL_GPIO_Init+0x304>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4f      	ldr	r2, [pc, #316]	@ (80027b8 <HAL_GPIO_Init+0x308>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d025      	beq.n	80026ca <HAL_GPIO_Init+0x21a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4e      	ldr	r2, [pc, #312]	@ (80027bc <HAL_GPIO_Init+0x30c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01f      	beq.n	80026c6 <HAL_GPIO_Init+0x216>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4d      	ldr	r2, [pc, #308]	@ (80027c0 <HAL_GPIO_Init+0x310>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x212>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4c      	ldr	r2, [pc, #304]	@ (80027c4 <HAL_GPIO_Init+0x314>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x20e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4b      	ldr	r2, [pc, #300]	@ (80027c8 <HAL_GPIO_Init+0x318>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x20a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4a      	ldr	r2, [pc, #296]	@ (80027cc <HAL_GPIO_Init+0x31c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x206>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a49      	ldr	r2, [pc, #292]	@ (80027d0 <HAL_GPIO_Init+0x320>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x202>
 80026ae:	2306      	movs	r3, #6
 80026b0:	e00c      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e00a      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e008      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026be:	2303      	movs	r3, #3
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x21c>
 80026ca:	2300      	movs	r3, #0
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	f002 0203 	and.w	r2, r2, #3
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026dc:	4935      	ldr	r1, [pc, #212]	@ (80027b4 <HAL_GPIO_Init+0x304>)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b3a      	ldr	r3, [pc, #232]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270e:	4a31      	ldr	r2, [pc, #196]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002714:	4b2f      	ldr	r3, [pc, #188]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002738:	4a26      	ldr	r2, [pc, #152]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273e:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002762:	4a1c      	ldr	r2, [pc, #112]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002768:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278c:	4a11      	ldr	r2, [pc, #68]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	f67f ae96 	bls.w	80024cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3724      	adds	r7, #36	@ 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40021400 	.word	0x40021400
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e0c7      	b.n	8002984 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027f4:	2201      	movs	r2, #1
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	429a      	cmp	r2, r3
 800280c:	f040 80b7 	bne.w	800297e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002810:	4a62      	ldr	r2, [pc, #392]	@ (800299c <HAL_GPIO_DeInit+0x1c4>)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a5a      	ldr	r2, [pc, #360]	@ (80029a0 <HAL_GPIO_DeInit+0x1c8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d025      	beq.n	8002886 <HAL_GPIO_DeInit+0xae>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a59      	ldr	r2, [pc, #356]	@ (80029a4 <HAL_GPIO_DeInit+0x1cc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01f      	beq.n	8002882 <HAL_GPIO_DeInit+0xaa>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a58      	ldr	r2, [pc, #352]	@ (80029a8 <HAL_GPIO_DeInit+0x1d0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d019      	beq.n	800287e <HAL_GPIO_DeInit+0xa6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a57      	ldr	r2, [pc, #348]	@ (80029ac <HAL_GPIO_DeInit+0x1d4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <HAL_GPIO_DeInit+0xa2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a56      	ldr	r2, [pc, #344]	@ (80029b0 <HAL_GPIO_DeInit+0x1d8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00d      	beq.n	8002876 <HAL_GPIO_DeInit+0x9e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a55      	ldr	r2, [pc, #340]	@ (80029b4 <HAL_GPIO_DeInit+0x1dc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <HAL_GPIO_DeInit+0x9a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a54      	ldr	r2, [pc, #336]	@ (80029b8 <HAL_GPIO_DeInit+0x1e0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_GPIO_DeInit+0x96>
 800286a:	2306      	movs	r3, #6
 800286c:	e00c      	b.n	8002888 <HAL_GPIO_DeInit+0xb0>
 800286e:	2307      	movs	r3, #7
 8002870:	e00a      	b.n	8002888 <HAL_GPIO_DeInit+0xb0>
 8002872:	2305      	movs	r3, #5
 8002874:	e008      	b.n	8002888 <HAL_GPIO_DeInit+0xb0>
 8002876:	2304      	movs	r3, #4
 8002878:	e006      	b.n	8002888 <HAL_GPIO_DeInit+0xb0>
 800287a:	2303      	movs	r3, #3
 800287c:	e004      	b.n	8002888 <HAL_GPIO_DeInit+0xb0>
 800287e:	2302      	movs	r3, #2
 8002880:	e002      	b.n	8002888 <HAL_GPIO_DeInit+0xb0>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_GPIO_DeInit+0xb0>
 8002886:	2300      	movs	r3, #0
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	f002 0203 	and.w	r2, r2, #3
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	4093      	lsls	r3, r2
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	429a      	cmp	r2, r3
 8002896:	d132      	bne.n	80028fe <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002898:	4b48      	ldr	r3, [pc, #288]	@ (80029bc <HAL_GPIO_DeInit+0x1e4>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	43db      	mvns	r3, r3
 80028a0:	4946      	ldr	r1, [pc, #280]	@ (80029bc <HAL_GPIO_DeInit+0x1e4>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80028a6:	4b45      	ldr	r3, [pc, #276]	@ (80029bc <HAL_GPIO_DeInit+0x1e4>)
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	4943      	ldr	r1, [pc, #268]	@ (80029bc <HAL_GPIO_DeInit+0x1e4>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80028b4:	4b41      	ldr	r3, [pc, #260]	@ (80029bc <HAL_GPIO_DeInit+0x1e4>)
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	493f      	ldr	r1, [pc, #252]	@ (80029bc <HAL_GPIO_DeInit+0x1e4>)
 80028be:	4013      	ands	r3, r2
 80028c0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80028c2:	4b3e      	ldr	r3, [pc, #248]	@ (80029bc <HAL_GPIO_DeInit+0x1e4>)
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	493c      	ldr	r1, [pc, #240]	@ (80029bc <HAL_GPIO_DeInit+0x1e4>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80028e0:	4a2e      	ldr	r2, [pc, #184]	@ (800299c <HAL_GPIO_DeInit+0x1c4>)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	43da      	mvns	r2, r3
 80028f0:	482a      	ldr	r0, [pc, #168]	@ (800299c <HAL_GPIO_DeInit+0x1c4>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	400a      	ands	r2, r1
 80028f8:	3302      	adds	r3, #2
 80028fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2103      	movs	r1, #3
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	401a      	ands	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	220f      	movs	r2, #15
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	08d2      	lsrs	r2, r2, #3
 8002934:	4019      	ands	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3208      	adds	r2, #8
 800293a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2103      	movs	r1, #3
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	401a      	ands	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	2101      	movs	r1, #1
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	401a      	ands	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	2103      	movs	r1, #3
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	401a      	ands	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f af34 	bls.w	80027f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40013800 	.word	0x40013800
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020c00 	.word	0x40020c00
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40021400 	.word	0x40021400
 80029b8:	40021800 	.word	0x40021800
 80029bc:	40013c00 	.word	0x40013c00

080029c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
 80029cc:	4613      	mov	r3, r2
 80029ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d0:	787b      	ldrb	r3, [r7, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029dc:	e003      	b.n	80029e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	041a      	lsls	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	619a      	str	r2, [r3, #24]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029fe:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a0a:	4a05      	ldr	r2, [pc, #20]	@ (8002a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe f942 	bl	8000c9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40013c00 	.word	0x40013c00

08002a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0cc      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a38:	4b68      	ldr	r3, [pc, #416]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d90c      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b65      	ldr	r3, [pc, #404]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b63      	ldr	r3, [pc, #396]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0b8      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d020      	beq.n	8002aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a78:	4b59      	ldr	r3, [pc, #356]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a58      	ldr	r2, [pc, #352]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a90:	4b53      	ldr	r3, [pc, #332]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a52      	ldr	r2, [pc, #328]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a9c:	4b50      	ldr	r3, [pc, #320]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	494d      	ldr	r1, [pc, #308]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d044      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b47      	ldr	r3, [pc, #284]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d119      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e07f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d003      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e06f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af2:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e067      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b02:	4b37      	ldr	r3, [pc, #220]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4934      	ldr	r1, [pc, #208]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b14:	f7ff fb8a 	bl	800222c <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1c:	f7ff fb86 	bl	800222c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e04f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	4b2b      	ldr	r3, [pc, #172]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 020c 	and.w	r2, r3, #12
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d1eb      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b44:	4b25      	ldr	r3, [pc, #148]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d20c      	bcs.n	8002b6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b22      	ldr	r3, [pc, #136]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e032      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b78:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4916      	ldr	r1, [pc, #88]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d009      	beq.n	8002baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b96:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	490e      	ldr	r1, [pc, #56]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002baa:	f000 f855 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	490a      	ldr	r1, [pc, #40]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	5ccb      	ldrb	r3, [r1, r3]
 8002bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc2:	4a09      	ldr	r2, [pc, #36]	@ (8002be8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bc6:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff faea 	bl	80021a4 <HAL_InitTick>

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40023c00 	.word	0x40023c00
 8002be0:	40023800 	.word	0x40023800
 8002be4:	08004508 	.word	0x08004508
 8002be8:	20000134 	.word	0x20000134
 8002bec:	20000138 	.word	0x20000138

08002bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000134 	.word	0x20000134

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c0c:	f7ff fff0 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	0a9b      	lsrs	r3, r3, #10
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4903      	ldr	r1, [pc, #12]	@ (8002c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	08004518 	.word	0x08004518

08002c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c34:	f7ff ffdc 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	0b5b      	lsrs	r3, r3, #13
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	@ (8002c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	08004518 	.word	0x08004518

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c5c:	b0ae      	sub	sp, #184	@ 0xb8
 8002c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c7e:	4bcb      	ldr	r3, [pc, #812]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x354>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	f200 8206 	bhi.w	8003098 <HAL_RCC_GetSysClockFreq+0x440>
 8002c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	08002cc9 	.word	0x08002cc9
 8002c98:	08003099 	.word	0x08003099
 8002c9c:	08003099 	.word	0x08003099
 8002ca0:	08003099 	.word	0x08003099
 8002ca4:	08002cd1 	.word	0x08002cd1
 8002ca8:	08003099 	.word	0x08003099
 8002cac:	08003099 	.word	0x08003099
 8002cb0:	08003099 	.word	0x08003099
 8002cb4:	08002cd9 	.word	0x08002cd9
 8002cb8:	08003099 	.word	0x08003099
 8002cbc:	08003099 	.word	0x08003099
 8002cc0:	08003099 	.word	0x08003099
 8002cc4:	08002ec9 	.word	0x08002ec9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4bb9      	ldr	r3, [pc, #740]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002cce:	e1e7      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd0:	4bb8      	ldr	r3, [pc, #736]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cd6:	e1e3      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd8:	4bb4      	ldr	r3, [pc, #720]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x354>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce4:	4bb1      	ldr	r3, [pc, #708]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x354>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d071      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf0:	4bae      	ldr	r3, [pc, #696]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cfc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d16:	4622      	mov	r2, r4
 8002d18:	462b      	mov	r3, r5
 8002d1a:	f04f 0000 	mov.w	r0, #0
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	0159      	lsls	r1, r3, #5
 8002d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d28:	0150      	lsls	r0, r2, #5
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4621      	mov	r1, r4
 8002d30:	1a51      	subs	r1, r2, r1
 8002d32:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d34:	4629      	mov	r1, r5
 8002d36:	eb63 0301 	sbc.w	r3, r3, r1
 8002d3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002d48:	4649      	mov	r1, r9
 8002d4a:	018b      	lsls	r3, r1, #6
 8002d4c:	4641      	mov	r1, r8
 8002d4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d52:	4641      	mov	r1, r8
 8002d54:	018a      	lsls	r2, r1, #6
 8002d56:	4641      	mov	r1, r8
 8002d58:	1a51      	subs	r1, r2, r1
 8002d5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d5c:	4649      	mov	r1, r9
 8002d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002d70:	4649      	mov	r1, r9
 8002d72:	00cb      	lsls	r3, r1, #3
 8002d74:	4641      	mov	r1, r8
 8002d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	00ca      	lsls	r2, r1, #3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	4622      	mov	r2, r4
 8002d86:	189b      	adds	r3, r3, r2
 8002d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d8a:	462b      	mov	r3, r5
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	eb42 0303 	adc.w	r3, r2, r3
 8002d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002da0:	4629      	mov	r1, r5
 8002da2:	024b      	lsls	r3, r1, #9
 8002da4:	4621      	mov	r1, r4
 8002da6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002daa:	4621      	mov	r1, r4
 8002dac:	024a      	lsls	r2, r1, #9
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002dc0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002dc4:	f7fd fa1e 	bl	8000204 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dd2:	e067      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd4:	4b75      	ldr	r3, [pc, #468]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002de0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dee:	2300      	movs	r3, #0
 8002df0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002df2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002df6:	4622      	mov	r2, r4
 8002df8:	462b      	mov	r3, r5
 8002dfa:	f04f 0000 	mov.w	r0, #0
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	0159      	lsls	r1, r3, #5
 8002e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e08:	0150      	lsls	r0, r2, #5
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4621      	mov	r1, r4
 8002e10:	1a51      	subs	r1, r2, r1
 8002e12:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e14:	4629      	mov	r1, r5
 8002e16:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e28:	4649      	mov	r1, r9
 8002e2a:	018b      	lsls	r3, r1, #6
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e32:	4641      	mov	r1, r8
 8002e34:	018a      	lsls	r2, r1, #6
 8002e36:	4641      	mov	r1, r8
 8002e38:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e4e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e56:	4692      	mov	sl, r2
 8002e58:	469b      	mov	fp, r3
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	eb1a 0303 	adds.w	r3, sl, r3
 8002e60:	623b      	str	r3, [r7, #32]
 8002e62:	462b      	mov	r3, r5
 8002e64:	eb4b 0303 	adc.w	r3, fp, r3
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e76:	4629      	mov	r1, r5
 8002e78:	028b      	lsls	r3, r1, #10
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e80:	4621      	mov	r1, r4
 8002e82:	028a      	lsls	r2, r1, #10
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e90:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e92:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e96:	f7fd f9b5 	bl	8000204 <__aeabi_uldivmod>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ea4:	4b41      	ldr	r3, [pc, #260]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ec6:	e0eb      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec8:	4b38      	ldr	r3, [pc, #224]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x354>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed4:	4b35      	ldr	r3, [pc, #212]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d06b      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee0:	4b32      	ldr	r3, [pc, #200]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x354>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	099b      	lsrs	r3, r3, #6
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002eec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ef8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002efc:	4622      	mov	r2, r4
 8002efe:	462b      	mov	r3, r5
 8002f00:	f04f 0000 	mov.w	r0, #0
 8002f04:	f04f 0100 	mov.w	r1, #0
 8002f08:	0159      	lsls	r1, r3, #5
 8002f0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f0e:	0150      	lsls	r0, r2, #5
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4621      	mov	r1, r4
 8002f16:	1a51      	subs	r1, r2, r1
 8002f18:	61b9      	str	r1, [r7, #24]
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	eb63 0301 	sbc.w	r3, r3, r1
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f2e:	4659      	mov	r1, fp
 8002f30:	018b      	lsls	r3, r1, #6
 8002f32:	4651      	mov	r1, sl
 8002f34:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f38:	4651      	mov	r1, sl
 8002f3a:	018a      	lsls	r2, r1, #6
 8002f3c:	4651      	mov	r1, sl
 8002f3e:	ebb2 0801 	subs.w	r8, r2, r1
 8002f42:	4659      	mov	r1, fp
 8002f44:	eb63 0901 	sbc.w	r9, r3, r1
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f5c:	4690      	mov	r8, r2
 8002f5e:	4699      	mov	r9, r3
 8002f60:	4623      	mov	r3, r4
 8002f62:	eb18 0303 	adds.w	r3, r8, r3
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	462b      	mov	r3, r5
 8002f6a:	eb49 0303 	adc.w	r3, r9, r3
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	024b      	lsls	r3, r1, #9
 8002f80:	4621      	mov	r1, r4
 8002f82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f86:	4621      	mov	r1, r4
 8002f88:	024a      	lsls	r2, r1, #9
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f92:	2200      	movs	r2, #0
 8002f94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f96:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f9c:	f7fd f932 	bl	8000204 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002faa:	e065      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x420>
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	00f42400 	.word	0x00f42400
 8002fb4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fca:	2300      	movs	r3, #0
 8002fcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002fd2:	4642      	mov	r2, r8
 8002fd4:	464b      	mov	r3, r9
 8002fd6:	f04f 0000 	mov.w	r0, #0
 8002fda:	f04f 0100 	mov.w	r1, #0
 8002fde:	0159      	lsls	r1, r3, #5
 8002fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe4:	0150      	lsls	r0, r2, #5
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4641      	mov	r1, r8
 8002fec:	1a51      	subs	r1, r2, r1
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003004:	4659      	mov	r1, fp
 8003006:	018b      	lsls	r3, r1, #6
 8003008:	4651      	mov	r1, sl
 800300a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800300e:	4651      	mov	r1, sl
 8003010:	018a      	lsls	r2, r1, #6
 8003012:	4651      	mov	r1, sl
 8003014:	1a54      	subs	r4, r2, r1
 8003016:	4659      	mov	r1, fp
 8003018:	eb63 0501 	sbc.w	r5, r3, r1
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	00eb      	lsls	r3, r5, #3
 8003026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800302a:	00e2      	lsls	r2, r4, #3
 800302c:	4614      	mov	r4, r2
 800302e:	461d      	mov	r5, r3
 8003030:	4643      	mov	r3, r8
 8003032:	18e3      	adds	r3, r4, r3
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	464b      	mov	r3, r9
 8003038:	eb45 0303 	adc.w	r3, r5, r3
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800304a:	4629      	mov	r1, r5
 800304c:	028b      	lsls	r3, r1, #10
 800304e:	4621      	mov	r1, r4
 8003050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003054:	4621      	mov	r1, r4
 8003056:	028a      	lsls	r2, r1, #10
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003060:	2200      	movs	r2, #0
 8003062:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003064:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003066:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800306a:	f7fd f8cb 	bl	8000204 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4613      	mov	r3, r2
 8003074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003078:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	0f1b      	lsrs	r3, r3, #28
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800308a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003096:	e003      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800309a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800309e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	37b8      	adds	r7, #184	@ 0xb8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	00f42400 	.word	0x00f42400

080030b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e28d      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8083 	beq.w	80031de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030d8:	4b94      	ldr	r3, [pc, #592]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d019      	beq.n	8003118 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030e4:	4b91      	ldr	r3, [pc, #580]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030f0:	4b8e      	ldr	r3, [pc, #568]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030fc:	d00c      	beq.n	8003118 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fe:	4b8b      	ldr	r3, [pc, #556]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d112      	bne.n	8003130 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4b88      	ldr	r3, [pc, #544]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003116:	d10b      	bne.n	8003130 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	4b84      	ldr	r3, [pc, #528]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d05b      	beq.n	80031dc <HAL_RCC_OscConfig+0x124>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d157      	bne.n	80031dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e25a      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003138:	d106      	bne.n	8003148 <HAL_RCC_OscConfig+0x90>
 800313a:	4b7c      	ldr	r3, [pc, #496]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a7b      	ldr	r2, [pc, #492]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e01d      	b.n	8003184 <HAL_RCC_OscConfig+0xcc>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0xb4>
 8003152:	4b76      	ldr	r3, [pc, #472]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a75      	ldr	r2, [pc, #468]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	4b73      	ldr	r3, [pc, #460]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a72      	ldr	r2, [pc, #456]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e00b      	b.n	8003184 <HAL_RCC_OscConfig+0xcc>
 800316c:	4b6f      	ldr	r3, [pc, #444]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a6e      	ldr	r2, [pc, #440]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b6c      	ldr	r3, [pc, #432]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a6b      	ldr	r2, [pc, #428]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 800317e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d013      	beq.n	80031b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7ff f84e 	bl	800222c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003194:	f7ff f84a 	bl	800222c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	@ 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e21f      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	4b61      	ldr	r3, [pc, #388]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0xdc>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7ff f83a 	bl	800222c <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031bc:	f7ff f836 	bl	800222c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	@ 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e20b      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ce:	4b57      	ldr	r3, [pc, #348]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x104>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d06f      	beq.n	80032ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031ea:	4b50      	ldr	r3, [pc, #320]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d017      	beq.n	8003226 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031f6:	4b4d      	ldr	r3, [pc, #308]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d105      	bne.n	800320e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003202:	4b4a      	ldr	r3, [pc, #296]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b47      	ldr	r3, [pc, #284]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d11c      	bne.n	8003254 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321a:	4b44      	ldr	r3, [pc, #272]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d116      	bne.n	8003254 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003226:	4b41      	ldr	r3, [pc, #260]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_RCC_OscConfig+0x186>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d001      	beq.n	800323e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e1d3      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323e:	4b3b      	ldr	r3, [pc, #236]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4937      	ldr	r1, [pc, #220]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003252:	e03a      	b.n	80032ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800325c:	4b34      	ldr	r3, [pc, #208]	@ (8003330 <HAL_RCC_OscConfig+0x278>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fe ffe3 	bl	800222c <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326a:	f7fe ffdf 	bl	800222c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e1b4      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327c:	4b2b      	ldr	r3, [pc, #172]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003288:	4b28      	ldr	r3, [pc, #160]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4925      	ldr	r1, [pc, #148]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]
 800329c:	e015      	b.n	80032ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329e:	4b24      	ldr	r3, [pc, #144]	@ (8003330 <HAL_RCC_OscConfig+0x278>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe ffc2 	bl	800222c <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ac:	f7fe ffbe 	bl	800222c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e193      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	4b1b      	ldr	r3, [pc, #108]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d036      	beq.n	8003344 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032de:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe ffa2 	bl	800222c <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ec:	f7fe ff9e 	bl	800222c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e173      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fe:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <HAL_RCC_OscConfig+0x274>)
 8003300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x234>
 800330a:	e01b      	b.n	8003344 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330c:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <HAL_RCC_OscConfig+0x27c>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fe ff8b 	bl	800222c <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003318:	e00e      	b.n	8003338 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331a:	f7fe ff87 	bl	800222c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d907      	bls.n	8003338 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e15c      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
 800332c:	40023800 	.word	0x40023800
 8003330:	42470000 	.word	0x42470000
 8003334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	4b8a      	ldr	r3, [pc, #552]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 800333a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1ea      	bne.n	800331a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8097 	beq.w	8003480 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003356:	4b83      	ldr	r3, [pc, #524]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10f      	bne.n	8003382 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	4b7f      	ldr	r3, [pc, #508]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	4a7e      	ldr	r2, [pc, #504]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	@ 0x40
 8003372:	4b7c      	ldr	r3, [pc, #496]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b79      	ldr	r3, [pc, #484]	@ (8003568 <HAL_RCC_OscConfig+0x4b0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d118      	bne.n	80033c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338e:	4b76      	ldr	r3, [pc, #472]	@ (8003568 <HAL_RCC_OscConfig+0x4b0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a75      	ldr	r2, [pc, #468]	@ (8003568 <HAL_RCC_OscConfig+0x4b0>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fe ff47 	bl	800222c <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fe ff43 	bl	800222c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e118      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003568 <HAL_RCC_OscConfig+0x4b0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x31e>
 80033c8:	4b66      	ldr	r3, [pc, #408]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033cc:	4a65      	ldr	r2, [pc, #404]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d4:	e01c      	b.n	8003410 <HAL_RCC_OscConfig+0x358>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x340>
 80033de:	4b61      	ldr	r3, [pc, #388]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	4a60      	ldr	r2, [pc, #384]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ee:	4a5d      	ldr	r2, [pc, #372]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0x358>
 80033f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	4a59      	ldr	r2, [pc, #356]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6713      	str	r3, [r2, #112]	@ 0x70
 8003404:	4b57      	ldr	r3, [pc, #348]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003408:	4a56      	ldr	r2, [pc, #344]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 800340a:	f023 0304 	bic.w	r3, r3, #4
 800340e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d015      	beq.n	8003444 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fe ff08 	bl	800222c <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fe ff04 	bl	800222c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0d7      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003436:	4b4b      	ldr	r3, [pc, #300]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0ee      	beq.n	8003420 <HAL_RCC_OscConfig+0x368>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fe fef2 	bl	800222c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344a:	e00a      	b.n	8003462 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fe feee 	bl	800222c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e0c1      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003462:	4b40      	ldr	r3, [pc, #256]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1ee      	bne.n	800344c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800346e:	7dfb      	ldrb	r3, [r7, #23]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003474:	4b3b      	ldr	r3, [pc, #236]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	4a3a      	ldr	r2, [pc, #232]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 800347a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800347e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80ad 	beq.w	80035e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800348a:	4b36      	ldr	r3, [pc, #216]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b08      	cmp	r3, #8
 8003494:	d060      	beq.n	8003558 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d145      	bne.n	800352a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b33      	ldr	r3, [pc, #204]	@ (800356c <HAL_RCC_OscConfig+0x4b4>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fec2 	bl	800222c <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe febe 	bl	800222c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e093      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	4b29      	ldr	r3, [pc, #164]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	3b01      	subs	r3, #1
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	061b      	lsls	r3, r3, #24
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	071b      	lsls	r3, r3, #28
 80034f6:	491b      	ldr	r1, [pc, #108]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034fc:	4b1b      	ldr	r3, [pc, #108]	@ (800356c <HAL_RCC_OscConfig+0x4b4>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fe fe93 	bl	800222c <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350a:	f7fe fe8f 	bl	800222c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e064      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351c:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x452>
 8003528:	e05c      	b.n	80035e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352a:	4b10      	ldr	r3, [pc, #64]	@ (800356c <HAL_RCC_OscConfig+0x4b4>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe fe7c 	bl	800222c <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003538:	f7fe fe78 	bl	800222c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e04d      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x480>
 8003556:	e045      	b.n	80035e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d107      	bne.n	8003570 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e040      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
 8003564:	40023800 	.word	0x40023800
 8003568:	40007000 	.word	0x40007000
 800356c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003570:	4b1f      	ldr	r3, [pc, #124]	@ (80035f0 <HAL_RCC_OscConfig+0x538>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d030      	beq.n	80035e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d129      	bne.n	80035e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d122      	bne.n	80035e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d119      	bne.n	80035e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	3b01      	subs	r3, #1
 80035ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d10f      	bne.n	80035e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800

080035f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e07b      	b.n	80036fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	2b00      	cmp	r3, #0
 800360c:	d108      	bne.n	8003620 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003616:	d009      	beq.n	800362c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	61da      	str	r2, [r3, #28]
 800361e:	e005      	b.n	800362c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fd fb6c 	bl	8000d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003662:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b0:	ea42 0103 	orr.w	r1, r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	0c1b      	lsrs	r3, r3, #16
 80036ca:	f003 0104 	and.w	r1, r3, #4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	f003 0210 	and.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69da      	ldr	r2, [r3, #28]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e01a      	b.n	800374e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800372e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7fd fb3f 	bl	8000db4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b088      	sub	sp, #32
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	4613      	mov	r3, r2
 8003764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_SPI_Transmit+0x22>
 8003774:	2302      	movs	r3, #2
 8003776:	e12d      	b.n	80039d4 <HAL_SPI_Transmit+0x27e>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003780:	f7fe fd54 	bl	800222c <HAL_GetTick>
 8003784:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d002      	beq.n	800379c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003796:	2302      	movs	r3, #2
 8003798:	77fb      	strb	r3, [r7, #31]
    goto error;
 800379a:	e116      	b.n	80039ca <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_SPI_Transmit+0x52>
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037ac:	e10d      	b.n	80039ca <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2203      	movs	r2, #3
 80037b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	88fa      	ldrh	r2, [r7, #6]
 80037c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88fa      	ldrh	r2, [r7, #6]
 80037cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037f4:	d10f      	bne.n	8003816 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003804:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003814:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d007      	beq.n	8003834 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800383c:	d14f      	bne.n	80038de <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_SPI_Transmit+0xf6>
 8003846:	8afb      	ldrh	r3, [r7, #22]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d142      	bne.n	80038d2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385c:	1c9a      	adds	r2, r3, #2
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003870:	e02f      	b.n	80038d2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b02      	cmp	r3, #2
 800387e:	d112      	bne.n	80038a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003884:	881a      	ldrh	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003890:	1c9a      	adds	r2, r3, #2
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038a4:	e015      	b.n	80038d2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038a6:	f7fe fcc1 	bl	800222c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d803      	bhi.n	80038be <HAL_SPI_Transmit+0x168>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d102      	bne.n	80038c4 <HAL_SPI_Transmit+0x16e>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80038d0:	e07b      	b.n	80039ca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ca      	bne.n	8003872 <HAL_SPI_Transmit+0x11c>
 80038dc:	e050      	b.n	8003980 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_SPI_Transmit+0x196>
 80038e6:	8afb      	ldrh	r3, [r7, #22]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d144      	bne.n	8003976 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	7812      	ldrb	r2, [r2, #0]
 80038f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003912:	e030      	b.n	8003976 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d113      	bne.n	800394a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	7812      	ldrb	r2, [r2, #0]
 800392e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003948:	e015      	b.n	8003976 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800394a:	f7fe fc6f 	bl	800222c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d803      	bhi.n	8003962 <HAL_SPI_Transmit+0x20c>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d102      	bne.n	8003968 <HAL_SPI_Transmit+0x212>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003974:	e029      	b.n	80039ca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1c9      	bne.n	8003914 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	6839      	ldr	r1, [r7, #0]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fa6f 	bl	8003e68 <SPI_EndRxTxTransaction>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e003      	b.n	80039ca <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80039d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08c      	sub	sp, #48	@ 0x30
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039ea:	2301      	movs	r3, #1
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_SPI_TransmitReceive+0x26>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e198      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x358>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a0a:	f7fe fc0f 	bl	800222c <HAL_GetTick>
 8003a0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a20:	887b      	ldrh	r3, [r7, #2]
 8003a22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d00f      	beq.n	8003a4c <HAL_SPI_TransmitReceive+0x70>
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a32:	d107      	bne.n	8003a44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d103      	bne.n	8003a44 <HAL_SPI_TransmitReceive+0x68>
 8003a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d003      	beq.n	8003a4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
 8003a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003a4a:	e16d      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x82>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x82>
 8003a58:	887b      	ldrh	r3, [r7, #2]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003a64:	e160      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d003      	beq.n	8003a7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2205      	movs	r2, #5
 8003a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	887a      	ldrh	r2, [r7, #2]
 8003a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	887a      	ldrh	r2, [r7, #2]
 8003aa2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aba:	2b40      	cmp	r3, #64	@ 0x40
 8003abc:	d007      	beq.n	8003ace <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003acc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ad6:	d17c      	bne.n	8003bd2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_SPI_TransmitReceive+0x10a>
 8003ae0:	8b7b      	ldrh	r3, [r7, #26]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d16a      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	881a      	ldrh	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	1c9a      	adds	r2, r3, #2
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b0a:	e057      	b.n	8003bbc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d11b      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x176>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d016      	beq.n	8003b52 <HAL_SPI_TransmitReceive+0x176>
 8003b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d113      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	881a      	ldrh	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	1c9a      	adds	r2, r3, #2
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d119      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x1b8>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d014      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b74:	b292      	uxth	r2, r2
 8003b76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b90:	2301      	movs	r3, #1
 8003b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b94:	f7fe fb4a 	bl	800222c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d80b      	bhi.n	8003bbc <HAL_SPI_TransmitReceive+0x1e0>
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d007      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003bba:	e0b5      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1a2      	bne.n	8003b0c <HAL_SPI_TransmitReceive+0x130>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d19d      	bne.n	8003b0c <HAL_SPI_TransmitReceive+0x130>
 8003bd0:	e080      	b.n	8003cd4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_SPI_TransmitReceive+0x204>
 8003bda:	8b7b      	ldrh	r3, [r7, #26]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d16f      	bne.n	8003cc0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	7812      	ldrb	r2, [r2, #0]
 8003bec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c06:	e05b      	b.n	8003cc0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d11c      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x274>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d017      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0x274>
 8003c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d114      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	7812      	ldrb	r2, [r2, #0]
 8003c32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d119      	bne.n	8003c92 <HAL_SPI_TransmitReceive+0x2b6>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d014      	beq.n	8003c92 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c92:	f7fe facb 	bl	800222c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d803      	bhi.n	8003caa <HAL_SPI_TransmitReceive+0x2ce>
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d102      	bne.n	8003cb0 <HAL_SPI_TransmitReceive+0x2d4>
 8003caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d107      	bne.n	8003cc0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003cbe:	e033      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d19e      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x22c>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d199      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f8c5 	bl	8003e68 <SPI_EndRxTxTransaction>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d006      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003cf0:	e01a      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d1e:	e003      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003d30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3730      	adds	r7, #48	@ 0x30
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d4a:	b2db      	uxtb	r3, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d68:	f7fe fa60 	bl	800222c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	4413      	add	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d78:	f7fe fa58 	bl	800222c <HAL_GetTick>
 8003d7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d7e:	4b39      	ldr	r3, [pc, #228]	@ (8003e64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	015b      	lsls	r3, r3, #5
 8003d84:	0d1b      	lsrs	r3, r3, #20
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d8e:	e054      	b.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d96:	d050      	beq.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d98:	f7fe fa48 	bl	800222c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d902      	bls.n	8003dae <SPI_WaitFlagStateUntilTimeout+0x56>
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d13d      	bne.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dc6:	d111      	bne.n	8003dec <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd0:	d004      	beq.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dda:	d107      	bne.n	8003dec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df4:	d10f      	bne.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e017      	b.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d19b      	bne.n	8003d90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000134 	.word	0x20000134

08003e68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff ff6a 	bl	8003d58 <SPI_WaitFlagStateUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e032      	b.n	8003f00 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f08 <SPI_EndRxTxTransaction+0xa0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003f0c <SPI_EndRxTxTransaction+0xa4>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	0d5b      	lsrs	r3, r3, #21
 8003ea6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eb8:	d112      	bne.n	8003ee0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2180      	movs	r1, #128	@ 0x80
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff ff47 	bl	8003d58 <SPI_WaitFlagStateUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d016      	beq.n	8003efe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed4:	f043 0220 	orr.w	r2, r3, #32
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e00f      	b.n	8003f00 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef6:	2b80      	cmp	r3, #128	@ 0x80
 8003ef8:	d0f2      	beq.n	8003ee0 <SPI_EndRxTxTransaction+0x78>
 8003efa:	e000      	b.n	8003efe <SPI_EndRxTxTransaction+0x96>
        break;
 8003efc:	bf00      	nop
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000134 	.word	0x20000134
 8003f0c:	165e9f81 	.word	0x165e9f81

08003f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e042      	b.n	8003fa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fc ff5a 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2224      	movs	r2, #36	@ 0x24
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f82b 	bl	8003fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b0c0      	sub	sp, #256	@ 0x100
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	68d9      	ldr	r1, [r3, #12]
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	ea40 0301 	orr.w	r3, r0, r1
 8003fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004008:	f021 010c 	bic.w	r1, r1, #12
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004016:	430b      	orrs	r3, r1
 8004018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402a:	6999      	ldr	r1, [r3, #24]
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	ea40 0301 	orr.w	r3, r0, r1
 8004036:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b8f      	ldr	r3, [pc, #572]	@ (800427c <UART_SetConfig+0x2cc>)
 8004040:	429a      	cmp	r2, r3
 8004042:	d005      	beq.n	8004050 <UART_SetConfig+0xa0>
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b8d      	ldr	r3, [pc, #564]	@ (8004280 <UART_SetConfig+0x2d0>)
 800404c:	429a      	cmp	r2, r3
 800404e:	d104      	bne.n	800405a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004050:	f7fe fdee 	bl	8002c30 <HAL_RCC_GetPCLK2Freq>
 8004054:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004058:	e003      	b.n	8004062 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800405a:	f7fe fdd5 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 800405e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800406c:	f040 810c 	bne.w	8004288 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800407a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800407e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004082:	4622      	mov	r2, r4
 8004084:	462b      	mov	r3, r5
 8004086:	1891      	adds	r1, r2, r2
 8004088:	65b9      	str	r1, [r7, #88]	@ 0x58
 800408a:	415b      	adcs	r3, r3
 800408c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800408e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004092:	4621      	mov	r1, r4
 8004094:	eb12 0801 	adds.w	r8, r2, r1
 8004098:	4629      	mov	r1, r5
 800409a:	eb43 0901 	adc.w	r9, r3, r1
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040b2:	4690      	mov	r8, r2
 80040b4:	4699      	mov	r9, r3
 80040b6:	4623      	mov	r3, r4
 80040b8:	eb18 0303 	adds.w	r3, r8, r3
 80040bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040c0:	462b      	mov	r3, r5
 80040c2:	eb49 0303 	adc.w	r3, r9, r3
 80040c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040de:	460b      	mov	r3, r1
 80040e0:	18db      	adds	r3, r3, r3
 80040e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80040e4:	4613      	mov	r3, r2
 80040e6:	eb42 0303 	adc.w	r3, r2, r3
 80040ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80040ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040f4:	f7fc f886 	bl	8000204 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4b61      	ldr	r3, [pc, #388]	@ (8004284 <UART_SetConfig+0x2d4>)
 80040fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	011c      	lsls	r4, r3, #4
 8004106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004110:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004114:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004118:	4642      	mov	r2, r8
 800411a:	464b      	mov	r3, r9
 800411c:	1891      	adds	r1, r2, r2
 800411e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004120:	415b      	adcs	r3, r3
 8004122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004124:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004128:	4641      	mov	r1, r8
 800412a:	eb12 0a01 	adds.w	sl, r2, r1
 800412e:	4649      	mov	r1, r9
 8004130:	eb43 0b01 	adc.w	fp, r3, r1
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004140:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004148:	4692      	mov	sl, r2
 800414a:	469b      	mov	fp, r3
 800414c:	4643      	mov	r3, r8
 800414e:	eb1a 0303 	adds.w	r3, sl, r3
 8004152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004156:	464b      	mov	r3, r9
 8004158:	eb4b 0303 	adc.w	r3, fp, r3
 800415c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800416c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004170:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004174:	460b      	mov	r3, r1
 8004176:	18db      	adds	r3, r3, r3
 8004178:	643b      	str	r3, [r7, #64]	@ 0x40
 800417a:	4613      	mov	r3, r2
 800417c:	eb42 0303 	adc.w	r3, r2, r3
 8004180:	647b      	str	r3, [r7, #68]	@ 0x44
 8004182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004186:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800418a:	f7fc f83b 	bl	8000204 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4611      	mov	r1, r2
 8004194:	4b3b      	ldr	r3, [pc, #236]	@ (8004284 <UART_SetConfig+0x2d4>)
 8004196:	fba3 2301 	umull	r2, r3, r3, r1
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2264      	movs	r2, #100	@ 0x64
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	1acb      	subs	r3, r1, r3
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041aa:	4b36      	ldr	r3, [pc, #216]	@ (8004284 <UART_SetConfig+0x2d4>)
 80041ac:	fba3 2302 	umull	r2, r3, r3, r2
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041b8:	441c      	add	r4, r3
 80041ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041cc:	4642      	mov	r2, r8
 80041ce:	464b      	mov	r3, r9
 80041d0:	1891      	adds	r1, r2, r2
 80041d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041d4:	415b      	adcs	r3, r3
 80041d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041dc:	4641      	mov	r1, r8
 80041de:	1851      	adds	r1, r2, r1
 80041e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80041e2:	4649      	mov	r1, r9
 80041e4:	414b      	adcs	r3, r1
 80041e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041f4:	4659      	mov	r1, fp
 80041f6:	00cb      	lsls	r3, r1, #3
 80041f8:	4651      	mov	r1, sl
 80041fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041fe:	4651      	mov	r1, sl
 8004200:	00ca      	lsls	r2, r1, #3
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	4603      	mov	r3, r0
 8004208:	4642      	mov	r2, r8
 800420a:	189b      	adds	r3, r3, r2
 800420c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004210:	464b      	mov	r3, r9
 8004212:	460a      	mov	r2, r1
 8004214:	eb42 0303 	adc.w	r3, r2, r3
 8004218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004228:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800422c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004230:	460b      	mov	r3, r1
 8004232:	18db      	adds	r3, r3, r3
 8004234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004236:	4613      	mov	r3, r2
 8004238:	eb42 0303 	adc.w	r3, r2, r3
 800423c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800423e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004242:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004246:	f7fb ffdd 	bl	8000204 <__aeabi_uldivmod>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4b0d      	ldr	r3, [pc, #52]	@ (8004284 <UART_SetConfig+0x2d4>)
 8004250:	fba3 1302 	umull	r1, r3, r3, r2
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	2164      	movs	r1, #100	@ 0x64
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	3332      	adds	r3, #50	@ 0x32
 8004262:	4a08      	ldr	r2, [pc, #32]	@ (8004284 <UART_SetConfig+0x2d4>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	f003 0207 	and.w	r2, r3, #7
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4422      	add	r2, r4
 8004276:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004278:	e106      	b.n	8004488 <UART_SetConfig+0x4d8>
 800427a:	bf00      	nop
 800427c:	40011000 	.word	0x40011000
 8004280:	40011400 	.word	0x40011400
 8004284:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800428c:	2200      	movs	r2, #0
 800428e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004292:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004296:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800429a:	4642      	mov	r2, r8
 800429c:	464b      	mov	r3, r9
 800429e:	1891      	adds	r1, r2, r2
 80042a0:	6239      	str	r1, [r7, #32]
 80042a2:	415b      	adcs	r3, r3
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042aa:	4641      	mov	r1, r8
 80042ac:	1854      	adds	r4, r2, r1
 80042ae:	4649      	mov	r1, r9
 80042b0:	eb43 0501 	adc.w	r5, r3, r1
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	00eb      	lsls	r3, r5, #3
 80042be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042c2:	00e2      	lsls	r2, r4, #3
 80042c4:	4614      	mov	r4, r2
 80042c6:	461d      	mov	r5, r3
 80042c8:	4643      	mov	r3, r8
 80042ca:	18e3      	adds	r3, r4, r3
 80042cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042d0:	464b      	mov	r3, r9
 80042d2:	eb45 0303 	adc.w	r3, r5, r3
 80042d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042f6:	4629      	mov	r1, r5
 80042f8:	008b      	lsls	r3, r1, #2
 80042fa:	4621      	mov	r1, r4
 80042fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004300:	4621      	mov	r1, r4
 8004302:	008a      	lsls	r2, r1, #2
 8004304:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004308:	f7fb ff7c 	bl	8000204 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4b60      	ldr	r3, [pc, #384]	@ (8004494 <UART_SetConfig+0x4e4>)
 8004312:	fba3 2302 	umull	r2, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	011c      	lsls	r4, r3, #4
 800431a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004324:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004328:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	1891      	adds	r1, r2, r2
 8004332:	61b9      	str	r1, [r7, #24]
 8004334:	415b      	adcs	r3, r3
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800433c:	4641      	mov	r1, r8
 800433e:	1851      	adds	r1, r2, r1
 8004340:	6139      	str	r1, [r7, #16]
 8004342:	4649      	mov	r1, r9
 8004344:	414b      	adcs	r3, r1
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004354:	4659      	mov	r1, fp
 8004356:	00cb      	lsls	r3, r1, #3
 8004358:	4651      	mov	r1, sl
 800435a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800435e:	4651      	mov	r1, sl
 8004360:	00ca      	lsls	r2, r1, #3
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	4603      	mov	r3, r0
 8004368:	4642      	mov	r2, r8
 800436a:	189b      	adds	r3, r3, r2
 800436c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004370:	464b      	mov	r3, r9
 8004372:	460a      	mov	r2, r1
 8004374:	eb42 0303 	adc.w	r3, r2, r3
 8004378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004386:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004394:	4649      	mov	r1, r9
 8004396:	008b      	lsls	r3, r1, #2
 8004398:	4641      	mov	r1, r8
 800439a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800439e:	4641      	mov	r1, r8
 80043a0:	008a      	lsls	r2, r1, #2
 80043a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043a6:	f7fb ff2d 	bl	8000204 <__aeabi_uldivmod>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	4b38      	ldr	r3, [pc, #224]	@ (8004494 <UART_SetConfig+0x4e4>)
 80043b2:	fba3 2301 	umull	r2, r3, r3, r1
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2264      	movs	r2, #100	@ 0x64
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	1acb      	subs	r3, r1, r3
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	3332      	adds	r3, #50	@ 0x32
 80043c4:	4a33      	ldr	r2, [pc, #204]	@ (8004494 <UART_SetConfig+0x4e4>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043d0:	441c      	add	r4, r3
 80043d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043d6:	2200      	movs	r2, #0
 80043d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80043da:	677a      	str	r2, [r7, #116]	@ 0x74
 80043dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043e0:	4642      	mov	r2, r8
 80043e2:	464b      	mov	r3, r9
 80043e4:	1891      	adds	r1, r2, r2
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	415b      	adcs	r3, r3
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f0:	4641      	mov	r1, r8
 80043f2:	1851      	adds	r1, r2, r1
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	4649      	mov	r1, r9
 80043f8:	414b      	adcs	r3, r1
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004408:	4659      	mov	r1, fp
 800440a:	00cb      	lsls	r3, r1, #3
 800440c:	4651      	mov	r1, sl
 800440e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004412:	4651      	mov	r1, sl
 8004414:	00ca      	lsls	r2, r1, #3
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	4603      	mov	r3, r0
 800441c:	4642      	mov	r2, r8
 800441e:	189b      	adds	r3, r3, r2
 8004420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004422:	464b      	mov	r3, r9
 8004424:	460a      	mov	r2, r1
 8004426:	eb42 0303 	adc.w	r3, r2, r3
 800442a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	663b      	str	r3, [r7, #96]	@ 0x60
 8004436:	667a      	str	r2, [r7, #100]	@ 0x64
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004444:	4649      	mov	r1, r9
 8004446:	008b      	lsls	r3, r1, #2
 8004448:	4641      	mov	r1, r8
 800444a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800444e:	4641      	mov	r1, r8
 8004450:	008a      	lsls	r2, r1, #2
 8004452:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004456:	f7fb fed5 	bl	8000204 <__aeabi_uldivmod>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <UART_SetConfig+0x4e4>)
 8004460:	fba3 1302 	umull	r1, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	2164      	movs	r1, #100	@ 0x64
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	3332      	adds	r3, #50	@ 0x32
 8004472:	4a08      	ldr	r2, [pc, #32]	@ (8004494 <UART_SetConfig+0x4e4>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f003 020f 	and.w	r2, r3, #15
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4422      	add	r2, r4
 8004486:	609a      	str	r2, [r3, #8]
}
 8004488:	bf00      	nop
 800448a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800448e:	46bd      	mov	sp, r7
 8004490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004494:	51eb851f 	.word	0x51eb851f

08004498 <memset>:
 8004498:	4402      	add	r2, r0
 800449a:	4603      	mov	r3, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	f803 1b01 	strb.w	r1, [r3], #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <__libc_init_array>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	4d0d      	ldr	r5, [pc, #52]	@ (80044e0 <__libc_init_array+0x38>)
 80044ac:	4c0d      	ldr	r4, [pc, #52]	@ (80044e4 <__libc_init_array+0x3c>)
 80044ae:	1b64      	subs	r4, r4, r5
 80044b0:	10a4      	asrs	r4, r4, #2
 80044b2:	2600      	movs	r6, #0
 80044b4:	42a6      	cmp	r6, r4
 80044b6:	d109      	bne.n	80044cc <__libc_init_array+0x24>
 80044b8:	4d0b      	ldr	r5, [pc, #44]	@ (80044e8 <__libc_init_array+0x40>)
 80044ba:	4c0c      	ldr	r4, [pc, #48]	@ (80044ec <__libc_init_array+0x44>)
 80044bc:	f000 f818 	bl	80044f0 <_init>
 80044c0:	1b64      	subs	r4, r4, r5
 80044c2:	10a4      	asrs	r4, r4, #2
 80044c4:	2600      	movs	r6, #0
 80044c6:	42a6      	cmp	r6, r4
 80044c8:	d105      	bne.n	80044d6 <__libc_init_array+0x2e>
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d0:	4798      	blx	r3
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7ee      	b.n	80044b4 <__libc_init_array+0xc>
 80044d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044da:	4798      	blx	r3
 80044dc:	3601      	adds	r6, #1
 80044de:	e7f2      	b.n	80044c6 <__libc_init_array+0x1e>
 80044e0:	08004528 	.word	0x08004528
 80044e4:	08004528 	.word	0x08004528
 80044e8:	08004528 	.word	0x08004528
 80044ec:	0800452c 	.word	0x0800452c

080044f0 <_init>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	bf00      	nop
 80044f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f6:	bc08      	pop	{r3}
 80044f8:	469e      	mov	lr, r3
 80044fa:	4770      	bx	lr

080044fc <_fini>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	bf00      	nop
 8004500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004502:	bc08      	pop	{r3}
 8004504:	469e      	mov	lr, r3
 8004506:	4770      	bx	lr

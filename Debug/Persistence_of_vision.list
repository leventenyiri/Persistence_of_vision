
Persistence_of_vision.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005824  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080059f4  080059f4  000069f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a54  08005a54  000071ec  2**0
                  CONTENTS
  4 .ARM          00000008  08005a54  08005a54  00006a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a5c  08005a5c  000071ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a5c  08005a5c  00006a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08005a64  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  200001ec  08005c50  000071ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08005c50  000074b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018548  00000000  00000000  0000721c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233b  00000000  00000000  0001f764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  00021aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001000  00000000  00000000  00022f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c86  00000000  00000000  00023f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bdc  00000000  00000000  00046bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d36ee  00000000  00000000  000587d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bec0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006004  00000000  00000000  0012bf04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00131f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059dc 	.word	0x080059dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	080059dc 	.word	0x080059dc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <OutputEnable>:

	 would look like this, now i write each column into a vector, and i will light up these leds
	 with a delay to display the character
	 */

void OutputEnable(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Set PB2 low to enable output
 80005a4:	2200      	movs	r2, #0
 80005a6:	2104      	movs	r1, #4
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <OutputEnable+0x14>)
 80005aa:	f002 fc33 	bl	8002e14 <HAL_GPIO_WritePin>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020400 	.word	0x40020400

080005b8 <OutputDisable>:

void OutputDisable(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Set PB2 high to disable output
 80005bc:	2201      	movs	r2, #1
 80005be:	2104      	movs	r1, #4
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <OutputDisable+0x14>)
 80005c2:	f002 fc27 	bl	8002e14 <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40020400 	.word	0x40020400

080005d0 <LatchEnable>:

void LatchEnable(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // Set PB1 high
 80005d4:	2201      	movs	r2, #1
 80005d6:	2102      	movs	r1, #2
 80005d8:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <LatchEnable+0x24>)
 80005da:	f002 fc1b 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_Delay(1);  // Short delay to ensure the latch pulse is detected
 80005de:	2001      	movs	r0, #1
 80005e0:	f002 f85a 	bl	8002698 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Set PB1 low again
 80005e4:	2200      	movs	r2, #0
 80005e6:	2102      	movs	r1, #2
 80005e8:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <LatchEnable+0x24>)
 80005ea:	f002 fc13 	bl	8002e14 <HAL_GPIO_WritePin>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40020400 	.word	0x40020400

080005f8 <SendLEDData>:


void SendLEDData(uint8_t *data) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 8000600:	2305      	movs	r3, #5
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	e00a      	b.n	800061c <SendLEDData+0x24>
		HAL_SPI_Transmit(&hspi2, &data[i], 1, 100);  // Send 1 byte per driver
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	18d1      	adds	r1, r2, r3
 800060c:	2364      	movs	r3, #100	@ 0x64
 800060e:	2201      	movs	r2, #1
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <SendLEDData+0x38>)
 8000612:	f003 faca 	bl	8003baa <HAL_SPI_Transmit>
	for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3b01      	subs	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b00      	cmp	r3, #0
 8000620:	daf1      	bge.n	8000606 <SendLEDData+0xe>
	}
	LatchEnable();  // Latch data once all have been transmitted
 8000622:	f7ff ffd5 	bl	80005d0 <LatchEnable>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000021c 	.word	0x2000021c

08000634 <CombineLEDData>:

void CombineLEDData(uint8_t *result, uint8_t ledIdx) {
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]

	for (int j = 0; j < 6; j++) {   // Each LED configuration is 6 bytes
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e016      	b.n	8000674 <CombineLEDData+0x40>
		result[j] |= LED_ARRAY[ledIdx][j];
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	480d      	ldr	r0, [pc, #52]	@ (8000688 <CombineLEDData+0x54>)
 8000652:	4613      	mov	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	18c2      	adds	r2, r0, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	4403      	add	r3, r0
 8000668:	430a      	orrs	r2, r1
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 6; j++) {   // Each LED configuration is 6 bytes
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	3301      	adds	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b05      	cmp	r3, #5
 8000678:	dde5      	ble.n	8000646 <CombineLEDData+0x12>
	}

}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	20000064 	.word	0x20000064

0800068c <CombineAndSendNEW>:
		result[j] += LED_ARRAY[ledIdx][j];
	}

}

void CombineAndSendNEW(uint16_t ledMask,uint8_t color) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	80fb      	strh	r3, [r7, #6]
 8000698:	4613      	mov	r3, r2
 800069a:	717b      	strb	r3, [r7, #5]

	//if the value of a variable is 1, concatenate that LED into the sum
	char a = (ledMask & 0b1000000000000000) >> 15;
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	0bdb      	lsrs	r3, r3, #15
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	77fb      	strb	r3, [r7, #31]
	char b = (ledMask & 0b0100000000000000) >> 14;
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	139b      	asrs	r3, r3, #14
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	77bb      	strb	r3, [r7, #30]
	char c = (ledMask & 0b0010000000000000) >> 13;
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	135b      	asrs	r3, r3, #13
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	777b      	strb	r3, [r7, #29]
	char d = (ledMask & 0b0001000000000000) >> 12;
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	131b      	asrs	r3, r3, #12
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	773b      	strb	r3, [r7, #28]
	char e = (ledMask & 0b0000100000000000) >> 11;
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	12db      	asrs	r3, r3, #11
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	76fb      	strb	r3, [r7, #27]
	char f = (ledMask & 0b0000010000000000) >> 10;
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	129b      	asrs	r3, r3, #10
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	76bb      	strb	r3, [r7, #26]
	char g = (ledMask & 0b0000001000000000) >> 9;
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	125b      	asrs	r3, r3, #9
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	767b      	strb	r3, [r7, #25]
	char h = (ledMask & 0b0000000100000000) >> 8;
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	121b      	asrs	r3, r3, #8
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	763b      	strb	r3, [r7, #24]
	char i = (ledMask & 0b0000000010000000) >> 7;
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	11db      	asrs	r3, r3, #7
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	75fb      	strb	r3, [r7, #23]
	char j = (ledMask & 0b0000000001000000) >> 6;
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	119b      	asrs	r3, r3, #6
 8000708:	b2db      	uxtb	r3, r3
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	75bb      	strb	r3, [r7, #22]
	char k = (ledMask & 0b0000000000100000) >> 5;
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	115b      	asrs	r3, r3, #5
 8000714:	b2db      	uxtb	r3, r3
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	757b      	strb	r3, [r7, #21]
	char l = (ledMask & 0b0000000000010000) >> 4;
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	111b      	asrs	r3, r3, #4
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	753b      	strb	r3, [r7, #20]
	char m = (ledMask & 0b0000000000001000) >> 3;
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	10db      	asrs	r3, r3, #3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	74fb      	strb	r3, [r7, #19]
	char n = (ledMask & 0b0000000000000100) >> 2;
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	109b      	asrs	r3, r3, #2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	74bb      	strb	r3, [r7, #18]
	char o = (ledMask & 0b0000000000000010) >> 1;
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	105b      	asrs	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	747b      	strb	r3, [r7, #17]
	char p = (ledMask & 0b0000000000000001);
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	743b      	strb	r3, [r7, #16]

	uint8_t LED[6] = { 0 };
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	2300      	movs	r3, #0
 800075c:	81bb      	strh	r3, [r7, #12]
	if(color == green){
		CombineLEDData(LED,green);
	}
*/

	if (a) {
 800075e:	7ffb      	ldrb	r3, [r7, #31]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d005      	beq.n	8000770 <CombineAndSendNEW+0xe4>
		CombineLEDData(LED, 0);
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff62 	bl	8000634 <CombineLEDData>
	}
	if (b) {
 8000770:	7fbb      	ldrb	r3, [r7, #30]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d005      	beq.n	8000782 <CombineAndSendNEW+0xf6>
		CombineLEDData(LED, 3);
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2103      	movs	r1, #3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff59 	bl	8000634 <CombineLEDData>
	}
	if (c) {
 8000782:	7f7b      	ldrb	r3, [r7, #29]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d005      	beq.n	8000794 <CombineAndSendNEW+0x108>
		CombineLEDData(LED, 6);
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	2106      	movs	r1, #6
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff50 	bl	8000634 <CombineLEDData>
	}
	if (d) {
 8000794:	7f3b      	ldrb	r3, [r7, #28]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d005      	beq.n	80007a6 <CombineAndSendNEW+0x11a>
		CombineLEDData(LED, 9);
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2109      	movs	r1, #9
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff47 	bl	8000634 <CombineLEDData>
	}
	if (e) {
 80007a6:	7efb      	ldrb	r3, [r7, #27]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d005      	beq.n	80007b8 <CombineAndSendNEW+0x12c>
		CombineLEDData(LED, 12);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	210c      	movs	r1, #12
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff3e 	bl	8000634 <CombineLEDData>
	}
	if (f) {
 80007b8:	7ebb      	ldrb	r3, [r7, #26]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d005      	beq.n	80007ca <CombineAndSendNEW+0x13e>
		CombineLEDData(LED, 15);
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	210f      	movs	r1, #15
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff35 	bl	8000634 <CombineLEDData>
	}
	if (g) {
 80007ca:	7e7b      	ldrb	r3, [r7, #25]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <CombineAndSendNEW+0x150>
		CombineLEDData(LED, 18);
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	2112      	movs	r1, #18
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff2c 	bl	8000634 <CombineLEDData>
	}
	if (h) {
 80007dc:	7e3b      	ldrb	r3, [r7, #24]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d005      	beq.n	80007ee <CombineAndSendNEW+0x162>
		CombineLEDData(LED, 21);
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2115      	movs	r1, #21
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff23 	bl	8000634 <CombineLEDData>
	}
	if (i) {
 80007ee:	7dfb      	ldrb	r3, [r7, #23]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <CombineAndSendNEW+0x174>
		CombineLEDData(LED, 24);
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2118      	movs	r1, #24
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff1a 	bl	8000634 <CombineLEDData>
	}
	if (j) {
 8000800:	7dbb      	ldrb	r3, [r7, #22]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d005      	beq.n	8000812 <CombineAndSendNEW+0x186>
		CombineLEDData(LED, 27);
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	211b      	movs	r1, #27
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff11 	bl	8000634 <CombineLEDData>
	}
	if (k) {
 8000812:	7d7b      	ldrb	r3, [r7, #21]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <CombineAndSendNEW+0x198>
		CombineLEDData(LED, 30);
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	211e      	movs	r1, #30
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff08 	bl	8000634 <CombineLEDData>
	}
	if (l) {
 8000824:	7d3b      	ldrb	r3, [r7, #20]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d005      	beq.n	8000836 <CombineAndSendNEW+0x1aa>
		CombineLEDData(LED, 33);
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	2121      	movs	r1, #33	@ 0x21
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff feff 	bl	8000634 <CombineLEDData>
	}
	if (m) {
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d005      	beq.n	8000848 <CombineAndSendNEW+0x1bc>
		CombineLEDData(LED, 36);
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2124      	movs	r1, #36	@ 0x24
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fef6 	bl	8000634 <CombineLEDData>
	}
	if (n) {
 8000848:	7cbb      	ldrb	r3, [r7, #18]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d005      	beq.n	800085a <CombineAndSendNEW+0x1ce>
		CombineLEDData(LED, 39);
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	2127      	movs	r1, #39	@ 0x27
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff feed 	bl	8000634 <CombineLEDData>
	}
	if (o) {
 800085a:	7c7b      	ldrb	r3, [r7, #17]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d005      	beq.n	800086c <CombineAndSendNEW+0x1e0>
		CombineLEDData(LED, 42);
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	212a      	movs	r1, #42	@ 0x2a
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fee4 	bl	8000634 <CombineLEDData>
	}
	if (p) {
 800086c:	7c3b      	ldrb	r3, [r7, #16]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d005      	beq.n	800087e <CombineAndSendNEW+0x1f2>
		CombineLEDData(LED, 45);
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	212d      	movs	r1, #45	@ 0x2d
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fedb 	bl	8000634 <CombineLEDData>
	}

	SendLEDData(LED);
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff feb8 	bl	80005f8 <SendLEDData>
}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <wrap_platform_read>:

int32_t wrap_platform_read(uint8_t Address, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	603a      	str	r2, [r7, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	460b      	mov	r3, r1
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	4613      	mov	r3, r2
 80008a4:	80bb      	strh	r3, [r7, #4]
	Reg |= 0x80;
 80008a6:	79bb      	ldrb	r3, [r7, #6]
 80008a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2110      	movs	r1, #16
 80008b4:	480b      	ldr	r0, [pc, #44]	@ (80008e4 <wrap_platform_read+0x54>)
 80008b6:	f002 faad 	bl	8002e14 <HAL_GPIO_WritePin>
	BSP_SPI1_Send(&Reg, 1);
 80008ba:	1dbb      	adds	r3, r7, #6
 80008bc:	2101      	movs	r1, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fd14 	bl	80012ec <BSP_SPI1_Send>
	BSP_SPI1_SendRecv(&Reg, Bufp, len);
 80008c4:	88ba      	ldrh	r2, [r7, #4]
 80008c6:	1dbb      	adds	r3, r7, #6
 80008c8:	6839      	ldr	r1, [r7, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fd2a 	bl	8001324 <BSP_SPI1_SendRecv>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <wrap_platform_read+0x54>)
 80008d6:	f002 fa9d 	bl	8002e14 <HAL_GPIO_WritePin>
	return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40020000 	.word	0x40020000

080008e8 <wrap_platform_write>:

int32_t wrap_platform_write(uint8_t Address, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	603a      	str	r2, [r7, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	460b      	mov	r3, r1
 80008f8:	71bb      	strb	r3, [r7, #6]
 80008fa:	4613      	mov	r3, r2
 80008fc:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2110      	movs	r1, #16
 8000902:	480b      	ldr	r0, [pc, #44]	@ (8000930 <wrap_platform_write+0x48>)
 8000904:	f002 fa86 	bl	8002e14 <HAL_GPIO_WritePin>
	BSP_SPI1_Send(&Reg, 1);
 8000908:	1dbb      	adds	r3, r7, #6
 800090a:	2101      	movs	r1, #1
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fced 	bl	80012ec <BSP_SPI1_Send>
	BSP_SPI1_Send(Bufp, len);
 8000912:	88bb      	ldrh	r3, [r7, #4]
 8000914:	4619      	mov	r1, r3
 8000916:	6838      	ldr	r0, [r7, #0]
 8000918:	f000 fce8 	bl	80012ec <BSP_SPI1_Send>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2110      	movs	r1, #16
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <wrap_platform_write+0x48>)
 8000922:	f002 fa77 	bl	8002e14 <HAL_GPIO_WritePin>
	return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40020000 	.word	0x40020000

08000934 <Display_char>:

    int delayTime = 500 / (abs(speed)/100+1);  // Avoid division by zero by ensuring speed is never zero in the caller
    return delayTime; // The delay decreases as the speed increases
}

void Display_char(uint16_t (*ASCII)[9], int32_t x){
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]


	HAL_Delay(50);
 800093e:	2032      	movs	r0, #50	@ 0x32
 8000940:	f001 feaa 	bl	8002698 <HAL_Delay>


	//if we move it to the right read the array from 0->9
	if (x > 200 && dir_change.flag == 1) {
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2bc8      	cmp	r3, #200	@ 0xc8
 8000948:	dd38      	ble.n	80009bc <Display_char+0x88>
 800094a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a3c <Display_char+0x108>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d031      	beq.n	80009bc <Display_char+0x88>
		for (int a = 0; a < 7; a++) {
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	e01d      	b.n	800099a <Display_char+0x66>
			for (int i = 0; i < 9; i++) {
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	e014      	b.n	800098e <Display_char+0x5a>
				CombineAndSendNEW(ASCII[a][i], red);
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	4613      	mov	r3, r2
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	4413      	add	r3, r2
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	461a      	mov	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4413      	add	r3, r2
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800097a:	2105      	movs	r1, #5
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fe85 	bl	800068c <CombineAndSendNEW>
				HAL_Delay(0.05);
 8000982:	2000      	movs	r0, #0
 8000984:	f001 fe88 	bl	8002698 <HAL_Delay>
			for (int i = 0; i < 9; i++) {
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	3301      	adds	r3, #1
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	2b08      	cmp	r3, #8
 8000992:	dde7      	ble.n	8000964 <Display_char+0x30>
		for (int a = 0; a < 7; a++) {
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	3301      	adds	r3, #1
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	2b06      	cmp	r3, #6
 800099e:	ddde      	ble.n	800095e <Display_char+0x2a>
			}
		}

		dir_change.flag ^= 1;
 80009a0:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <Display_char+0x108>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f083 0301 	eor.w	r3, r3, #1
 80009ae:	b2d9      	uxtb	r1, r3
 80009b0:	4a22      	ldr	r2, [pc, #136]	@ (8000a3c <Display_char+0x108>)
 80009b2:	7813      	ldrb	r3, [r2, #0]
 80009b4:	f361 0300 	bfi	r3, r1, #0, #1
 80009b8:	7013      	strb	r3, [r2, #0]





}
 80009ba:	e03b      	b.n	8000a34 <Display_char+0x100>
	else if (x < -200 && dir_change.flag == 0) {
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f113 0fc8 	cmn.w	r3, #200	@ 0xc8
 80009c2:	da37      	bge.n	8000a34 <Display_char+0x100>
 80009c4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <Display_char+0x108>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d130      	bne.n	8000a34 <Display_char+0x100>
		for (int b = 0; b < 7; b++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e01d      	b.n	8000a14 <Display_char+0xe0>
			for (int j = 8; j >= 0; j--) {
 80009d8:	2308      	movs	r3, #8
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	e014      	b.n	8000a08 <Display_char+0xd4>
				CombineAndSendNEW(ASCII[b][j], red);
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4613      	mov	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	461a      	mov	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80009f4:	2105      	movs	r1, #5
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe48 	bl	800068c <CombineAndSendNEW>
				HAL_Delay(0.05);
 80009fc:	2000      	movs	r0, #0
 80009fe:	f001 fe4b 	bl	8002698 <HAL_Delay>
			for (int j = 8; j >= 0; j--) {
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	dae7      	bge.n	80009de <Display_char+0xaa>
		for (int b = 0; b < 7; b++) {
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	ddde      	ble.n	80009d8 <Display_char+0xa4>
		dir_change.flag ^= 1;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <Display_char+0x108>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	f083 0301 	eor.w	r3, r3, #1
 8000a28:	b2d9      	uxtb	r1, r3
 8000a2a:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <Display_char+0x108>)
 8000a2c:	7813      	ldrb	r3, [r2, #0]
 8000a2e:	f361 0300 	bfi	r3, r1, #0, #1
 8000a32:	7013      	strb	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200002f8 	.word	0x200002f8

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0a6      	sub	sp, #152	@ 0x98
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f001 fdb5 	bl	80025b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f901 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 f9cd 	bl	8000dec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a52:	f000 f9a1 	bl	8000d98 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000a56:	f000 f969 	bl	8000d2c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  OutputDisable();  // Disable outputs during initialization
 8000a5a:	f7ff fdad 	bl	80005b8 <OutputDisable>
  SendLEDData(LED_CLEAR);
 8000a5e:	4872      	ldr	r0, [pc, #456]	@ (8000c28 <main+0x1e8>)
 8000a60:	f7ff fdca 	bl	80005f8 <SendLEDData>
  OutputEnable();
 8000a64:	f7ff fd9c 	bl	80005a0 <OutputEnable>

  MEMS_Init();
 8000a68:	f000 fa5a 	bl	8000f20 <MEMS_Init>
  LSM6DSL_Axes_t acc_axes;
  int delayTime;



  dir_change.flag =1; //using a flag to detect the change of direction
 8000a6c:	4a6f      	ldr	r2, [pc, #444]	@ (8000c2c <main+0x1ec>)
 8000a6e:	7813      	ldrb	r3, [r2, #0]
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	7013      	strb	r3, [r2, #0]


  uint16_t ASCII_ARRAY[7][9];

	for (int i = 0; i < 7; i++) {
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000a7c:	e0b0      	b.n	8000be0 <main+0x1a0>
		for (int j = 0; j < 9; j++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000a84:	e0a2      	b.n	8000bcc <main+0x18c>

			if (i = 0)
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000a8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d012      	beq.n	8000aba <main+0x7a>
				ASCII_ARRAY[i][j] = BLANK[j];
 8000a94:	4a66      	ldr	r2, [pc, #408]	@ (8000c30 <main+0x1f0>)
 8000a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000a9a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000aac:	4413      	add	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	3398      	adds	r3, #152	@ 0x98
 8000ab2:	443b      	add	r3, r7
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	f823 2c98 	strh.w	r2, [r3, #-152]
			if (i = 1)
 8000aba:	2301      	movs	r3, #1
 8000abc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				ASCII_ARRAY[i][j] = E[j];
 8000ac0:	4a5c      	ldr	r2, [pc, #368]	@ (8000c34 <main+0x1f4>)
 8000ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ac6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000ace:	4613      	mov	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000ad8:	4413      	add	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	3398      	adds	r3, #152	@ 0x98
 8000ade:	443b      	add	r3, r7
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	f823 2c98 	strh.w	r2, [r3, #-152]
			if (i = 2)
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				ASCII_ARRAY[i][j] = R[j];
 8000aec:	4a52      	ldr	r2, [pc, #328]	@ (8000c38 <main+0x1f8>)
 8000aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000af2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000afa:	4613      	mov	r3, r2
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	4413      	add	r3, r2
 8000b00:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000b04:	4413      	add	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	3398      	adds	r3, #152	@ 0x98
 8000b0a:	443b      	add	r3, r7
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	f823 2c98 	strh.w	r2, [r3, #-152]
			if (i = 3)
 8000b12:	2303      	movs	r3, #3
 8000b14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				ASCII_ARRAY[i][j] = I[j];
 8000b18:	4a48      	ldr	r2, [pc, #288]	@ (8000c3c <main+0x1fc>)
 8000b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b1e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000b26:	4613      	mov	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4413      	add	r3, r2
 8000b2c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000b30:	4413      	add	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	3398      	adds	r3, #152	@ 0x98
 8000b36:	443b      	add	r3, r7
 8000b38:	460a      	mov	r2, r1
 8000b3a:	f823 2c98 	strh.w	r2, [r3, #-152]
			if (i = 4)
 8000b3e:	2304      	movs	r3, #4
 8000b40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				ASCII_ARRAY[i][j] = K[j];
 8000b44:	4a3e      	ldr	r2, [pc, #248]	@ (8000c40 <main+0x200>)
 8000b46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b4a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000b52:	4613      	mov	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	4413      	add	r3, r2
 8000b58:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000b5c:	4413      	add	r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	3398      	adds	r3, #152	@ 0x98
 8000b62:	443b      	add	r3, r7
 8000b64:	460a      	mov	r2, r1
 8000b66:	f823 2c98 	strh.w	r2, [r3, #-152]
			if (i = 5)
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				ASCII_ARRAY[i][j] = A[j];
 8000b70:	4a34      	ldr	r2, [pc, #208]	@ (8000c44 <main+0x204>)
 8000b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b76:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000b7e:	4613      	mov	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	4413      	add	r3, r2
 8000b84:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	3398      	adds	r3, #152	@ 0x98
 8000b8e:	443b      	add	r3, r7
 8000b90:	460a      	mov	r2, r1
 8000b92:	f823 2c98 	strh.w	r2, [r3, #-152]
			if (i = 6)
 8000b96:	2306      	movs	r3, #6
 8000b98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				ASCII_ARRAY[i][j] = BLANK[j];
 8000b9c:	4a24      	ldr	r2, [pc, #144]	@ (8000c30 <main+0x1f0>)
 8000b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ba2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000baa:	4613      	mov	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	4413      	add	r3, r2
 8000bb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	3398      	adds	r3, #152	@ 0x98
 8000bba:	443b      	add	r3, r7
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	f823 2c98 	strh.w	r2, [r3, #-152]
		for (int j = 0; j < 9; j++) {
 8000bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000bcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000bd0:	2b08      	cmp	r3, #8
 8000bd2:	f77f af58 	ble.w	8000a86 <main+0x46>
	for (int i = 0; i < 7; i++) {
 8000bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000bda:	3301      	adds	r3, #1
 8000bdc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000be0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000be4:	2b06      	cmp	r3, #6
 8000be6:	f77f af4a 	ble.w	8000a7e <main+0x3e>
  {




		LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8000bea:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4815      	ldr	r0, [pc, #84]	@ (8000c48 <main+0x208>)
 8000bf2:	f000 fef1 	bl	80019d8 <LSM6DSL_ACC_GetAxes>

		printf("% 5d, % 5d, % 5d\r\n", (int) acc_axes.x, (int) acc_axes.y,
 8000bf6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000bfa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
			(int) acc_axes.z);
 8000bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
		printf("% 5d, % 5d, % 5d\r\n", (int) acc_axes.x, (int) acc_axes.y,
 8000c02:	4812      	ldr	r0, [pc, #72]	@ (8000c4c <main+0x20c>)
 8000c04:	f004 f87c 	bl	8004d00 <iprintf>

		//delayTime = calculateDelay((int) acc_axes.x);


		int halo = acc_axes.x;
 8000c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Display_char(ASCII_ARRAY, acc_axes.x);
 8000c10:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000c14:	463b      	mov	r3, r7
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fe8b 	bl	8000934 <Display_char>
		HAL_Delay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f001 fd3a 	bl	8002698 <HAL_Delay>
  {
 8000c24:	bf00      	nop
 8000c26:	e7e0      	b.n	8000bea <main+0x1aa>
 8000c28:	200002fc 	.word	0x200002fc
 8000c2c:	200002f8 	.word	0x200002f8
 8000c30:	20000208 	.word	0x20000208
 8000c34:	20000014 	.word	0x20000014
 8000c38:	20000028 	.word	0x20000028
 8000c3c:	2000003c 	.word	0x2000003c
 8000c40:	20000050 	.word	0x20000050
 8000c44:	20000000 	.word	0x20000000
 8000c48:	200002bc 	.word	0x200002bc
 8000c4c:	080059f4 	.word	0x080059f4

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	@ 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	2234      	movs	r2, #52	@ 0x34
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 f8a3 	bl	8004daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <SystemClock_Config+0xd4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	4a29      	ldr	r2, [pc, #164]	@ (8000d24 <SystemClock_Config+0xd4>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c84:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <SystemClock_Config+0xd4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	4b24      	ldr	r3, [pc, #144]	@ (8000d28 <SystemClock_Config+0xd8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c9c:	4a22      	ldr	r2, [pc, #136]	@ (8000d28 <SystemClock_Config+0xd8>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <SystemClock_Config+0xd8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cc8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ccc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 fc14 	bl	800350c <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cea:	f000 f98f 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 f8b4 	bl	8002e78 <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d16:	f000 f979 	bl	800100c <Error_Handler>
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3750      	adds	r7, #80	@ 0x50
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40007000 	.word	0x40007000

08000d2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d32:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <MX_SPI2_Init+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d36:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d78:	220a      	movs	r2, #10
 8000d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_SPI2_Init+0x64>)
 8000d7e:	f002 fe63 	bl	8003a48 <HAL_SPI_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d88:	f000 f940 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000021c 	.word	0x2000021c
 8000d94:	40003800 	.word	0x40003800

08000d98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <MX_USART2_UART_Init+0x50>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	f003 fac8 	bl	8004364 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dda:	f000 f917 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000274 	.word	0x20000274
 8000de8:	40004400 	.word	0x40004400

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b42      	ldr	r3, [pc, #264]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a41      	ldr	r2, [pc, #260]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b3f      	ldr	r3, [pc, #252]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b3b      	ldr	r3, [pc, #236]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a3a      	ldr	r2, [pc, #232]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b38      	ldr	r3, [pc, #224]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b34      	ldr	r3, [pc, #208]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a33      	ldr	r2, [pc, #204]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b31      	ldr	r3, [pc, #196]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b2a      	ldr	r3, [pc, #168]	@ (8000f10 <MX_GPIO_Init+0x124>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2110      	movs	r1, #16
 8000e76:	4827      	ldr	r0, [pc, #156]	@ (8000f14 <MX_GPIO_Init+0x128>)
 8000e78:	f001 ffcc 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_LE_Pin|LED_OE_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2106      	movs	r1, #6
 8000e80:	4825      	ldr	r0, [pc, #148]	@ (8000f18 <MX_GPIO_Init+0x12c>)
 8000e82:	f001 ffc7 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e8c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481f      	ldr	r0, [pc, #124]	@ (8000f1c <MX_GPIO_Init+0x130>)
 8000e9e:	f001 fd31 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4816      	ldr	r0, [pc, #88]	@ (8000f14 <MX_GPIO_Init+0x128>)
 8000eba:	f001 fd23 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LE_Pin LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_LE_Pin|LED_OE_Pin;
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4810      	ldr	r0, [pc, #64]	@ (8000f18 <MX_GPIO_Init+0x12c>)
 8000ed6:	f001 fd15 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_INT1_EXTI11_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_INT1_EXTI11_Pin;
 8000eda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6DSL_INT1_EXTI11_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480a      	ldr	r0, [pc, #40]	@ (8000f1c <MX_GPIO_Init+0x130>)
 8000ef2:	f001 fd07 	bl	8002904 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2028      	movs	r0, #40	@ 0x28
 8000efc:	f001 fccb 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f00:	2028      	movs	r0, #40	@ 0x28
 8000f02:	f001 fce4 	bl	80028ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	@ 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	40020800 	.word	0x40020800

08000f20 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id ;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
	io_ctx.BusType = LSM6DSL_SPI_4WIRES_BUS;
 8000f26:	2301      	movs	r3, #1
 8000f28:	613b      	str	r3, [r7, #16]
	io_ctx.Address = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	753b      	strb	r3, [r7, #20]
	io_ctx.Init = BSP_SPI1_Init;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <MEMS_Init+0x7c>)
 8000f30:	60bb      	str	r3, [r7, #8]
	io_ctx.DeInit = BSP_SPI1_DeInit;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MEMS_Init+0x80>)
 8000f34:	60fb      	str	r3, [r7, #12]
	io_ctx.ReadReg = wrap_platform_read;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <MEMS_Init+0x84>)
 8000f38:	61fb      	str	r3, [r7, #28]
	io_ctx.WriteReg = wrap_platform_write;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <MEMS_Init+0x88>)
 8000f3c:	61bb      	str	r3, [r7, #24]
	io_ctx.GetTick = BSP_GetTick;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <MEMS_Init+0x8c>)
 8000f40:	623b      	str	r3, [r7, #32]
	LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4619      	mov	r1, r3
 8000f48:	4819      	ldr	r0, [pc, #100]	@ (8000fb0 <MEMS_Init+0x90>)
 8000f4a:	f000 fb89 	bl	8001660 <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4817      	ldr	r0, [pc, #92]	@ (8000fb0 <MEMS_Init+0x90>)
 8000f54:	f000 fc57 	bl	8001806 <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b6a      	cmp	r3, #106	@ 0x6a
 8000f5c:	d001      	beq.n	8000f62 <MEMS_Init+0x42>
    Error_Handler();
 8000f5e:	f000 f855 	bl	800100c <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 8000f62:	4813      	ldr	r0, [pc, #76]	@ (8000fb0 <MEMS_Init+0x90>)
 8000f64:	f000 fbe6 	bl	8001734 <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 8000f68:	eeb3 0a0a 	vmov.f32	s0, #58	@ 0x41d00000  26.0
 8000f6c:	4810      	ldr	r0, [pc, #64]	@ (8000fb0 <MEMS_Init+0x90>)
 8000f6e:	f000 fccb 	bl	8001908 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 8000f72:	2104      	movs	r1, #4
 8000f74:	480e      	ldr	r0, [pc, #56]	@ (8000fb0 <MEMS_Init+0x90>)
 8000f76:	f000 fce3 	bl	8001940 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <MEMS_Init+0x90>)
 8000f7e:	f000 fd9d 	bl	8001abc <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	480a      	ldr	r0, [pc, #40]	@ (8000fb0 <MEMS_Init+0x90>)
 8000f88:	f000 fd02 	bl	8001990 <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 8000f8c:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <MEMS_Init+0x90>)
 8000f8e:	f000 fc50 	bl	8001832 <LSM6DSL_ACC_Enable>
}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	@ 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	0800123d 	.word	0x0800123d
 8000fa0:	0800129d 	.word	0x0800129d
 8000fa4:	08000891 	.word	0x08000891
 8000fa8:	080008e9 	.word	0x080008e9
 8000fac:	08001365 	.word	0x08001365
 8000fb0:	200002bc 	.word	0x200002bc

08000fb4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000fc4:	d104      	bne.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 8000fc6:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <HAL_GPIO_EXTI_Callback+0x28>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a03      	ldr	r2, [pc, #12]	@ (8000fdc <HAL_GPIO_EXTI_Callback+0x28>)
 8000fce:	6013      	str	r3, [r2, #0]
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	200002f4 	.word	0x200002f4

08000fe0 <_write>:

int _write(int fd, char * ptr, int len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	4804      	ldr	r0, [pc, #16]	@ (8001008 <_write+0x28>)
 8000ff8:	f003 fa04 	bl	8004404 <HAL_UART_Transmit>
  return len;
 8000ffc:	687b      	ldr	r3, [r7, #4]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000274 	.word	0x20000274

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <Error_Handler+0x8>

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a0f      	ldr	r2, [pc, #60]	@ (8001064 <HAL_MspInit+0x4c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_MspInit+0x4c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001056:	2007      	movs	r0, #7
 8001058:	f001 fc12 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a19      	ldr	r2, [pc, #100]	@ (80010ec <HAL_SPI_MspInit+0x84>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d12c      	bne.n	80010e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <HAL_SPI_MspInit+0x88>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <HAL_SPI_MspInit+0x88>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001098:	6413      	str	r3, [r2, #64]	@ 0x40
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_SPI_MspInit+0x88>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_SPI_MspInit+0x88>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <HAL_SPI_MspInit+0x88>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <HAL_SPI_MspInit+0x88>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80010c2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d4:	2305      	movs	r3, #5
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <HAL_SPI_MspInit+0x8c>)
 80010e0:	f001 fc10 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	@ 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40003800 	.word	0x40003800
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400

080010f8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <HAL_SPI_MspDeInit+0x30>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d10a      	bne.n	8001120 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <HAL_SPI_MspDeInit+0x34>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a07      	ldr	r2, [pc, #28]	@ (800112c <HAL_SPI_MspDeInit+0x34>)
 8001110:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40

    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 8001116:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <HAL_SPI_MspDeInit+0x38>)
 800111c:	f001 fd86 	bl	8002c2c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40003800 	.word	0x40003800
 800112c:	40023800 	.word	0x40023800
 8001130:	40020400 	.word	0x40020400

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <HAL_UART_MspInit+0x84>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12b      	bne.n	80011ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_UART_MspInit+0x88>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <HAL_UART_MspInit+0x88>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001164:	6413      	str	r3, [r2, #64]	@ 0x40
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_UART_MspInit+0x88>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_UART_MspInit+0x88>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a10      	ldr	r2, [pc, #64]	@ (80011bc <HAL_UART_MspInit+0x88>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_UART_MspInit+0x88>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800118e:	230c      	movs	r3, #12
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119e:	2307      	movs	r3, #7
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <HAL_UART_MspInit+0x8c>)
 80011aa:	f001 fbab 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	@ 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121a:	f001 fa1d 	bl	8002658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}

08001222 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001226:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800122a:	f001 fe0d 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800122e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001232:	f001 fe09 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8001246:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <BSP_SPI1_Init+0x54>)
 8001248:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <BSP_SPI1_Init+0x58>)
 800124a:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <BSP_SPI1_Init+0x5c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	4911      	ldr	r1, [pc, #68]	@ (8001298 <BSP_SPI1_Init+0x5c>)
 8001254:	600a      	str	r2, [r1, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d114      	bne.n	8001284 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800125a:	480d      	ldr	r0, [pc, #52]	@ (8001290 <BSP_SPI1_Init+0x54>)
 800125c:	f002 ff98 	bl	8004190 <HAL_SPI_GetState>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10e      	bne.n	8001284 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001266:	480a      	ldr	r0, [pc, #40]	@ (8001290 <BSP_SPI1_Init+0x54>)
 8001268:	f000 f8c0 	bl	80013ec <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d108      	bne.n	8001284 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001272:	4807      	ldr	r0, [pc, #28]	@ (8001290 <BSP_SPI1_Init+0x54>)
 8001274:	f000 f87e 	bl	8001374 <MX_SPI1_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800127e:	f06f 0307 	mvn.w	r3, #7
 8001282:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000304 	.word	0x20000304
 8001294:	40013000 	.word	0x40013000
 8001298:	2000035c 	.word	0x2000035c

0800129c <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80012a2:	f06f 0307 	mvn.w	r3, #7
 80012a6:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <BSP_SPI1_DeInit+0x48>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d013      	beq.n	80012d8 <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <BSP_SPI1_DeInit+0x48>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4a0b      	ldr	r2, [pc, #44]	@ (80012e4 <BSP_SPI1_DeInit+0x48>)
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <BSP_SPI1_DeInit+0x48>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10a      	bne.n	80012d8 <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 80012c2:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <BSP_SPI1_DeInit+0x4c>)
 80012c4:	f000 f8ea 	bl	800149c <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 80012c8:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <BSP_SPI1_DeInit+0x4c>)
 80012ca:	f002 fc46 	bl	8003b5a <HAL_SPI_DeInit>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000035c 	.word	0x2000035c
 80012e8:	20000304 	.word	0x20000304

080012ec <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80012fc:	887a      	ldrh	r2, [r7, #2]
 80012fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4806      	ldr	r0, [pc, #24]	@ (8001320 <BSP_SPI1_Send+0x34>)
 8001306:	f002 fc50 	bl	8003baa <HAL_SPI_Transmit>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001310:	f06f 0305 	mvn.w	r3, #5
 8001314:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000304 	.word	0x20000304

08001324 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af02      	add	r7, sp, #8
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	4613      	mov	r3, r2
 8001330:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800133c:	9200      	str	r2, [sp, #0]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	68f9      	ldr	r1, [r7, #12]
 8001342:	4807      	ldr	r0, [pc, #28]	@ (8001360 <BSP_SPI1_SendRecv+0x3c>)
 8001344:	f002 fd74 	bl	8003e30 <HAL_SPI_TransmitReceive>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800134e:	f06f 0305 	mvn.w	r3, #5
 8001352:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001354:	697b      	ldr	r3, [r7, #20]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000304 	.word	0x20000304

08001364 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001368:	f001 f98a 	bl	8002680 <HAL_GetTick>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a19      	ldr	r2, [pc, #100]	@ (80013e8 <MX_SPI1_Init+0x74>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800138c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ac:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2218      	movs	r2, #24
 80013b2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	220a      	movs	r2, #10
 80013ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f002 fb3b 	bl	8003a48 <HAL_SPI_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40013000 	.word	0x40013000

080013ec <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <SPI1_MspInit+0xa8>)
 80013fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fc:	4a25      	ldr	r2, [pc, #148]	@ (8001494 <SPI1_MspInit+0xa8>)
 80013fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001402:	6453      	str	r3, [r2, #68]	@ 0x44
 8001404:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <SPI1_MspInit+0xa8>)
 8001406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001408:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <SPI1_MspInit+0xa8>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001418:	4a1e      	ldr	r2, [pc, #120]	@ (8001494 <SPI1_MspInit+0xa8>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001420:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <SPI1_MspInit+0xa8>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800142c:	2320      	movs	r3, #32
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800143c:	2305      	movs	r3, #5
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	4814      	ldr	r0, [pc, #80]	@ (8001498 <SPI1_MspInit+0xac>)
 8001448:	f001 fa5c 	bl	8002904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800144c:	2340      	movs	r3, #64	@ 0x40
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800145c:	2305      	movs	r3, #5
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	480c      	ldr	r0, [pc, #48]	@ (8001498 <SPI1_MspInit+0xac>)
 8001468:	f001 fa4c 	bl	8002904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800147c:	2305      	movs	r3, #5
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4804      	ldr	r0, [pc, #16]	@ (8001498 <SPI1_MspInit+0xac>)
 8001488:	f001 fa3c 	bl	8002904 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	@ 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000

0800149c <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <SPI1_MspDeInit+0x34>)
 80014a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a8:	4a09      	ldr	r2, [pc, #36]	@ (80014d0 <SPI1_MspDeInit+0x34>)
 80014aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014ae:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 80014b0:	2120      	movs	r1, #32
 80014b2:	4808      	ldr	r0, [pc, #32]	@ (80014d4 <SPI1_MspDeInit+0x38>)
 80014b4:	f001 fbba 	bl	8002c2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 80014b8:	2140      	movs	r1, #64	@ 0x40
 80014ba:	4806      	ldr	r0, [pc, #24]	@ (80014d4 <SPI1_MspDeInit+0x38>)
 80014bc:	f001 fbb6 	bl	8002c2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 80014c0:	2180      	movs	r1, #128	@ 0x80
 80014c2:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <SPI1_MspDeInit+0x38>)
 80014c4:	f001 fbb2 	bl	8002c2c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e00a      	b.n	8001500 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ea:	f3af 8000 	nop.w
 80014ee:	4601      	mov	r1, r0
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	b2ca      	uxtb	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf0      	blt.n	80014ea <_read+0x12>
  }

  return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800153a:	605a      	str	r2, [r3, #4]
  return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_isatty>:

int _isatty(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001584:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <_sbrk+0x5c>)
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <_sbrk+0x60>)
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <_sbrk+0x64>)
 800159a:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <_sbrk+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ac:	f003 fc4c 	bl	8004e48 <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20020000 	.word	0x20020000
 80015dc:	00000400 	.word	0x00000400
 80015e0:	20000360 	.word	0x20000360
 80015e4:	200004b8 	.word	0x200004b8

080015e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <SystemInit+0x20>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <SystemInit+0x20>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001644 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001610:	f7ff ffea 	bl	80015e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001614:	480c      	ldr	r0, [pc, #48]	@ (8001648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001616:	490d      	ldr	r1, [pc, #52]	@ (800164c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001618:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800162c:	4c0a      	ldr	r4, [pc, #40]	@ (8001658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800163a:	f003 fc0b 	bl	8004e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff f9ff 	bl	8000a40 <main>
  bx  lr    
 8001642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001650:	08005a64 	.word	0x08005a64
  ldr r2, =_sbss
 8001654:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001658:	200004b4 	.word	0x200004b4

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>
	...

08001660 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d103      	bne.n	800167c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e051      	b.n	8001720 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	7b1a      	ldrb	r2, [r3, #12]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	695a      	ldr	r2, [r3, #20]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	699a      	ldr	r2, [r3, #24]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a1d      	ldr	r2, [pc, #116]	@ (800172c <LSM6DSL_RegisterBusIO+0xcc>)
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001730 <LSM6DSL_RegisterBusIO+0xd0>)
 80016be:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	69da      	ldr	r2, [r3, #28]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e020      	b.n	8001720 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4798      	blx	r3
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e016      	b.n	8001720 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d112      	bne.n	8001720 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10d      	bne.n	8001720 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001704:	230c      	movs	r3, #12
 8001706:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8001708:	7afb      	ldrb	r3, [r7, #11]
 800170a:	461a      	mov	r2, r3
 800170c:	2112      	movs	r1, #18
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f9b9 	bl	8001a86 <LSM6DSL_Write_Reg>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001720:	68fb      	ldr	r3, [r7, #12]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	08001d41 	.word	0x08001d41
 8001730:	08001d77 	.word	0x08001d77

08001734 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3320      	adds	r3, #32
 8001740:	2101      	movs	r1, #1
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fcb1 	bl	80020aa <lsm6dsl_auto_increment_set>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	e054      	b.n	80017fe <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3320      	adds	r3, #32
 8001758:	2101      	movs	r1, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fc26 	bl	8001fac <lsm6dsl_block_data_update_set>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e048      	b.n	80017fe <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3320      	adds	r3, #32
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fef8 	bl	8002568 <lsm6dsl_fifo_mode_set>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	e03c      	b.n	80017fe <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2204      	movs	r2, #4
 8001788:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3320      	adds	r3, #32
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fb98 	bl	8001ec8 <lsm6dsl_xl_data_rate_set>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e02c      	b.n	80017fe <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3320      	adds	r3, #32
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fb2e 	bl	8001e0c <lsm6dsl_xl_full_scale_set>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e020      	b.n	80017fe <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2204      	movs	r2, #4
 80017c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3320      	adds	r3, #32
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fbc8 	bl	8001f60 <lsm6dsl_gy_data_rate_set>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	e010      	b.n	80017fe <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3320      	adds	r3, #32
 80017e0:	2106      	movs	r1, #6
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fb96 	bl	8001f14 <lsm6dsl_gy_full_scale_set>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	e004      	b.n	80017fe <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3320      	adds	r3, #32
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fc36 	bl	8002088 <lsm6dsl_device_id_get>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e000      	b.n	800182a <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	e014      	b.n	8001872 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f103 0220 	add.w	r2, r3, #32
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001854:	4619      	mov	r1, r3
 8001856:	4610      	mov	r0, r2
 8001858:	f000 fb36 	bl	8001ec8 <lsm6dsl_xl_data_rate_set>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	e004      	b.n	8001872 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3320      	adds	r3, #32
 800188e:	f107 020b 	add.w	r2, r7, #11
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fadf 	bl	8001e58 <lsm6dsl_xl_full_scale_get>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	e023      	b.n	80018ee <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80018a6:	7afb      	ldrb	r3, [r7, #11]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d81b      	bhi.n	80018e4 <LSM6DSL_ACC_GetSensitivity+0x68>
 80018ac:	a201      	add	r2, pc, #4	@ (adr r2, 80018b4 <LSM6DSL_ACC_GetSensitivity+0x38>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080018c5 	.word	0x080018c5
 80018b8:	080018dd 	.word	0x080018dd
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	080018d5 	.word	0x080018d5
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4a0c      	ldr	r2, [pc, #48]	@ (80018f8 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 80018c8:	601a      	str	r2, [r3, #0]
      break;
 80018ca:	e00f      	b.n	80018ec <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <LSM6DSL_ACC_GetSensitivity+0x80>)
 80018d0:	601a      	str	r2, [r3, #0]
      break;
 80018d2:	e00b      	b.n	80018ec <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <LSM6DSL_ACC_GetSensitivity+0x84>)
 80018d8:	601a      	str	r2, [r3, #0]
      break;
 80018da:	e007      	b.n	80018ec <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4a09      	ldr	r2, [pc, #36]	@ (8001904 <LSM6DSL_ACC_GetSensitivity+0x88>)
 80018e0:	601a      	str	r2, [r3, #0]
      break;
 80018e2:	e003      	b.n	80018ec <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	60fb      	str	r3, [r7, #12]
      break;
 80018ea:	bf00      	nop
  }

  return ret;
 80018ec:	68fb      	ldr	r3, [r7, #12]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	3d79db23 	.word	0x3d79db23
 80018fc:	3df9db23 	.word	0x3df9db23
 8001900:	3e79db23 	.word	0x3e79db23
 8001904:	3ef9db23 	.word	0x3ef9db23

08001908 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800191a:	2b01      	cmp	r3, #1
 800191c:	d106      	bne.n	800192c <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800191e:	ed97 0a00 	vldr	s0, [r7]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8fe 	bl	8001b24 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8001928:	4603      	mov	r3, r0
 800192a:	e005      	b.n	8001938 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800192c:	ed97 0a00 	vldr	s0, [r7]
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f983 	bl	8001c3c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8001936:	4603      	mov	r3, r0
  }
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b02      	cmp	r3, #2
 800194e:	dd0b      	ble.n	8001968 <LSM6DSL_ACC_SetFullScale+0x28>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2b04      	cmp	r3, #4
 8001954:	dd06      	ble.n	8001964 <LSM6DSL_ACC_SetFullScale+0x24>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2b08      	cmp	r3, #8
 800195a:	dc01      	bgt.n	8001960 <LSM6DSL_ACC_SetFullScale+0x20>
 800195c:	2303      	movs	r3, #3
 800195e:	e004      	b.n	800196a <LSM6DSL_ACC_SetFullScale+0x2a>
 8001960:	2301      	movs	r3, #1
 8001962:	e002      	b.n	800196a <LSM6DSL_ACC_SetFullScale+0x2a>
 8001964:	2302      	movs	r3, #2
 8001966:	e000      	b.n	800196a <LSM6DSL_ACC_SetFullScale+0x2a>
 8001968:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800196a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3320      	adds	r3, #32
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fa49 	bl	8001e0c <lsm6dsl_xl_full_scale_set>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	e000      	b.n	8001988 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3320      	adds	r3, #32
 800199e:	f107 0208 	add.w	r2, r7, #8
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fb27 	bl	8001ff8 <lsm6dsl_acceleration_raw_get>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
 80019b4:	e00c      	b.n	80019d0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80019b6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80019be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80019c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3320      	adds	r3, #32
 80019ec:	f107 0210 	add.w	r2, r7, #16
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fb00 	bl	8001ff8 <lsm6dsl_acceleration_raw_get>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	e03c      	b.n	8001a7e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ff36 	bl	800187c <LSM6DSL_ACC_GetSensitivity>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e030      	b.n	8001a7e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001a1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a28:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a34:	ee17 2a90 	vmov	r2, s15
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001a3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a54:	ee17 2a90 	vmov	r2, s15
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001a5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a74:	ee17 2a90 	vmov	r2, s15
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	70fb      	strb	r3, [r7, #3]
 8001a92:	4613      	mov	r3, r2
 8001a94:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f103 0020 	add.w	r0, r3, #32
 8001a9c:	1cba      	adds	r2, r7, #2
 8001a9e:	78f9      	ldrb	r1, [r7, #3]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f000 f99b 	bl	8001ddc <lsm6dsl_write_reg>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	e000      	b.n	8001ab4 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3320      	adds	r3, #32
 8001acc:	f107 020c 	add.w	r2, r7, #12
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fc72 	bl	80023bc <lsm6dsl_pin_int1_route_get>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e01b      	b.n	8001b1c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d811      	bhi.n	8001b0e <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	7b3b      	ldrb	r3, [r7, #12]
 8001af4:	f362 0300 	bfi	r3, r2, #0, #1
 8001af8:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3320      	adds	r3, #32
 8001afe:	68f9      	ldr	r1, [r7, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 faf8 	bl	80020f6 <lsm6dsl_pin_int1_route_set>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8001b0c:	e002      	b.n	8001b14 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e003      	b.n	8001b1c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	e000      	b.n	8001b1c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001b30:	edd7 7a00 	vldr	s15, [r7]
 8001b34:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	d801      	bhi.n	8001b46 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e058      	b.n	8001bf8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001b46:	edd7 7a00 	vldr	s15, [r7]
 8001b4a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b56:	d801      	bhi.n	8001b5c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e04d      	b.n	8001bf8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001b5c:	edd7 7a00 	vldr	s15, [r7]
 8001b60:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001c20 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8001b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6c:	d801      	bhi.n	8001b72 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e042      	b.n	8001bf8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001b72:	edd7 7a00 	vldr	s15, [r7]
 8001b76:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001c24 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b82:	d801      	bhi.n	8001b88 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8001b84:	2304      	movs	r3, #4
 8001b86:	e037      	b.n	8001bf8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001b88:	edd7 7a00 	vldr	s15, [r7]
 8001b8c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001c28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8001b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	d801      	bhi.n	8001b9e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	e02c      	b.n	8001bf8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001b9e:	edd7 7a00 	vldr	s15, [r7]
 8001ba2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001c2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8001ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	d801      	bhi.n	8001bb4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8001bb0:	2306      	movs	r3, #6
 8001bb2:	e021      	b.n	8001bf8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001bb4:	edd7 7a00 	vldr	s15, [r7]
 8001bb8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001c30 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8001bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	d801      	bhi.n	8001bca <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	e016      	b.n	8001bf8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001bca:	edd7 7a00 	vldr	s15, [r7]
 8001bce:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8001bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	d801      	bhi.n	8001be0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8001bdc:	2308      	movs	r3, #8
 8001bde:	e00b      	b.n	8001bf8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001be0:	edd7 7a00 	vldr	s15, [r7]
 8001be4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001c38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8001be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	d801      	bhi.n	8001bf6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8001bf2:	2309      	movs	r3, #9
 8001bf4:	e000      	b.n	8001bf8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001bf6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8001bf8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3320      	adds	r3, #32
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f960 	bl	8001ec8 <lsm6dsl_xl_data_rate_set>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e000      	b.n	8001c16 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	42500000 	.word	0x42500000
 8001c24:	42d00000 	.word	0x42d00000
 8001c28:	43500000 	.word	0x43500000
 8001c2c:	43d00000 	.word	0x43d00000
 8001c30:	44504000 	.word	0x44504000
 8001c34:	44cf8000 	.word	0x44cf8000
 8001c38:	45502000 	.word	0x45502000

08001c3c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001c48:	edd7 7a00 	vldr	s15, [r7]
 8001c4c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c58:	d801      	bhi.n	8001c5e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e058      	b.n	8001d10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001c5e:	edd7 7a00 	vldr	s15, [r7]
 8001c62:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	d801      	bhi.n	8001c74 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e04d      	b.n	8001d10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001c74:	edd7 7a00 	vldr	s15, [r7]
 8001c78:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001d24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	d801      	bhi.n	8001c8a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8001c86:	2303      	movs	r3, #3
 8001c88:	e042      	b.n	8001d10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001c8a:	edd7 7a00 	vldr	s15, [r7]
 8001c8e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001d28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8001c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	d801      	bhi.n	8001ca0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	e037      	b.n	8001d10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001ca0:	edd7 7a00 	vldr	s15, [r7]
 8001ca4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001d2c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8001ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	d801      	bhi.n	8001cb6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e02c      	b.n	8001d10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001cb6:	edd7 7a00 	vldr	s15, [r7]
 8001cba:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001d30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8001cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	d801      	bhi.n	8001ccc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8001cc8:	2306      	movs	r3, #6
 8001cca:	e021      	b.n	8001d10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001ccc:	edd7 7a00 	vldr	s15, [r7]
 8001cd0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001d34 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cdc:	d801      	bhi.n	8001ce2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e016      	b.n	8001d10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001ce2:	edd7 7a00 	vldr	s15, [r7]
 8001ce6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001d38 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8001cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf2:	d801      	bhi.n	8001cf8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	e00b      	b.n	8001d10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001cf8:	edd7 7a00 	vldr	s15, [r7]
 8001cfc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001d3c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	d801      	bhi.n	8001d0e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8001d0a:	2309      	movs	r3, #9
 8001d0c:	e000      	b.n	8001d10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001d0e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	42500000 	.word	0x42500000
 8001d28:	42d00000 	.word	0x42d00000
 8001d2c:	43500000 	.word	0x43500000
 8001d30:	43d00000 	.word	0x43d00000
 8001d34:	44504000 	.word	0x44504000
 8001d38:	44cf8000 	.word	0x44cf8000
 8001d3c:	45502000 	.word	0x45502000

08001d40 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	72fb      	strb	r3, [r7, #11]
 8001d50:	4613      	mov	r3, r2
 8001d52:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	695c      	ldr	r4, [r3, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	7b1b      	ldrb	r3, [r3, #12]
 8001d60:	4618      	mov	r0, r3
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	b299      	uxth	r1, r3
 8001d66:	893b      	ldrh	r3, [r7, #8]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	47a0      	blx	r4
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd90      	pop	{r4, r7, pc}

08001d76 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001d76:	b590      	push	{r4, r7, lr}
 8001d78:	b087      	sub	sp, #28
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	461a      	mov	r2, r3
 8001d82:	460b      	mov	r3, r1
 8001d84:	72fb      	strb	r3, [r7, #11]
 8001d86:	4613      	mov	r3, r2
 8001d88:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	691c      	ldr	r4, [r3, #16]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	7b1b      	ldrb	r3, [r3, #12]
 8001d96:	4618      	mov	r0, r3
 8001d98:	7afb      	ldrb	r3, [r7, #11]
 8001d9a:	b299      	uxth	r1, r3
 8001d9c:	893b      	ldrh	r3, [r7, #8]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	47a0      	blx	r4
 8001da2:	4603      	mov	r3, r0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}

08001dac <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	461a      	mov	r2, r3
 8001db8:	460b      	mov	r3, r1
 8001dba:	72fb      	strb	r3, [r7, #11]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685c      	ldr	r4, [r3, #4]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	68d8      	ldr	r0, [r3, #12]
 8001dc8:	893b      	ldrh	r3, [r7, #8]
 8001dca:	7af9      	ldrb	r1, [r7, #11]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	47a0      	blx	r4
 8001dd0:	6178      	str	r0, [r7, #20]

  return ret;
 8001dd2:	697b      	ldr	r3, [r7, #20]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd90      	pop	{r4, r7, pc}

08001ddc <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	461a      	mov	r2, r3
 8001de8:	460b      	mov	r3, r1
 8001dea:	72fb      	strb	r3, [r7, #11]
 8001dec:	4613      	mov	r3, r2
 8001dee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681c      	ldr	r4, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	68d8      	ldr	r0, [r3, #12]
 8001df8:	893b      	ldrh	r3, [r7, #8]
 8001dfa:	7af9      	ldrb	r1, [r7, #11]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	47a0      	blx	r4
 8001e00:	6178      	str	r0, [r7, #20]

  return ret;
 8001e02:	697b      	ldr	r3, [r7, #20]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd90      	pop	{r4, r7, pc}

08001e0c <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001e18:	f107 0208 	add.w	r2, r7, #8
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	2110      	movs	r1, #16
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ffc3 	bl	8001dac <lsm6dsl_read_reg>
 8001e26:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	7a3b      	ldrb	r3, [r7, #8]
 8001e38:	f362 0383 	bfi	r3, r2, #2, #2
 8001e3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001e3e:	f107 0208 	add.w	r2, r7, #8
 8001e42:	2301      	movs	r3, #1
 8001e44:	2110      	movs	r1, #16
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffc8 	bl	8001ddc <lsm6dsl_write_reg>
 8001e4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001e62:	f107 0208 	add.w	r2, r7, #8
 8001e66:	2301      	movs	r3, #1
 8001e68:	2110      	movs	r1, #16
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff9e 	bl	8001dac <lsm6dsl_read_reg>
 8001e70:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8001e72:	7a3b      	ldrb	r3, [r7, #8]
 8001e74:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d81a      	bhi.n	8001eb4 <lsm6dsl_xl_full_scale_get+0x5c>
 8001e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e84 <lsm6dsl_xl_full_scale_get+0x2c>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001e95 	.word	0x08001e95
 8001e88:	08001e9d 	.word	0x08001e9d
 8001e8c:	08001ea5 	.word	0x08001ea5
 8001e90:	08001ead 	.word	0x08001ead
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
      break;
 8001e9a:	e00f      	b.n	8001ebc <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
      break;
 8001ea2:	e00b      	b.n	8001ebc <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	701a      	strb	r2, [r3, #0]
      break;
 8001eaa:	e007      	b.n	8001ebc <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2203      	movs	r2, #3
 8001eb0:	701a      	strb	r2, [r3, #0]
      break;
 8001eb2:	e003      	b.n	8001ebc <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	701a      	strb	r2, [r3, #0]
      break;
 8001eba:	bf00      	nop
  }

  return ret;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop

08001ec8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001ed4:	f107 0208 	add.w	r2, r7, #8
 8001ed8:	2301      	movs	r3, #1
 8001eda:	2110      	movs	r1, #16
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff65 	bl	8001dac <lsm6dsl_read_reg>
 8001ee2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10f      	bne.n	8001f0a <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	7a3b      	ldrb	r3, [r7, #8]
 8001ef4:	f362 1307 	bfi	r3, r2, #4, #4
 8001ef8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001efa:	f107 0208 	add.w	r2, r7, #8
 8001efe:	2301      	movs	r3, #1
 8001f00:	2110      	movs	r1, #16
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff6a 	bl	8001ddc <lsm6dsl_write_reg>
 8001f08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001f20:	f107 0208 	add.w	r2, r7, #8
 8001f24:	2301      	movs	r3, #1
 8001f26:	2111      	movs	r1, #17
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff3f 	bl	8001dac <lsm6dsl_read_reg>
 8001f2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10f      	bne.n	8001f56 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	7a3b      	ldrb	r3, [r7, #8]
 8001f40:	f362 0343 	bfi	r3, r2, #1, #3
 8001f44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001f46:	f107 0208 	add.w	r2, r7, #8
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	2111      	movs	r1, #17
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff44 	bl	8001ddc <lsm6dsl_write_reg>
 8001f54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001f6c:	f107 0208 	add.w	r2, r7, #8
 8001f70:	2301      	movs	r3, #1
 8001f72:	2111      	movs	r1, #17
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff19 	bl	8001dac <lsm6dsl_read_reg>
 8001f7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10f      	bne.n	8001fa2 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	7a3b      	ldrb	r3, [r7, #8]
 8001f8c:	f362 1307 	bfi	r3, r2, #4, #4
 8001f90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001f92:	f107 0208 	add.w	r2, r7, #8
 8001f96:	2301      	movs	r3, #1
 8001f98:	2111      	movs	r1, #17
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ff1e 	bl	8001ddc <lsm6dsl_write_reg>
 8001fa0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001fb8:	f107 0208 	add.w	r2, r7, #8
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	2112      	movs	r1, #18
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff fef3 	bl	8001dac <lsm6dsl_read_reg>
 8001fc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	7a3b      	ldrb	r3, [r7, #8]
 8001fd8:	f362 1386 	bfi	r3, r2, #6, #1
 8001fdc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001fde:	f107 0208 	add.w	r2, r7, #8
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	2112      	movs	r1, #18
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fef8 	bl	8001ddc <lsm6dsl_write_reg>
 8001fec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8002002:	f107 020c 	add.w	r2, r7, #12
 8002006:	2306      	movs	r3, #6
 8002008:	2128      	movs	r1, #40	@ 0x28
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fece 	bl	8001dac <lsm6dsl_read_reg>
 8002010:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002012:	7b7b      	ldrb	r3, [r7, #13]
 8002014:	b21a      	sxth	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002020:	b29b      	uxth	r3, r3
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	b29b      	uxth	r3, r3
 8002026:	7b3a      	ldrb	r2, [r7, #12]
 8002028:	4413      	add	r3, r2
 800202a:	b29b      	uxth	r3, r3
 800202c:	b21a      	sxth	r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	3302      	adds	r3, #2
 8002038:	b212      	sxth	r2, r2
 800203a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	3302      	adds	r3, #2
 8002040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002044:	b29b      	uxth	r3, r3
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	b29b      	uxth	r3, r3
 800204a:	7bba      	ldrb	r2, [r7, #14]
 800204c:	4413      	add	r3, r2
 800204e:	b29a      	uxth	r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	3302      	adds	r3, #2
 8002054:	b212      	sxth	r2, r2
 8002056:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002058:	7c7a      	ldrb	r2, [r7, #17]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	3304      	adds	r3, #4
 800205e:	b212      	sxth	r2, r2
 8002060:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	3304      	adds	r3, #4
 8002066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206a:	b29b      	uxth	r3, r3
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	b29b      	uxth	r3, r3
 8002070:	7c3a      	ldrb	r2, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	b29a      	uxth	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3304      	adds	r3, #4
 800207a:	b212      	sxth	r2, r2
 800207c:	801a      	strh	r2, [r3, #0]

  return ret;
 800207e:	697b      	ldr	r3, [r7, #20]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8002092:	2301      	movs	r3, #1
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	210f      	movs	r1, #15
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fe87 	bl	8001dac <lsm6dsl_read_reg>
 800209e:	60f8      	str	r0, [r7, #12]

  return ret;
 80020a0:	68fb      	ldr	r3, [r7, #12]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80020b6:	f107 0208 	add.w	r2, r7, #8
 80020ba:	2301      	movs	r3, #1
 80020bc:	2112      	movs	r1, #18
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fe74 	bl	8001dac <lsm6dsl_read_reg>
 80020c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10f      	bne.n	80020ec <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	7a3b      	ldrb	r3, [r7, #8]
 80020d6:	f362 0382 	bfi	r3, r2, #2, #1
 80020da:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80020dc:	f107 0208 	add.w	r2, r7, #8
 80020e0:	2301      	movs	r3, #1
 80020e2:	2112      	movs	r1, #18
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff fe79 	bl	8001ddc <lsm6dsl_write_reg>
 80020ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b08a      	sub	sp, #40	@ 0x28
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002100:	f107 021c 	add.w	r2, r7, #28
 8002104:	2301      	movs	r3, #1
 8002106:	210d      	movs	r1, #13
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fe4f 	bl	8001dac <lsm6dsl_read_reg>
 800210e:	6278      	str	r0, [r7, #36]	@ 0x24

  if (ret == 0)
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	2b00      	cmp	r3, #0
 8002114:	d147      	bne.n	80021a6 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8002116:	783b      	ldrb	r3, [r7, #0]
 8002118:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800211c:	b2da      	uxtb	r2, r3
 800211e:	7f3b      	ldrb	r3, [r7, #28]
 8002120:	f362 0300 	bfi	r3, r2, #0, #1
 8002124:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8002126:	783b      	ldrb	r3, [r7, #0]
 8002128:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800212c:	b2da      	uxtb	r2, r3
 800212e:	7f3b      	ldrb	r3, [r7, #28]
 8002130:	f362 0341 	bfi	r3, r2, #1, #1
 8002134:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8002136:	783b      	ldrb	r3, [r7, #0]
 8002138:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800213c:	b2da      	uxtb	r2, r3
 800213e:	7f3b      	ldrb	r3, [r7, #28]
 8002140:	f362 0382 	bfi	r3, r2, #2, #1
 8002144:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8002146:	783b      	ldrb	r3, [r7, #0]
 8002148:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	7f3b      	ldrb	r3, [r7, #28]
 8002150:	f362 03c3 	bfi	r3, r2, #3, #1
 8002154:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8002156:	783b      	ldrb	r3, [r7, #0]
 8002158:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800215c:	b2da      	uxtb	r2, r3
 800215e:	7f3b      	ldrb	r3, [r7, #28]
 8002160:	f362 1304 	bfi	r3, r2, #4, #1
 8002164:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8002166:	783b      	ldrb	r3, [r7, #0]
 8002168:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800216c:	b2da      	uxtb	r2, r3
 800216e:	7f3b      	ldrb	r3, [r7, #28]
 8002170:	f362 1345 	bfi	r3, r2, #5, #1
 8002174:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8002176:	783b      	ldrb	r3, [r7, #0]
 8002178:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	7f3b      	ldrb	r3, [r7, #28]
 8002180:	f362 1386 	bfi	r3, r2, #6, #1
 8002184:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8002186:	783b      	ldrb	r3, [r7, #0]
 8002188:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800218c:	b2da      	uxtb	r2, r3
 800218e:	7f3b      	ldrb	r3, [r7, #28]
 8002190:	f362 13c7 	bfi	r3, r2, #7, #1
 8002194:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002196:	f107 021c 	add.w	r2, r7, #28
 800219a:	2301      	movs	r3, #1
 800219c:	210d      	movs	r1, #13
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fe1c 	bl	8001ddc <lsm6dsl_write_reg>
 80021a4:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80021ac:	f107 0218 	add.w	r2, r7, #24
 80021b0:	2301      	movs	r3, #1
 80021b2:	215e      	movs	r1, #94	@ 0x5e
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fdf9 	bl	8001dac <lsm6dsl_read_reg>
 80021ba:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80021c2:	f107 0214 	add.w	r2, r7, #20
 80021c6:	2301      	movs	r3, #1
 80021c8:	215f      	movs	r1, #95	@ 0x5f
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fdee 	bl	8001dac <lsm6dsl_read_reg>
 80021d0:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d147      	bne.n	8002268 <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	7e3b      	ldrb	r3, [r7, #24]
 80021e2:	f362 0300 	bfi	r3, r2, #0, #1
 80021e6:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 80021e8:	787b      	ldrb	r3, [r7, #1]
 80021ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	7e3b      	ldrb	r3, [r7, #24]
 80021f2:	f362 0341 	bfi	r3, r2, #1, #1
 80021f6:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 80021f8:	787b      	ldrb	r3, [r7, #1]
 80021fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	7e3b      	ldrb	r3, [r7, #24]
 8002202:	f362 0382 	bfi	r3, r2, #2, #1
 8002206:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	7e3b      	ldrb	r3, [r7, #24]
 8002212:	f362 03c3 	bfi	r3, r2, #3, #1
 8002216:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800221e:	b2da      	uxtb	r2, r3
 8002220:	7e3b      	ldrb	r3, [r7, #24]
 8002222:	f362 1304 	bfi	r3, r2, #4, #1
 8002226:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800222e:	b2da      	uxtb	r2, r3
 8002230:	7e3b      	ldrb	r3, [r7, #24]
 8002232:	f362 1345 	bfi	r3, r2, #5, #1
 8002236:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800223e:	b2da      	uxtb	r2, r3
 8002240:	7e3b      	ldrb	r3, [r7, #24]
 8002242:	f362 1386 	bfi	r3, r2, #6, #1
 8002246:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800224e:	b2da      	uxtb	r2, r3
 8002250:	7e3b      	ldrb	r3, [r7, #24]
 8002252:	f362 13c7 	bfi	r3, r2, #7, #1
 8002256:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002258:	f107 0218 	add.w	r2, r7, #24
 800225c:	2301      	movs	r3, #1
 800225e:	215e      	movs	r1, #94	@ 0x5e
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff fdbb 	bl	8001ddc <lsm6dsl_write_reg>
 8002266:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	2b00      	cmp	r3, #0
 800226c:	d107      	bne.n	800227e <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800226e:	f107 0210 	add.w	r2, r7, #16
 8002272:	2301      	movs	r3, #1
 8002274:	2113      	movs	r1, #19
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fd98 	bl	8001dac <lsm6dsl_read_reg>
 800227c:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10f      	bne.n	80022a4 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8002284:	78bb      	ldrb	r3, [r7, #2]
 8002286:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	7c3b      	ldrb	r3, [r7, #16]
 800228e:	f362 1304 	bfi	r3, r2, #4, #1
 8002292:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002294:	f107 0210 	add.w	r2, r7, #16
 8002298:	2301      	movs	r3, #1
 800229a:	2113      	movs	r1, #19
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fd9d 	bl	8001ddc <lsm6dsl_write_reg>
 80022a2:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80022aa:	f107 0220 	add.w	r2, r7, #32
 80022ae:	2301      	movs	r3, #1
 80022b0:	211a      	movs	r1, #26
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fd7a 	bl	8001dac <lsm6dsl_read_reg>
 80022b8:	6278      	str	r0, [r7, #36]	@ 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d111      	bne.n	80022e4 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 80022c0:	78bb      	ldrb	r3, [r7, #2]
 80022c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022cc:	f362 13c7 	bfi	r3, r2, #7, #1
 80022d0:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80022d4:	f107 0220 	add.w	r2, r7, #32
 80022d8:	2301      	movs	r3, #1
 80022da:	211a      	movs	r1, #26
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fd7d 	bl	8001ddc <lsm6dsl_write_reg>
 80022e2:	6278      	str	r0, [r7, #36]	@ 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d158      	bne.n	800239c <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 80022ea:	f107 020c 	add.w	r2, r7, #12
 80022ee:	2301      	movs	r3, #1
 80022f0:	2158      	movs	r1, #88	@ 0x58
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fd5a 	bl	8001dac <lsm6dsl_read_reg>
 80022f8:	6278      	str	r0, [r7, #36]	@ 0x24

    if ((val.int1_6d != 0x00U) ||
 80022fa:	787b      	ldrb	r3, [r7, #1]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d141      	bne.n	800238a <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8002306:	787b      	ldrb	r3, [r7, #1]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 800230e:	2b00      	cmp	r3, #0
 8002310:	d13b      	bne.n	800238a <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8002312:	787b      	ldrb	r3, [r7, #1]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800231a:	2b00      	cmp	r3, #0
 800231c:	d135      	bne.n	800238a <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 800231e:	787b      	ldrb	r3, [r7, #1]
 8002320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002324:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8002326:	2b00      	cmp	r3, #0
 8002328:	d12f      	bne.n	800238a <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800232a:	787b      	ldrb	r3, [r7, #1]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8002332:	2b00      	cmp	r3, #0
 8002334:	d129      	bne.n	800238a <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8002336:	787b      	ldrb	r3, [r7, #1]
 8002338:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800233c:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 800233e:	2b00      	cmp	r3, #0
 8002340:	d123      	bne.n	800238a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8002342:	7d3b      	ldrb	r3, [r7, #20]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11d      	bne.n	800238a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 800234e:	7d3b      	ldrb	r3, [r7, #20]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8002356:	2b00      	cmp	r3, #0
 8002358:	d117      	bne.n	800238a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800235a:	7d3b      	ldrb	r3, [r7, #20]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8002362:	2b00      	cmp	r3, #0
 8002364:	d111      	bne.n	800238a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002366:	7d3b      	ldrb	r3, [r7, #20]
 8002368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10b      	bne.n	800238a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002372:	7d3b      	ldrb	r3, [r7, #20]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 800237a:	2b00      	cmp	r3, #0
 800237c:	d105      	bne.n	800238a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 800237e:	7d3b      	ldrb	r3, [r7, #20]
 8002380:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002384:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 800238a:	7b3b      	ldrb	r3, [r7, #12]
 800238c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002390:	733b      	strb	r3, [r7, #12]
 8002392:	e003      	b.n	800239c <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8002394:	7b3b      	ldrb	r3, [r7, #12]
 8002396:	f36f 13c7 	bfc	r3, #7, #1
 800239a:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 80023a2:	f107 020c 	add.w	r2, r7, #12
 80023a6:	2301      	movs	r3, #1
 80023a8:	2158      	movs	r1, #88	@ 0x58
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fd16 	bl	8001ddc <lsm6dsl_write_reg>
 80023b0:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return ret;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3728      	adds	r7, #40	@ 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80023c6:	f107 0214 	add.w	r2, r7, #20
 80023ca:	2301      	movs	r3, #1
 80023cc:	210d      	movs	r1, #13
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fcec 	bl	8001dac <lsm6dsl_read_reg>
 80023d4:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f040 80c0 	bne.w	800255e <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 80023de:	7d3b      	ldrb	r3, [r7, #20]
 80023e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80023e4:	b2d9      	uxtb	r1, r3
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	7813      	ldrb	r3, [r2, #0]
 80023ea:	f361 0300 	bfi	r3, r1, #0, #1
 80023ee:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 80023f0:	7d3b      	ldrb	r3, [r7, #20]
 80023f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80023f6:	b2d9      	uxtb	r1, r3
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	7813      	ldrb	r3, [r2, #0]
 80023fc:	f361 0341 	bfi	r3, r1, #1, #1
 8002400:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8002402:	7d3b      	ldrb	r3, [r7, #20]
 8002404:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002408:	b2d9      	uxtb	r1, r3
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	7813      	ldrb	r3, [r2, #0]
 800240e:	f361 0382 	bfi	r3, r1, #2, #1
 8002412:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8002414:	7d3b      	ldrb	r3, [r7, #20]
 8002416:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800241a:	b2d9      	uxtb	r1, r3
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	7813      	ldrb	r3, [r2, #0]
 8002420:	f361 03c3 	bfi	r3, r1, #3, #1
 8002424:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8002426:	7d3b      	ldrb	r3, [r7, #20]
 8002428:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800242c:	b2d9      	uxtb	r1, r3
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	7813      	ldrb	r3, [r2, #0]
 8002432:	f361 1304 	bfi	r3, r1, #4, #1
 8002436:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8002438:	7d3b      	ldrb	r3, [r7, #20]
 800243a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800243e:	b2d9      	uxtb	r1, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	7813      	ldrb	r3, [r2, #0]
 8002444:	f361 1345 	bfi	r3, r1, #5, #1
 8002448:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 800244a:	7d3b      	ldrb	r3, [r7, #20]
 800244c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002450:	b2d9      	uxtb	r1, r3
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	7813      	ldrb	r3, [r2, #0]
 8002456:	f361 1386 	bfi	r3, r1, #6, #1
 800245a:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 800245c:	7d3b      	ldrb	r3, [r7, #20]
 800245e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002462:	b2d9      	uxtb	r1, r3
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	7813      	ldrb	r3, [r2, #0]
 8002468:	f361 13c7 	bfi	r3, r1, #7, #1
 800246c:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800246e:	f107 0210 	add.w	r2, r7, #16
 8002472:	2301      	movs	r3, #1
 8002474:	215e      	movs	r1, #94	@ 0x5e
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fc98 	bl	8001dac <lsm6dsl_read_reg>
 800247c:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d16c      	bne.n	800255e <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 8002484:	7c3b      	ldrb	r3, [r7, #16]
 8002486:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800248a:	b2d9      	uxtb	r1, r3
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	7853      	ldrb	r3, [r2, #1]
 8002490:	f361 0300 	bfi	r3, r1, #0, #1
 8002494:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 8002496:	7c3b      	ldrb	r3, [r7, #16]
 8002498:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800249c:	b2d9      	uxtb	r1, r3
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	7853      	ldrb	r3, [r2, #1]
 80024a2:	f361 0341 	bfi	r3, r1, #1, #1
 80024a6:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 80024a8:	7c3b      	ldrb	r3, [r7, #16]
 80024aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80024ae:	b2d9      	uxtb	r1, r3
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	7853      	ldrb	r3, [r2, #1]
 80024b4:	f361 0382 	bfi	r3, r1, #2, #1
 80024b8:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 80024ba:	7c3b      	ldrb	r3, [r7, #16]
 80024bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80024c0:	b2d9      	uxtb	r1, r3
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	7853      	ldrb	r3, [r2, #1]
 80024c6:	f361 03c3 	bfi	r3, r1, #3, #1
 80024ca:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 80024cc:	7c3b      	ldrb	r3, [r7, #16]
 80024ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80024d2:	b2d9      	uxtb	r1, r3
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	7853      	ldrb	r3, [r2, #1]
 80024d8:	f361 1304 	bfi	r3, r1, #4, #1
 80024dc:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 80024de:	7c3b      	ldrb	r3, [r7, #16]
 80024e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80024e4:	b2d9      	uxtb	r1, r3
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	7853      	ldrb	r3, [r2, #1]
 80024ea:	f361 1345 	bfi	r3, r1, #5, #1
 80024ee:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 80024f0:	7c3b      	ldrb	r3, [r7, #16]
 80024f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80024f6:	b2d9      	uxtb	r1, r3
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	7853      	ldrb	r3, [r2, #1]
 80024fc:	f361 1386 	bfi	r3, r1, #6, #1
 8002500:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8002502:	7c3b      	ldrb	r3, [r7, #16]
 8002504:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002508:	b2d9      	uxtb	r1, r3
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	7853      	ldrb	r3, [r2, #1]
 800250e:	f361 13c7 	bfi	r3, r1, #7, #1
 8002512:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002514:	f107 020c 	add.w	r2, r7, #12
 8002518:	2301      	movs	r3, #1
 800251a:	2113      	movs	r1, #19
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff fc45 	bl	8001dac <lsm6dsl_read_reg>
 8002522:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d119      	bne.n	800255e <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 800252a:	7b3b      	ldrb	r3, [r7, #12]
 800252c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002530:	b2d9      	uxtb	r1, r3
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	7893      	ldrb	r3, [r2, #2]
 8002536:	f361 0300 	bfi	r3, r1, #0, #1
 800253a:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800253c:	f107 0218 	add.w	r2, r7, #24
 8002540:	2301      	movs	r3, #1
 8002542:	211a      	movs	r1, #26
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fc31 	bl	8001dac <lsm6dsl_read_reg>
 800254a:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 800254c:	7e3b      	ldrb	r3, [r7, #24]
 800254e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002552:	b2d9      	uxtb	r1, r3
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	7893      	ldrb	r3, [r2, #2]
 8002558:	f361 0300 	bfi	r3, r1, #0, #1
 800255c:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 800255e:	69fb      	ldr	r3, [r7, #28]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002574:	f107 0208 	add.w	r2, r7, #8
 8002578:	2301      	movs	r3, #1
 800257a:	210a      	movs	r1, #10
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff fc15 	bl	8001dac <lsm6dsl_read_reg>
 8002582:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10f      	bne.n	80025aa <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	b2da      	uxtb	r2, r3
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	f362 0302 	bfi	r3, r2, #0, #3
 8002598:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800259a:	f107 0208 	add.w	r2, r7, #8
 800259e:	2301      	movs	r3, #1
 80025a0:	210a      	movs	r1, #10
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fc1a 	bl	8001ddc <lsm6dsl_write_reg>
 80025a8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b8:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <HAL_Init+0x40>)
 80025be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_Init+0x40>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_Init+0x40>)
 80025ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d0:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a07      	ldr	r2, [pc, #28]	@ (80025f4 <HAL_Init+0x40>)
 80025d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025dc:	2003      	movs	r0, #3
 80025de:	f000 f94f 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f000 f808 	bl	80025f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e8:	f7fe fd16 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <HAL_InitTick+0x54>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_InitTick+0x58>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4619      	mov	r1, r3
 800260a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800260e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f967 	bl	80028ea <HAL_SYSTICK_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e00e      	b.n	8002644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b0f      	cmp	r3, #15
 800262a:	d80a      	bhi.n	8002642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800262c:	2200      	movs	r2, #0
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	f000 f92f 	bl	8002896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002638:	4a06      	ldr	r2, [pc, #24]	@ (8002654 <HAL_InitTick+0x5c>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000184 	.word	0x20000184
 8002650:	2000018c 	.word	0x2000018c
 8002654:	20000188 	.word	0x20000188

08002658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800265c:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <HAL_IncTick+0x20>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_IncTick+0x24>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4413      	add	r3, r2
 8002668:	4a04      	ldr	r2, [pc, #16]	@ (800267c <HAL_IncTick+0x24>)
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	2000018c 	.word	0x2000018c
 800267c:	20000364 	.word	0x20000364

08002680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return uwTick;
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <HAL_GetTick+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000364 	.word	0x20000364

08002698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a0:	f7ff ffee 	bl	8002680 <HAL_GetTick>
 80026a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d005      	beq.n	80026be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b2:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <HAL_Delay+0x44>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026be:	bf00      	nop
 80026c0:	f7ff ffde 	bl	8002680 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d8f7      	bhi.n	80026c0 <HAL_Delay+0x28>
  {
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000018c 	.word	0x2000018c

080026e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800270c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002712:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	@ (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db0b      	blt.n	800276e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	4907      	ldr	r1, [pc, #28]	@ (800277c <__NVIC_EnableIRQ+0x38>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	@ (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	@ (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	@ 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	@ 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800284c:	d301      	bcc.n	8002852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002852:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <SysTick_Config+0x40>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285a:	210f      	movs	r1, #15
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f7ff ff8e 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <SysTick_Config+0x40>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286a:	4b04      	ldr	r3, [pc, #16]	@ (800287c <SysTick_Config+0x40>)
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff29 	bl	80026e0 <__NVIC_SetPriorityGrouping>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a8:	f7ff ff3e 	bl	8002728 <__NVIC_GetPriorityGrouping>
 80028ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff ff8e 	bl	80027d4 <NVIC_EncodePriority>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff5d 	bl	8002780 <__NVIC_SetPriority>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff31 	bl	8002744 <__NVIC_EnableIRQ>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ffa2 	bl	800283c <SysTick_Config>
 80028f8:	4603      	mov	r3, r0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	@ 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	e165      	b.n	8002bec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002920:	2201      	movs	r2, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	f040 8154 	bne.w	8002be6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d005      	beq.n	8002956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002952:	2b02      	cmp	r3, #2
 8002954:	d130      	bne.n	80029b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 0201 	and.w	r2, r3, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d017      	beq.n	80029f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d123      	bne.n	8002a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	08da      	lsrs	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3208      	adds	r2, #8
 8002a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	08da      	lsrs	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	69b9      	ldr	r1, [r7, #24]
 8002a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0203 	and.w	r2, r3, #3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80ae 	beq.w	8002be6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	4a5c      	ldr	r2, [pc, #368]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa6:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	220f      	movs	r2, #15
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4f      	ldr	r2, [pc, #316]	@ (8002c0c <HAL_GPIO_Init+0x308>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d025      	beq.n	8002b1e <HAL_GPIO_Init+0x21a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8002c10 <HAL_GPIO_Init+0x30c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01f      	beq.n	8002b1a <HAL_GPIO_Init+0x216>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4d      	ldr	r2, [pc, #308]	@ (8002c14 <HAL_GPIO_Init+0x310>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d019      	beq.n	8002b16 <HAL_GPIO_Init+0x212>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8002c18 <HAL_GPIO_Init+0x314>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_GPIO_Init+0x20e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4b      	ldr	r2, [pc, #300]	@ (8002c1c <HAL_GPIO_Init+0x318>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00d      	beq.n	8002b0e <HAL_GPIO_Init+0x20a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4a      	ldr	r2, [pc, #296]	@ (8002c20 <HAL_GPIO_Init+0x31c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d007      	beq.n	8002b0a <HAL_GPIO_Init+0x206>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a49      	ldr	r2, [pc, #292]	@ (8002c24 <HAL_GPIO_Init+0x320>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_GPIO_Init+0x202>
 8002b02:	2306      	movs	r3, #6
 8002b04:	e00c      	b.n	8002b20 <HAL_GPIO_Init+0x21c>
 8002b06:	2307      	movs	r3, #7
 8002b08:	e00a      	b.n	8002b20 <HAL_GPIO_Init+0x21c>
 8002b0a:	2305      	movs	r3, #5
 8002b0c:	e008      	b.n	8002b20 <HAL_GPIO_Init+0x21c>
 8002b0e:	2304      	movs	r3, #4
 8002b10:	e006      	b.n	8002b20 <HAL_GPIO_Init+0x21c>
 8002b12:	2303      	movs	r3, #3
 8002b14:	e004      	b.n	8002b20 <HAL_GPIO_Init+0x21c>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e002      	b.n	8002b20 <HAL_GPIO_Init+0x21c>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_GPIO_Init+0x21c>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	f002 0203 	and.w	r2, r2, #3
 8002b26:	0092      	lsls	r2, r2, #2
 8002b28:	4093      	lsls	r3, r2
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b30:	4935      	ldr	r1, [pc, #212]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	3302      	adds	r3, #2
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c28 <HAL_GPIO_Init+0x324>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b62:	4a31      	ldr	r2, [pc, #196]	@ (8002c28 <HAL_GPIO_Init+0x324>)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b68:	4b2f      	ldr	r3, [pc, #188]	@ (8002c28 <HAL_GPIO_Init+0x324>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b8c:	4a26      	ldr	r2, [pc, #152]	@ (8002c28 <HAL_GPIO_Init+0x324>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b92:	4b25      	ldr	r3, [pc, #148]	@ (8002c28 <HAL_GPIO_Init+0x324>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c28 <HAL_GPIO_Init+0x324>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <HAL_GPIO_Init+0x324>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be0:	4a11      	ldr	r2, [pc, #68]	@ (8002c28 <HAL_GPIO_Init+0x324>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3301      	adds	r3, #1
 8002bea:	61fb      	str	r3, [r7, #28]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b0f      	cmp	r3, #15
 8002bf0:	f67f ae96 	bls.w	8002920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3724      	adds	r7, #36	@ 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40013800 	.word	0x40013800
 8002c0c:	40020000 	.word	0x40020000
 8002c10:	40020400 	.word	0x40020400
 8002c14:	40020800 	.word	0x40020800
 8002c18:	40020c00 	.word	0x40020c00
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40021400 	.word	0x40021400
 8002c24:	40021800 	.word	0x40021800
 8002c28:	40013c00 	.word	0x40013c00

08002c2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	e0c7      	b.n	8002dd8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	f040 80b7 	bne.w	8002dd2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c64:	4a62      	ldr	r2, [pc, #392]	@ (8002df0 <HAL_GPIO_DeInit+0x1c4>)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c70:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a5a      	ldr	r2, [pc, #360]	@ (8002df4 <HAL_GPIO_DeInit+0x1c8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d025      	beq.n	8002cda <HAL_GPIO_DeInit+0xae>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a59      	ldr	r2, [pc, #356]	@ (8002df8 <HAL_GPIO_DeInit+0x1cc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01f      	beq.n	8002cd6 <HAL_GPIO_DeInit+0xaa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a58      	ldr	r2, [pc, #352]	@ (8002dfc <HAL_GPIO_DeInit+0x1d0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d019      	beq.n	8002cd2 <HAL_GPIO_DeInit+0xa6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a57      	ldr	r2, [pc, #348]	@ (8002e00 <HAL_GPIO_DeInit+0x1d4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_GPIO_DeInit+0xa2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a56      	ldr	r2, [pc, #344]	@ (8002e04 <HAL_GPIO_DeInit+0x1d8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00d      	beq.n	8002cca <HAL_GPIO_DeInit+0x9e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a55      	ldr	r2, [pc, #340]	@ (8002e08 <HAL_GPIO_DeInit+0x1dc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <HAL_GPIO_DeInit+0x9a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a54      	ldr	r2, [pc, #336]	@ (8002e0c <HAL_GPIO_DeInit+0x1e0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_GPIO_DeInit+0x96>
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	e00c      	b.n	8002cdc <HAL_GPIO_DeInit+0xb0>
 8002cc2:	2307      	movs	r3, #7
 8002cc4:	e00a      	b.n	8002cdc <HAL_GPIO_DeInit+0xb0>
 8002cc6:	2305      	movs	r3, #5
 8002cc8:	e008      	b.n	8002cdc <HAL_GPIO_DeInit+0xb0>
 8002cca:	2304      	movs	r3, #4
 8002ccc:	e006      	b.n	8002cdc <HAL_GPIO_DeInit+0xb0>
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e004      	b.n	8002cdc <HAL_GPIO_DeInit+0xb0>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e002      	b.n	8002cdc <HAL_GPIO_DeInit+0xb0>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_GPIO_DeInit+0xb0>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	f002 0203 	and.w	r2, r2, #3
 8002ce2:	0092      	lsls	r2, r2, #2
 8002ce4:	4093      	lsls	r3, r2
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d132      	bne.n	8002d52 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002cec:	4b48      	ldr	r3, [pc, #288]	@ (8002e10 <HAL_GPIO_DeInit+0x1e4>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	4946      	ldr	r1, [pc, #280]	@ (8002e10 <HAL_GPIO_DeInit+0x1e4>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002cfa:	4b45      	ldr	r3, [pc, #276]	@ (8002e10 <HAL_GPIO_DeInit+0x1e4>)
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	4943      	ldr	r1, [pc, #268]	@ (8002e10 <HAL_GPIO_DeInit+0x1e4>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002d08:	4b41      	ldr	r3, [pc, #260]	@ (8002e10 <HAL_GPIO_DeInit+0x1e4>)
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	493f      	ldr	r1, [pc, #252]	@ (8002e10 <HAL_GPIO_DeInit+0x1e4>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002d16:	4b3e      	ldr	r3, [pc, #248]	@ (8002e10 <HAL_GPIO_DeInit+0x1e4>)
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	493c      	ldr	r1, [pc, #240]	@ (8002e10 <HAL_GPIO_DeInit+0x1e4>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002d34:	4a2e      	ldr	r2, [pc, #184]	@ (8002df0 <HAL_GPIO_DeInit+0x1c4>)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	43da      	mvns	r2, r3
 8002d44:	482a      	ldr	r0, [pc, #168]	@ (8002df0 <HAL_GPIO_DeInit+0x1c4>)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2103      	movs	r1, #3
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	401a      	ands	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	08da      	lsrs	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3208      	adds	r2, #8
 8002d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	08d2      	lsrs	r2, r2, #3
 8002d88:	4019      	ands	r1, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3208      	adds	r2, #8
 8002d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	2101      	movs	r1, #1
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	2103      	movs	r1, #3
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	401a      	ands	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2b0f      	cmp	r3, #15
 8002ddc:	f67f af34 	bls.w	8002c48 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40013800 	.word	0x40013800
 8002df4:	40020000 	.word	0x40020000
 8002df8:	40020400 	.word	0x40020400
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40021400 	.word	0x40021400
 8002e0c:	40021800 	.word	0x40021800
 8002e10:	40013c00 	.word	0x40013c00

08002e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e30:	e003      	b.n	8002e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	041a      	lsls	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	619a      	str	r2, [r3, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e52:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e5e:	4a05      	ldr	r2, [pc, #20]	@ (8002e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe f8a4 	bl	8000fb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0cc      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b68      	ldr	r3, [pc, #416]	@ (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d90c      	bls.n	8002eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b65      	ldr	r3, [pc, #404]	@ (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b63      	ldr	r3, [pc, #396]	@ (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0b8      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d020      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ecc:	4b59      	ldr	r3, [pc, #356]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a58      	ldr	r2, [pc, #352]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee4:	4b53      	ldr	r3, [pc, #332]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a52      	ldr	r2, [pc, #328]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef0:	4b50      	ldr	r3, [pc, #320]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	494d      	ldr	r1, [pc, #308]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d044      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	4b47      	ldr	r3, [pc, #284]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d119      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e07f      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d003      	beq.n	8002f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f36:	4b3f      	ldr	r3, [pc, #252]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e06f      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f46:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e067      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f56:	4b37      	ldr	r3, [pc, #220]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 0203 	bic.w	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4934      	ldr	r1, [pc, #208]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f68:	f7ff fb8a 	bl	8002680 <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f70:	f7ff fb86 	bl	8002680 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e04f      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	4b2b      	ldr	r3, [pc, #172]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 020c 	and.w	r2, r3, #12
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d1eb      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f98:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d20c      	bcs.n	8002fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b22      	ldr	r3, [pc, #136]	@ (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b20      	ldr	r3, [pc, #128]	@ (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e032      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fcc:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4916      	ldr	r1, [pc, #88]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fea:	4b12      	ldr	r3, [pc, #72]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	490e      	ldr	r1, [pc, #56]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ffe:	f000 f855 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8003002:	4602      	mov	r2, r0
 8003004:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	490a      	ldr	r1, [pc, #40]	@ (8003038 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	5ccb      	ldrb	r3, [r1, r3]
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	4a09      	ldr	r2, [pc, #36]	@ (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800301a:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff faea 	bl	80025f8 <HAL_InitTick>

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023c00 	.word	0x40023c00
 8003034:	40023800 	.word	0x40023800
 8003038:	08005a08 	.word	0x08005a08
 800303c:	20000184 	.word	0x20000184
 8003040:	20000188 	.word	0x20000188

08003044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003048:	4b03      	ldr	r3, [pc, #12]	@ (8003058 <HAL_RCC_GetHCLKFreq+0x14>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000184 	.word	0x20000184

0800305c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003060:	f7ff fff0 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b05      	ldr	r3, [pc, #20]	@ (800307c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	0a9b      	lsrs	r3, r3, #10
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	4903      	ldr	r1, [pc, #12]	@ (8003080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40023800 	.word	0x40023800
 8003080:	08005a18 	.word	0x08005a18

08003084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003088:	f7ff ffdc 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	0b5b      	lsrs	r3, r3, #13
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4903      	ldr	r1, [pc, #12]	@ (80030a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	08005a18 	.word	0x08005a18

080030ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b0:	b0ae      	sub	sp, #184	@ 0xb8
 80030b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d2:	4bcb      	ldr	r3, [pc, #812]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x354>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	f200 8206 	bhi.w	80034ec <HAL_RCC_GetSysClockFreq+0x440>
 80030e0:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	0800311d 	.word	0x0800311d
 80030ec:	080034ed 	.word	0x080034ed
 80030f0:	080034ed 	.word	0x080034ed
 80030f4:	080034ed 	.word	0x080034ed
 80030f8:	08003125 	.word	0x08003125
 80030fc:	080034ed 	.word	0x080034ed
 8003100:	080034ed 	.word	0x080034ed
 8003104:	080034ed 	.word	0x080034ed
 8003108:	0800312d 	.word	0x0800312d
 800310c:	080034ed 	.word	0x080034ed
 8003110:	080034ed 	.word	0x080034ed
 8003114:	080034ed 	.word	0x080034ed
 8003118:	0800331d 	.word	0x0800331d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4bb9      	ldr	r3, [pc, #740]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x358>)
 800311e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003122:	e1e7      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003124:	4bb8      	ldr	r3, [pc, #736]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800312a:	e1e3      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800312c:	4bb4      	ldr	r3, [pc, #720]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x354>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003138:	4bb1      	ldr	r3, [pc, #708]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x354>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d071      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003144:	4bae      	ldr	r3, [pc, #696]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x354>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003150:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003166:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800316a:	4622      	mov	r2, r4
 800316c:	462b      	mov	r3, r5
 800316e:	f04f 0000 	mov.w	r0, #0
 8003172:	f04f 0100 	mov.w	r1, #0
 8003176:	0159      	lsls	r1, r3, #5
 8003178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800317c:	0150      	lsls	r0, r2, #5
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4621      	mov	r1, r4
 8003184:	1a51      	subs	r1, r2, r1
 8003186:	6439      	str	r1, [r7, #64]	@ 0x40
 8003188:	4629      	mov	r1, r5
 800318a:	eb63 0301 	sbc.w	r3, r3, r1
 800318e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800319c:	4649      	mov	r1, r9
 800319e:	018b      	lsls	r3, r1, #6
 80031a0:	4641      	mov	r1, r8
 80031a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031a6:	4641      	mov	r1, r8
 80031a8:	018a      	lsls	r2, r1, #6
 80031aa:	4641      	mov	r1, r8
 80031ac:	1a51      	subs	r1, r2, r1
 80031ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031b0:	4649      	mov	r1, r9
 80031b2:	eb63 0301 	sbc.w	r3, r3, r1
 80031b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80031c4:	4649      	mov	r1, r9
 80031c6:	00cb      	lsls	r3, r1, #3
 80031c8:	4641      	mov	r1, r8
 80031ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ce:	4641      	mov	r1, r8
 80031d0:	00ca      	lsls	r2, r1, #3
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	4603      	mov	r3, r0
 80031d8:	4622      	mov	r2, r4
 80031da:	189b      	adds	r3, r3, r2
 80031dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80031de:	462b      	mov	r3, r5
 80031e0:	460a      	mov	r2, r1
 80031e2:	eb42 0303 	adc.w	r3, r2, r3
 80031e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031f4:	4629      	mov	r1, r5
 80031f6:	024b      	lsls	r3, r1, #9
 80031f8:	4621      	mov	r1, r4
 80031fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031fe:	4621      	mov	r1, r4
 8003200:	024a      	lsls	r2, r1, #9
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800320a:	2200      	movs	r2, #0
 800320c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003210:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003214:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003218:	f7fd f84a 	bl	80002b0 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003226:	e067      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003228:	4b75      	ldr	r3, [pc, #468]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x354>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	2200      	movs	r2, #0
 8003230:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003234:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003238:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800323c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003240:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003242:	2300      	movs	r3, #0
 8003244:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003246:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800324a:	4622      	mov	r2, r4
 800324c:	462b      	mov	r3, r5
 800324e:	f04f 0000 	mov.w	r0, #0
 8003252:	f04f 0100 	mov.w	r1, #0
 8003256:	0159      	lsls	r1, r3, #5
 8003258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800325c:	0150      	lsls	r0, r2, #5
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4621      	mov	r1, r4
 8003264:	1a51      	subs	r1, r2, r1
 8003266:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003268:	4629      	mov	r1, r5
 800326a:	eb63 0301 	sbc.w	r3, r3, r1
 800326e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800327c:	4649      	mov	r1, r9
 800327e:	018b      	lsls	r3, r1, #6
 8003280:	4641      	mov	r1, r8
 8003282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003286:	4641      	mov	r1, r8
 8003288:	018a      	lsls	r2, r1, #6
 800328a:	4641      	mov	r1, r8
 800328c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003290:	4649      	mov	r1, r9
 8003292:	eb63 0b01 	sbc.w	fp, r3, r1
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032aa:	4692      	mov	sl, r2
 80032ac:	469b      	mov	fp, r3
 80032ae:	4623      	mov	r3, r4
 80032b0:	eb1a 0303 	adds.w	r3, sl, r3
 80032b4:	623b      	str	r3, [r7, #32]
 80032b6:	462b      	mov	r3, r5
 80032b8:	eb4b 0303 	adc.w	r3, fp, r3
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80032ca:	4629      	mov	r1, r5
 80032cc:	028b      	lsls	r3, r1, #10
 80032ce:	4621      	mov	r1, r4
 80032d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032d4:	4621      	mov	r1, r4
 80032d6:	028a      	lsls	r2, r1, #10
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032e0:	2200      	movs	r2, #0
 80032e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80032e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80032e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80032ea:	f7fc ffe1 	bl	80002b0 <__aeabi_uldivmod>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4613      	mov	r3, r2
 80032f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f8:	4b41      	ldr	r3, [pc, #260]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x354>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	3301      	adds	r3, #1
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800330a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800330e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800331a:	e0eb      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800331c:	4b38      	ldr	r3, [pc, #224]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x354>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003324:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003328:	4b35      	ldr	r3, [pc, #212]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x354>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d06b      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003334:	4b32      	ldr	r3, [pc, #200]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x354>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	099b      	lsrs	r3, r3, #6
 800333a:	2200      	movs	r2, #0
 800333c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800333e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003340:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003346:	663b      	str	r3, [r7, #96]	@ 0x60
 8003348:	2300      	movs	r3, #0
 800334a:	667b      	str	r3, [r7, #100]	@ 0x64
 800334c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003350:	4622      	mov	r2, r4
 8003352:	462b      	mov	r3, r5
 8003354:	f04f 0000 	mov.w	r0, #0
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	0159      	lsls	r1, r3, #5
 800335e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003362:	0150      	lsls	r0, r2, #5
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4621      	mov	r1, r4
 800336a:	1a51      	subs	r1, r2, r1
 800336c:	61b9      	str	r1, [r7, #24]
 800336e:	4629      	mov	r1, r5
 8003370:	eb63 0301 	sbc.w	r3, r3, r1
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003382:	4659      	mov	r1, fp
 8003384:	018b      	lsls	r3, r1, #6
 8003386:	4651      	mov	r1, sl
 8003388:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800338c:	4651      	mov	r1, sl
 800338e:	018a      	lsls	r2, r1, #6
 8003390:	4651      	mov	r1, sl
 8003392:	ebb2 0801 	subs.w	r8, r2, r1
 8003396:	4659      	mov	r1, fp
 8003398:	eb63 0901 	sbc.w	r9, r3, r1
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033b0:	4690      	mov	r8, r2
 80033b2:	4699      	mov	r9, r3
 80033b4:	4623      	mov	r3, r4
 80033b6:	eb18 0303 	adds.w	r3, r8, r3
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	462b      	mov	r3, r5
 80033be:	eb49 0303 	adc.w	r3, r9, r3
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80033d0:	4629      	mov	r1, r5
 80033d2:	024b      	lsls	r3, r1, #9
 80033d4:	4621      	mov	r1, r4
 80033d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033da:	4621      	mov	r1, r4
 80033dc:	024a      	lsls	r2, r1, #9
 80033de:	4610      	mov	r0, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033e6:	2200      	movs	r2, #0
 80033e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80033ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033f0:	f7fc ff5e 	bl	80002b0 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4613      	mov	r3, r2
 80033fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033fe:	e065      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x420>
 8003400:	40023800 	.word	0x40023800
 8003404:	00f42400 	.word	0x00f42400
 8003408:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340c:	4b3d      	ldr	r3, [pc, #244]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x458>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	099b      	lsrs	r3, r3, #6
 8003412:	2200      	movs	r2, #0
 8003414:	4618      	mov	r0, r3
 8003416:	4611      	mov	r1, r2
 8003418:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800341c:	653b      	str	r3, [r7, #80]	@ 0x50
 800341e:	2300      	movs	r3, #0
 8003420:	657b      	str	r3, [r7, #84]	@ 0x54
 8003422:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003426:	4642      	mov	r2, r8
 8003428:	464b      	mov	r3, r9
 800342a:	f04f 0000 	mov.w	r0, #0
 800342e:	f04f 0100 	mov.w	r1, #0
 8003432:	0159      	lsls	r1, r3, #5
 8003434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003438:	0150      	lsls	r0, r2, #5
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4641      	mov	r1, r8
 8003440:	1a51      	subs	r1, r2, r1
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	4649      	mov	r1, r9
 8003446:	eb63 0301 	sbc.w	r3, r3, r1
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003458:	4659      	mov	r1, fp
 800345a:	018b      	lsls	r3, r1, #6
 800345c:	4651      	mov	r1, sl
 800345e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003462:	4651      	mov	r1, sl
 8003464:	018a      	lsls	r2, r1, #6
 8003466:	4651      	mov	r1, sl
 8003468:	1a54      	subs	r4, r2, r1
 800346a:	4659      	mov	r1, fp
 800346c:	eb63 0501 	sbc.w	r5, r3, r1
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	00eb      	lsls	r3, r5, #3
 800347a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800347e:	00e2      	lsls	r2, r4, #3
 8003480:	4614      	mov	r4, r2
 8003482:	461d      	mov	r5, r3
 8003484:	4643      	mov	r3, r8
 8003486:	18e3      	adds	r3, r4, r3
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	464b      	mov	r3, r9
 800348c:	eb45 0303 	adc.w	r3, r5, r3
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800349e:	4629      	mov	r1, r5
 80034a0:	028b      	lsls	r3, r1, #10
 80034a2:	4621      	mov	r1, r4
 80034a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034a8:	4621      	mov	r1, r4
 80034aa:	028a      	lsls	r2, r1, #10
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034b4:	2200      	movs	r2, #0
 80034b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034be:	f7fc fef7 	bl	80002b0 <__aeabi_uldivmod>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4613      	mov	r3, r2
 80034c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x458>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	0f1b      	lsrs	r3, r3, #28
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80034da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034ea:	e003      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034ec:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x45c>)
 80034ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	37b8      	adds	r7, #184	@ 0xb8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	00f42400 	.word	0x00f42400

0800350c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e28d      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8083 	beq.w	8003632 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800352c:	4b94      	ldr	r3, [pc, #592]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b04      	cmp	r3, #4
 8003536:	d019      	beq.n	800356c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003538:	4b91      	ldr	r3, [pc, #580]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003540:	2b08      	cmp	r3, #8
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003544:	4b8e      	ldr	r3, [pc, #568]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003550:	d00c      	beq.n	800356c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003552:	4b8b      	ldr	r3, [pc, #556]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d112      	bne.n	8003584 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355e:	4b88      	ldr	r3, [pc, #544]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800356a:	d10b      	bne.n	8003584 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	4b84      	ldr	r3, [pc, #528]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d05b      	beq.n	8003630 <HAL_RCC_OscConfig+0x124>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d157      	bne.n	8003630 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e25a      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800358c:	d106      	bne.n	800359c <HAL_RCC_OscConfig+0x90>
 800358e:	4b7c      	ldr	r3, [pc, #496]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7b      	ldr	r2, [pc, #492]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e01d      	b.n	80035d8 <HAL_RCC_OscConfig+0xcc>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0xb4>
 80035a6:	4b76      	ldr	r3, [pc, #472]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a75      	ldr	r2, [pc, #468]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80035ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b73      	ldr	r3, [pc, #460]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a72      	ldr	r2, [pc, #456]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e00b      	b.n	80035d8 <HAL_RCC_OscConfig+0xcc>
 80035c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80035c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80035d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7ff f84e 	bl	8002680 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e8:	f7ff f84a 	bl	8002680 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	@ 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e21f      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b61      	ldr	r3, [pc, #388]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0xdc>
 8003606:	e014      	b.n	8003632 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7ff f83a 	bl	8002680 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003610:	f7ff f836 	bl	8002680 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	@ 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e20b      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	4b57      	ldr	r3, [pc, #348]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x104>
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d06f      	beq.n	800371e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800363e:	4b50      	ldr	r3, [pc, #320]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b00      	cmp	r3, #0
 8003648:	d017      	beq.n	800367a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800364a:	4b4d      	ldr	r3, [pc, #308]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003652:	2b08      	cmp	r3, #8
 8003654:	d105      	bne.n	8003662 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003656:	4b4a      	ldr	r3, [pc, #296]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003662:	4b47      	ldr	r3, [pc, #284]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d11c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800366e:	4b44      	ldr	r3, [pc, #272]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d116      	bne.n	80036a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	4b41      	ldr	r3, [pc, #260]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_RCC_OscConfig+0x186>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e1d3      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003692:	4b3b      	ldr	r3, [pc, #236]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4937      	ldr	r1, [pc, #220]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a6:	e03a      	b.n	800371e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b0:	4b34      	ldr	r3, [pc, #208]	@ (8003784 <HAL_RCC_OscConfig+0x278>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b6:	f7fe ffe3 	bl	8002680 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036be:	f7fe ffdf 	bl	8002680 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e1b4      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036dc:	4b28      	ldr	r3, [pc, #160]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4925      	ldr	r1, [pc, #148]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
 80036f0:	e015      	b.n	800371e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f2:	4b24      	ldr	r3, [pc, #144]	@ (8003784 <HAL_RCC_OscConfig+0x278>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fe ffc2 	bl	8002680 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003700:	f7fe ffbe 	bl	8002680 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e193      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	4b1b      	ldr	r3, [pc, #108]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d036      	beq.n	8003798 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003732:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <HAL_RCC_OscConfig+0x27c>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fe ffa2 	bl	8002680 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003740:	f7fe ff9e 	bl	8002680 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e173      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <HAL_RCC_OscConfig+0x274>)
 8003754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x234>
 800375e:	e01b      	b.n	8003798 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003760:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <HAL_RCC_OscConfig+0x27c>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fe ff8b 	bl	8002680 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376c:	e00e      	b.n	800378c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800376e:	f7fe ff87 	bl	8002680 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d907      	bls.n	800378c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e15c      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
 8003780:	40023800 	.word	0x40023800
 8003784:	42470000 	.word	0x42470000
 8003788:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	4b8a      	ldr	r3, [pc, #552]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 800378e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ea      	bne.n	800376e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8097 	beq.w	80038d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037aa:	4b83      	ldr	r3, [pc, #524]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	4b7f      	ldr	r3, [pc, #508]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	4a7e      	ldr	r2, [pc, #504]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c6:	4b7c      	ldr	r3, [pc, #496]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	4b79      	ldr	r3, [pc, #484]	@ (80039bc <HAL_RCC_OscConfig+0x4b0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d118      	bne.n	8003814 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e2:	4b76      	ldr	r3, [pc, #472]	@ (80039bc <HAL_RCC_OscConfig+0x4b0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a75      	ldr	r2, [pc, #468]	@ (80039bc <HAL_RCC_OscConfig+0x4b0>)
 80037e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ee:	f7fe ff47 	bl	8002680 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f6:	f7fe ff43 	bl	8002680 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e118      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	4b6c      	ldr	r3, [pc, #432]	@ (80039bc <HAL_RCC_OscConfig+0x4b0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x31e>
 800381c:	4b66      	ldr	r3, [pc, #408]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003820:	4a65      	ldr	r2, [pc, #404]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6713      	str	r3, [r2, #112]	@ 0x70
 8003828:	e01c      	b.n	8003864 <HAL_RCC_OscConfig+0x358>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b05      	cmp	r3, #5
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x340>
 8003832:	4b61      	ldr	r3, [pc, #388]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003836:	4a60      	ldr	r2, [pc, #384]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	6713      	str	r3, [r2, #112]	@ 0x70
 800383e:	4b5e      	ldr	r3, [pc, #376]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	4a5d      	ldr	r2, [pc, #372]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6713      	str	r3, [r2, #112]	@ 0x70
 800384a:	e00b      	b.n	8003864 <HAL_RCC_OscConfig+0x358>
 800384c:	4b5a      	ldr	r3, [pc, #360]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	4a59      	ldr	r2, [pc, #356]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	6713      	str	r3, [r2, #112]	@ 0x70
 8003858:	4b57      	ldr	r3, [pc, #348]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	4a56      	ldr	r2, [pc, #344]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 800385e:	f023 0304 	bic.w	r3, r3, #4
 8003862:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d015      	beq.n	8003898 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fe ff08 	bl	8002680 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7fe ff04 	bl	8002680 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0d7      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388a:	4b4b      	ldr	r3, [pc, #300]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ee      	beq.n	8003874 <HAL_RCC_OscConfig+0x368>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003898:	f7fe fef2 	bl	8002680 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a0:	f7fe feee 	bl	8002680 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0c1      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b6:	4b40      	ldr	r3, [pc, #256]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ee      	bne.n	80038a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d105      	bne.n	80038d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c8:	4b3b      	ldr	r3, [pc, #236]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	4a3a      	ldr	r2, [pc, #232]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 80038ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80ad 	beq.w	8003a38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038de:	4b36      	ldr	r3, [pc, #216]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d060      	beq.n	80039ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d145      	bne.n	800397e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	4b33      	ldr	r3, [pc, #204]	@ (80039c0 <HAL_RCC_OscConfig+0x4b4>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe fec2 	bl	8002680 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe febe 	bl	8002680 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e093      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	4b29      	ldr	r3, [pc, #164]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	019b      	lsls	r3, r3, #6
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	071b      	lsls	r3, r3, #28
 800394a:	491b      	ldr	r1, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003950:	4b1b      	ldr	r3, [pc, #108]	@ (80039c0 <HAL_RCC_OscConfig+0x4b4>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fe fe93 	bl	8002680 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395e:	f7fe fe8f 	bl	8002680 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e064      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x452>
 800397c:	e05c      	b.n	8003a38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <HAL_RCC_OscConfig+0x4b4>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe fe7c 	bl	8002680 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398c:	f7fe fe78 	bl	8002680 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e04d      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <HAL_RCC_OscConfig+0x4ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x480>
 80039aa:	e045      	b.n	8003a38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d107      	bne.n	80039c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e040      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40007000 	.word	0x40007000
 80039c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a44 <HAL_RCC_OscConfig+0x538>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d030      	beq.n	8003a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d129      	bne.n	8003a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d122      	bne.n	8003a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d119      	bne.n	8003a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d10f      	bne.n	8003a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e07b      	b.n	8003b52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d108      	bne.n	8003a74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a6a:	d009      	beq.n	8003a80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	61da      	str	r2, [r3, #28]
 8003a72:	e005      	b.n	8003a80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fd fae4 	bl	8001068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ab6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b04:	ea42 0103 	orr.w	r1, r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	f003 0104 	and.w	r1, r3, #4
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	f003 0210 	and.w	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e01a      	b.n	8003ba2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b82:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7fd fab7 	bl	80010f8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b088      	sub	sp, #32
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_SPI_Transmit+0x22>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e12d      	b.n	8003e28 <HAL_SPI_Transmit+0x27e>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bd4:	f7fe fd54 	bl	8002680 <HAL_GetTick>
 8003bd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d002      	beq.n	8003bf0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
 8003bec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bee:	e116      	b.n	8003e1e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_SPI_Transmit+0x52>
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c00:	e10d      	b.n	8003e1e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2203      	movs	r2, #3
 8003c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	88fa      	ldrh	r2, [r7, #6]
 8003c1a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c48:	d10f      	bne.n	8003c6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b40      	cmp	r3, #64	@ 0x40
 8003c76:	d007      	beq.n	8003c88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c90:	d14f      	bne.n	8003d32 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_Transmit+0xf6>
 8003c9a:	8afb      	ldrh	r3, [r7, #22]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d142      	bne.n	8003d26 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cc4:	e02f      	b.n	8003d26 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d112      	bne.n	8003cfa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd8:	881a      	ldrh	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003cf8:	e015      	b.n	8003d26 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cfa:	f7fe fcc1 	bl	8002680 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d803      	bhi.n	8003d12 <HAL_SPI_Transmit+0x168>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d10:	d102      	bne.n	8003d18 <HAL_SPI_Transmit+0x16e>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003d24:	e07b      	b.n	8003e1e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1ca      	bne.n	8003cc6 <HAL_SPI_Transmit+0x11c>
 8003d30:	e050      	b.n	8003dd4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_SPI_Transmit+0x196>
 8003d3a:	8afb      	ldrh	r3, [r7, #22]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d144      	bne.n	8003dca <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	7812      	ldrb	r2, [r2, #0]
 8003d4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d66:	e030      	b.n	8003dca <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d113      	bne.n	8003d9e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	330c      	adds	r3, #12
 8003d80:	7812      	ldrb	r2, [r2, #0]
 8003d82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d9c:	e015      	b.n	8003dca <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d9e:	f7fe fc6f 	bl	8002680 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d803      	bhi.n	8003db6 <HAL_SPI_Transmit+0x20c>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d102      	bne.n	8003dbc <HAL_SPI_Transmit+0x212>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d106      	bne.n	8003dca <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003dc8:	e029      	b.n	8003e1e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1c9      	bne.n	8003d68 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fa6f 	bl	80042bc <SPI_EndRxTxTransaction>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e003      	b.n	8003e1e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003e26:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08c      	sub	sp, #48	@ 0x30
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x26>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e198      	b.n	8004188 <HAL_SPI_TransmitReceive+0x358>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e5e:	f7fe fc0f 	bl	8002680 <HAL_GetTick>
 8003e62:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d00f      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x70>
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e86:	d107      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x68>
 8003e90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d003      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003e9e:	e16d      	b.n	800417c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_SPI_TransmitReceive+0x82>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_SPI_TransmitReceive+0x82>
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d103      	bne.n	8003eba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003eb8:	e160      	b.n	800417c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d003      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2205      	movs	r2, #5
 8003eca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	887a      	ldrh	r2, [r7, #2]
 8003ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	887a      	ldrh	r2, [r7, #2]
 8003ee4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	887a      	ldrh	r2, [r7, #2]
 8003ef6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0e:	2b40      	cmp	r3, #64	@ 0x40
 8003f10:	d007      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f2a:	d17c      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x10a>
 8003f34:	8b7b      	ldrh	r3, [r7, #26]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d16a      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	881a      	ldrh	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	1c9a      	adds	r2, r3, #2
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f5e:	e057      	b.n	8004010 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d11b      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x176>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d016      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x176>
 8003f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d113      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	1c9a      	adds	r2, r3, #2
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d119      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x1b8>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d014      	beq.n	8003fe8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc8:	b292      	uxth	r2, r2
 8003fca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd0:	1c9a      	adds	r2, r3, #2
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fe8:	f7fe fb4a 	bl	8002680 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d80b      	bhi.n	8004010 <HAL_SPI_TransmitReceive+0x1e0>
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d007      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800400e:	e0b5      	b.n	800417c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1a2      	bne.n	8003f60 <HAL_SPI_TransmitReceive+0x130>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d19d      	bne.n	8003f60 <HAL_SPI_TransmitReceive+0x130>
 8004024:	e080      	b.n	8004128 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x204>
 800402e:	8b7b      	ldrh	r3, [r7, #26]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d16f      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	7812      	ldrb	r2, [r2, #0]
 8004040:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800405a:	e05b      	b.n	8004114 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d11c      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x274>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d017      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x274>
 8004074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d114      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	7812      	ldrb	r2, [r2, #0]
 8004086:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d119      	bne.n	80040e6 <HAL_SPI_TransmitReceive+0x2b6>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d014      	beq.n	80040e6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040e2:	2301      	movs	r3, #1
 80040e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040e6:	f7fe facb 	bl	8002680 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d803      	bhi.n	80040fe <HAL_SPI_TransmitReceive+0x2ce>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d102      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x2d4>
 80040fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004100:	2b00      	cmp	r3, #0
 8004102:	d107      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004112:	e033      	b.n	800417c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d19e      	bne.n	800405c <HAL_SPI_TransmitReceive+0x22c>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d199      	bne.n	800405c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f8c5 	bl	80042bc <SPI_EndRxTxTransaction>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d006      	beq.n	8004146 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004144:	e01a      	b.n	800417c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004172:	e003      	b.n	800417c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004184:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004188:	4618      	mov	r0, r3
 800418a:	3730      	adds	r7, #48	@ 0x30
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800419e:	b2db      	uxtb	r3, r3
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041bc:	f7fe fa60 	bl	8002680 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	4413      	add	r3, r2
 80041ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041cc:	f7fe fa58 	bl	8002680 <HAL_GetTick>
 80041d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041d2:	4b39      	ldr	r3, [pc, #228]	@ (80042b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	015b      	lsls	r3, r3, #5
 80041d8:	0d1b      	lsrs	r3, r3, #20
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	fb02 f303 	mul.w	r3, r2, r3
 80041e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041e2:	e054      	b.n	800428e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d050      	beq.n	800428e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041ec:	f7fe fa48 	bl	8002680 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d902      	bls.n	8004202 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d13d      	bne.n	800427e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800421a:	d111      	bne.n	8004240 <SPI_WaitFlagStateUntilTimeout+0x94>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004224:	d004      	beq.n	8004230 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422e:	d107      	bne.n	8004240 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800423e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004248:	d10f      	bne.n	800426a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004268:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e017      	b.n	80042ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	3b01      	subs	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4013      	ands	r3, r2
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	429a      	cmp	r2, r3
 800429c:	bf0c      	ite	eq
 800429e:	2301      	moveq	r3, #1
 80042a0:	2300      	movne	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d19b      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000184 	.word	0x20000184

080042bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2201      	movs	r2, #1
 80042d0:	2102      	movs	r1, #2
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff ff6a 	bl	80041ac <SPI_WaitFlagStateUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e032      	b.n	8004354 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042ee:	4b1b      	ldr	r3, [pc, #108]	@ (800435c <SPI_EndRxTxTransaction+0xa0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004360 <SPI_EndRxTxTransaction+0xa4>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	0d5b      	lsrs	r3, r3, #21
 80042fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800430c:	d112      	bne.n	8004334 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2200      	movs	r2, #0
 8004316:	2180      	movs	r1, #128	@ 0x80
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff ff47 	bl	80041ac <SPI_WaitFlagStateUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d016      	beq.n	8004352 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e00f      	b.n	8004354 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	3b01      	subs	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434a:	2b80      	cmp	r3, #128	@ 0x80
 800434c:	d0f2      	beq.n	8004334 <SPI_EndRxTxTransaction+0x78>
 800434e:	e000      	b.n	8004352 <SPI_EndRxTxTransaction+0x96>
        break;
 8004350:	bf00      	nop
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20000184 	.word	0x20000184
 8004360:	165e9f81 	.word	0x165e9f81

08004364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e042      	b.n	80043fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fc fed2 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	@ 0x24
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f973 	bl	8004694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	@ 0x28
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b20      	cmp	r3, #32
 8004422:	d175      	bne.n	8004510 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_UART_Transmit+0x2c>
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e06e      	b.n	8004512 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2221      	movs	r2, #33	@ 0x21
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004442:	f7fe f91d 	bl	8002680 <HAL_GetTick>
 8004446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	88fa      	ldrh	r2, [r7, #6]
 800444c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	88fa      	ldrh	r2, [r7, #6]
 8004452:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800445c:	d108      	bne.n	8004470 <HAL_UART_Transmit+0x6c>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	e003      	b.n	8004478 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004478:	e02e      	b.n	80044d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2200      	movs	r2, #0
 8004482:	2180      	movs	r1, #128	@ 0x80
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f848 	bl	800451a <UART_WaitOnFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e03a      	b.n	8004512 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	3302      	adds	r3, #2
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	e007      	b.n	80044ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	3301      	adds	r3, #1
 80044c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1cb      	bne.n	800447a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2200      	movs	r2, #0
 80044ea:	2140      	movs	r1, #64	@ 0x40
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f814 	bl	800451a <UART_WaitOnFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e006      	b.n	8004512 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e000      	b.n	8004512 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b086      	sub	sp, #24
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	4613      	mov	r3, r2
 8004528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452a:	e03b      	b.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d037      	beq.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004534:	f7fe f8a4 	bl	8002680 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	6a3a      	ldr	r2, [r7, #32]
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <UART_WaitOnFlagUntilTimeout+0x30>
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e03a      	b.n	80045c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d023      	beq.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b80      	cmp	r3, #128	@ 0x80
 8004560:	d020      	beq.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b40      	cmp	r3, #64	@ 0x40
 8004566:	d01d      	beq.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b08      	cmp	r3, #8
 8004574:	d116      	bne.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f81d 	bl	80045cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2208      	movs	r2, #8
 8004596:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e00f      	b.n	80045c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d0b4      	beq.n	800452c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b095      	sub	sp, #84	@ 0x54
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e5      	bne.n	80045d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	61fb      	str	r3, [r7, #28]
   return(result);
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3314      	adds	r3, #20
 8004626:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004628:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800462a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800462e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e5      	bne.n	8004608 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	2b01      	cmp	r3, #1
 8004642:	d119      	bne.n	8004678 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	60bb      	str	r3, [r7, #8]
   return(result);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f023 0310 	bic.w	r3, r3, #16
 800465a:	647b      	str	r3, [r7, #68]	@ 0x44
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004664:	61ba      	str	r2, [r7, #24]
 8004666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6979      	ldr	r1, [r7, #20]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	613b      	str	r3, [r7, #16]
   return(result);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e5      	bne.n	8004644 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004686:	bf00      	nop
 8004688:	3754      	adds	r7, #84	@ 0x54
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004698:	b0c0      	sub	sp, #256	@ 0x100
 800469a:	af00      	add	r7, sp, #0
 800469c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b0:	68d9      	ldr	r1, [r3, #12]
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	ea40 0301 	orr.w	r3, r0, r1
 80046bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046ec:	f021 010c 	bic.w	r1, r1, #12
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046fa:	430b      	orrs	r3, r1
 80046fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470e:	6999      	ldr	r1, [r3, #24]
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	ea40 0301 	orr.w	r3, r0, r1
 800471a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b8f      	ldr	r3, [pc, #572]	@ (8004960 <UART_SetConfig+0x2cc>)
 8004724:	429a      	cmp	r2, r3
 8004726:	d005      	beq.n	8004734 <UART_SetConfig+0xa0>
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b8d      	ldr	r3, [pc, #564]	@ (8004964 <UART_SetConfig+0x2d0>)
 8004730:	429a      	cmp	r2, r3
 8004732:	d104      	bne.n	800473e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004734:	f7fe fca6 	bl	8003084 <HAL_RCC_GetPCLK2Freq>
 8004738:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800473c:	e003      	b.n	8004746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800473e:	f7fe fc8d 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 8004742:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004750:	f040 810c 	bne.w	800496c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004758:	2200      	movs	r2, #0
 800475a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800475e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004766:	4622      	mov	r2, r4
 8004768:	462b      	mov	r3, r5
 800476a:	1891      	adds	r1, r2, r2
 800476c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800476e:	415b      	adcs	r3, r3
 8004770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004776:	4621      	mov	r1, r4
 8004778:	eb12 0801 	adds.w	r8, r2, r1
 800477c:	4629      	mov	r1, r5
 800477e:	eb43 0901 	adc.w	r9, r3, r1
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800478e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004796:	4690      	mov	r8, r2
 8004798:	4699      	mov	r9, r3
 800479a:	4623      	mov	r3, r4
 800479c:	eb18 0303 	adds.w	r3, r8, r3
 80047a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047a4:	462b      	mov	r3, r5
 80047a6:	eb49 0303 	adc.w	r3, r9, r3
 80047aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047c2:	460b      	mov	r3, r1
 80047c4:	18db      	adds	r3, r3, r3
 80047c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80047c8:	4613      	mov	r3, r2
 80047ca:	eb42 0303 	adc.w	r3, r2, r3
 80047ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80047d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047d8:	f7fb fd6a 	bl	80002b0 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4b61      	ldr	r3, [pc, #388]	@ (8004968 <UART_SetConfig+0x2d4>)
 80047e2:	fba3 2302 	umull	r2, r3, r3, r2
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	011c      	lsls	r4, r3, #4
 80047ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	1891      	adds	r1, r2, r2
 8004802:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004804:	415b      	adcs	r3, r3
 8004806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800480c:	4641      	mov	r1, r8
 800480e:	eb12 0a01 	adds.w	sl, r2, r1
 8004812:	4649      	mov	r1, r9
 8004814:	eb43 0b01 	adc.w	fp, r3, r1
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800482c:	4692      	mov	sl, r2
 800482e:	469b      	mov	fp, r3
 8004830:	4643      	mov	r3, r8
 8004832:	eb1a 0303 	adds.w	r3, sl, r3
 8004836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800483a:	464b      	mov	r3, r9
 800483c:	eb4b 0303 	adc.w	r3, fp, r3
 8004840:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004850:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004858:	460b      	mov	r3, r1
 800485a:	18db      	adds	r3, r3, r3
 800485c:	643b      	str	r3, [r7, #64]	@ 0x40
 800485e:	4613      	mov	r3, r2
 8004860:	eb42 0303 	adc.w	r3, r2, r3
 8004864:	647b      	str	r3, [r7, #68]	@ 0x44
 8004866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800486a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800486e:	f7fb fd1f 	bl	80002b0 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4611      	mov	r1, r2
 8004878:	4b3b      	ldr	r3, [pc, #236]	@ (8004968 <UART_SetConfig+0x2d4>)
 800487a:	fba3 2301 	umull	r2, r3, r3, r1
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	2264      	movs	r2, #100	@ 0x64
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	1acb      	subs	r3, r1, r3
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800488e:	4b36      	ldr	r3, [pc, #216]	@ (8004968 <UART_SetConfig+0x2d4>)
 8004890:	fba3 2302 	umull	r2, r3, r3, r2
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800489c:	441c      	add	r4, r3
 800489e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80048ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	1891      	adds	r1, r2, r2
 80048b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048b8:	415b      	adcs	r3, r3
 80048ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048c0:	4641      	mov	r1, r8
 80048c2:	1851      	adds	r1, r2, r1
 80048c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80048c6:	4649      	mov	r1, r9
 80048c8:	414b      	adcs	r3, r1
 80048ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048d8:	4659      	mov	r1, fp
 80048da:	00cb      	lsls	r3, r1, #3
 80048dc:	4651      	mov	r1, sl
 80048de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048e2:	4651      	mov	r1, sl
 80048e4:	00ca      	lsls	r2, r1, #3
 80048e6:	4610      	mov	r0, r2
 80048e8:	4619      	mov	r1, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	4642      	mov	r2, r8
 80048ee:	189b      	adds	r3, r3, r2
 80048f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048f4:	464b      	mov	r3, r9
 80048f6:	460a      	mov	r2, r1
 80048f8:	eb42 0303 	adc.w	r3, r2, r3
 80048fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800490c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004914:	460b      	mov	r3, r1
 8004916:	18db      	adds	r3, r3, r3
 8004918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800491a:	4613      	mov	r3, r2
 800491c:	eb42 0303 	adc.w	r3, r2, r3
 8004920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800492a:	f7fb fcc1 	bl	80002b0 <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4b0d      	ldr	r3, [pc, #52]	@ (8004968 <UART_SetConfig+0x2d4>)
 8004934:	fba3 1302 	umull	r1, r3, r3, r2
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	2164      	movs	r1, #100	@ 0x64
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	3332      	adds	r3, #50	@ 0x32
 8004946:	4a08      	ldr	r2, [pc, #32]	@ (8004968 <UART_SetConfig+0x2d4>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	f003 0207 	and.w	r2, r3, #7
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4422      	add	r2, r4
 800495a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800495c:	e106      	b.n	8004b6c <UART_SetConfig+0x4d8>
 800495e:	bf00      	nop
 8004960:	40011000 	.word	0x40011000
 8004964:	40011400 	.word	0x40011400
 8004968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800496c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004970:	2200      	movs	r2, #0
 8004972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004976:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800497a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800497e:	4642      	mov	r2, r8
 8004980:	464b      	mov	r3, r9
 8004982:	1891      	adds	r1, r2, r2
 8004984:	6239      	str	r1, [r7, #32]
 8004986:	415b      	adcs	r3, r3
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
 800498a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800498e:	4641      	mov	r1, r8
 8004990:	1854      	adds	r4, r2, r1
 8004992:	4649      	mov	r1, r9
 8004994:	eb43 0501 	adc.w	r5, r3, r1
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	00eb      	lsls	r3, r5, #3
 80049a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049a6:	00e2      	lsls	r2, r4, #3
 80049a8:	4614      	mov	r4, r2
 80049aa:	461d      	mov	r5, r3
 80049ac:	4643      	mov	r3, r8
 80049ae:	18e3      	adds	r3, r4, r3
 80049b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049b4:	464b      	mov	r3, r9
 80049b6:	eb45 0303 	adc.w	r3, r5, r3
 80049ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049da:	4629      	mov	r1, r5
 80049dc:	008b      	lsls	r3, r1, #2
 80049de:	4621      	mov	r1, r4
 80049e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e4:	4621      	mov	r1, r4
 80049e6:	008a      	lsls	r2, r1, #2
 80049e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049ec:	f7fb fc60 	bl	80002b0 <__aeabi_uldivmod>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4b60      	ldr	r3, [pc, #384]	@ (8004b78 <UART_SetConfig+0x4e4>)
 80049f6:	fba3 2302 	umull	r2, r3, r3, r2
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	011c      	lsls	r4, r3, #4
 80049fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a10:	4642      	mov	r2, r8
 8004a12:	464b      	mov	r3, r9
 8004a14:	1891      	adds	r1, r2, r2
 8004a16:	61b9      	str	r1, [r7, #24]
 8004a18:	415b      	adcs	r3, r3
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a20:	4641      	mov	r1, r8
 8004a22:	1851      	adds	r1, r2, r1
 8004a24:	6139      	str	r1, [r7, #16]
 8004a26:	4649      	mov	r1, r9
 8004a28:	414b      	adcs	r3, r1
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a38:	4659      	mov	r1, fp
 8004a3a:	00cb      	lsls	r3, r1, #3
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a42:	4651      	mov	r1, sl
 8004a44:	00ca      	lsls	r2, r1, #3
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4642      	mov	r2, r8
 8004a4e:	189b      	adds	r3, r3, r2
 8004a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a54:	464b      	mov	r3, r9
 8004a56:	460a      	mov	r2, r1
 8004a58:	eb42 0303 	adc.w	r3, r2, r3
 8004a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a78:	4649      	mov	r1, r9
 8004a7a:	008b      	lsls	r3, r1, #2
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a82:	4641      	mov	r1, r8
 8004a84:	008a      	lsls	r2, r1, #2
 8004a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a8a:	f7fb fc11 	bl	80002b0 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4611      	mov	r1, r2
 8004a94:	4b38      	ldr	r3, [pc, #224]	@ (8004b78 <UART_SetConfig+0x4e4>)
 8004a96:	fba3 2301 	umull	r2, r3, r3, r1
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	2264      	movs	r2, #100	@ 0x64
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	1acb      	subs	r3, r1, r3
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	3332      	adds	r3, #50	@ 0x32
 8004aa8:	4a33      	ldr	r2, [pc, #204]	@ (8004b78 <UART_SetConfig+0x4e4>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ab4:	441c      	add	r4, r3
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004abe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ac0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	1891      	adds	r1, r2, r2
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	415b      	adcs	r3, r3
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	1851      	adds	r1, r2, r1
 8004ad8:	6039      	str	r1, [r7, #0]
 8004ada:	4649      	mov	r1, r9
 8004adc:	414b      	adcs	r3, r1
 8004ade:	607b      	str	r3, [r7, #4]
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aec:	4659      	mov	r1, fp
 8004aee:	00cb      	lsls	r3, r1, #3
 8004af0:	4651      	mov	r1, sl
 8004af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af6:	4651      	mov	r1, sl
 8004af8:	00ca      	lsls	r2, r1, #3
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	4642      	mov	r2, r8
 8004b02:	189b      	adds	r3, r3, r2
 8004b04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b06:	464b      	mov	r3, r9
 8004b08:	460a      	mov	r2, r1
 8004b0a:	eb42 0303 	adc.w	r3, r2, r3
 8004b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b28:	4649      	mov	r1, r9
 8004b2a:	008b      	lsls	r3, r1, #2
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b32:	4641      	mov	r1, r8
 8004b34:	008a      	lsls	r2, r1, #2
 8004b36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b3a:	f7fb fbb9 	bl	80002b0 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <UART_SetConfig+0x4e4>)
 8004b44:	fba3 1302 	umull	r1, r3, r3, r2
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2164      	movs	r1, #100	@ 0x64
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	@ 0x32
 8004b56:	4a08      	ldr	r2, [pc, #32]	@ (8004b78 <UART_SetConfig+0x4e4>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4422      	add	r2, r4
 8004b6a:	609a      	str	r2, [r3, #8]
}
 8004b6c:	bf00      	nop
 8004b6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b72:	46bd      	mov	sp, r7
 8004b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b78:	51eb851f 	.word	0x51eb851f

08004b7c <std>:
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	b510      	push	{r4, lr}
 8004b80:	4604      	mov	r4, r0
 8004b82:	e9c0 3300 	strd	r3, r3, [r0]
 8004b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b8a:	6083      	str	r3, [r0, #8]
 8004b8c:	8181      	strh	r1, [r0, #12]
 8004b8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b90:	81c2      	strh	r2, [r0, #14]
 8004b92:	6183      	str	r3, [r0, #24]
 8004b94:	4619      	mov	r1, r3
 8004b96:	2208      	movs	r2, #8
 8004b98:	305c      	adds	r0, #92	@ 0x5c
 8004b9a:	f000 f906 	bl	8004daa <memset>
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd4 <std+0x58>)
 8004ba0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd8 <std+0x5c>)
 8004ba4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bdc <std+0x60>)
 8004ba8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004baa:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <std+0x64>)
 8004bac:	6323      	str	r3, [r4, #48]	@ 0x30
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <std+0x68>)
 8004bb0:	6224      	str	r4, [r4, #32]
 8004bb2:	429c      	cmp	r4, r3
 8004bb4:	d006      	beq.n	8004bc4 <std+0x48>
 8004bb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004bba:	4294      	cmp	r4, r2
 8004bbc:	d002      	beq.n	8004bc4 <std+0x48>
 8004bbe:	33d0      	adds	r3, #208	@ 0xd0
 8004bc0:	429c      	cmp	r4, r3
 8004bc2:	d105      	bne.n	8004bd0 <std+0x54>
 8004bc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bcc:	f000 b966 	b.w	8004e9c <__retarget_lock_init_recursive>
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	bf00      	nop
 8004bd4:	08004d25 	.word	0x08004d25
 8004bd8:	08004d47 	.word	0x08004d47
 8004bdc:	08004d7f 	.word	0x08004d7f
 8004be0:	08004da3 	.word	0x08004da3
 8004be4:	20000368 	.word	0x20000368

08004be8 <stdio_exit_handler>:
 8004be8:	4a02      	ldr	r2, [pc, #8]	@ (8004bf4 <stdio_exit_handler+0xc>)
 8004bea:	4903      	ldr	r1, [pc, #12]	@ (8004bf8 <stdio_exit_handler+0x10>)
 8004bec:	4803      	ldr	r0, [pc, #12]	@ (8004bfc <stdio_exit_handler+0x14>)
 8004bee:	f000 b869 	b.w	8004cc4 <_fwalk_sglue>
 8004bf2:	bf00      	nop
 8004bf4:	20000190 	.word	0x20000190
 8004bf8:	0800573d 	.word	0x0800573d
 8004bfc:	200001a0 	.word	0x200001a0

08004c00 <cleanup_stdio>:
 8004c00:	6841      	ldr	r1, [r0, #4]
 8004c02:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <cleanup_stdio+0x34>)
 8004c04:	4299      	cmp	r1, r3
 8004c06:	b510      	push	{r4, lr}
 8004c08:	4604      	mov	r4, r0
 8004c0a:	d001      	beq.n	8004c10 <cleanup_stdio+0x10>
 8004c0c:	f000 fd96 	bl	800573c <_fflush_r>
 8004c10:	68a1      	ldr	r1, [r4, #8]
 8004c12:	4b09      	ldr	r3, [pc, #36]	@ (8004c38 <cleanup_stdio+0x38>)
 8004c14:	4299      	cmp	r1, r3
 8004c16:	d002      	beq.n	8004c1e <cleanup_stdio+0x1e>
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f000 fd8f 	bl	800573c <_fflush_r>
 8004c1e:	68e1      	ldr	r1, [r4, #12]
 8004c20:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <cleanup_stdio+0x3c>)
 8004c22:	4299      	cmp	r1, r3
 8004c24:	d004      	beq.n	8004c30 <cleanup_stdio+0x30>
 8004c26:	4620      	mov	r0, r4
 8004c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c2c:	f000 bd86 	b.w	800573c <_fflush_r>
 8004c30:	bd10      	pop	{r4, pc}
 8004c32:	bf00      	nop
 8004c34:	20000368 	.word	0x20000368
 8004c38:	200003d0 	.word	0x200003d0
 8004c3c:	20000438 	.word	0x20000438

08004c40 <global_stdio_init.part.0>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <global_stdio_init.part.0+0x30>)
 8004c44:	4c0b      	ldr	r4, [pc, #44]	@ (8004c74 <global_stdio_init.part.0+0x34>)
 8004c46:	4a0c      	ldr	r2, [pc, #48]	@ (8004c78 <global_stdio_init.part.0+0x38>)
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2104      	movs	r1, #4
 8004c50:	f7ff ff94 	bl	8004b7c <std>
 8004c54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c58:	2201      	movs	r2, #1
 8004c5a:	2109      	movs	r1, #9
 8004c5c:	f7ff ff8e 	bl	8004b7c <std>
 8004c60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c64:	2202      	movs	r2, #2
 8004c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c6a:	2112      	movs	r1, #18
 8004c6c:	f7ff bf86 	b.w	8004b7c <std>
 8004c70:	200004a0 	.word	0x200004a0
 8004c74:	20000368 	.word	0x20000368
 8004c78:	08004be9 	.word	0x08004be9

08004c7c <__sfp_lock_acquire>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	@ (8004c84 <__sfp_lock_acquire+0x8>)
 8004c7e:	f000 b90e 	b.w	8004e9e <__retarget_lock_acquire_recursive>
 8004c82:	bf00      	nop
 8004c84:	200004a9 	.word	0x200004a9

08004c88 <__sfp_lock_release>:
 8004c88:	4801      	ldr	r0, [pc, #4]	@ (8004c90 <__sfp_lock_release+0x8>)
 8004c8a:	f000 b909 	b.w	8004ea0 <__retarget_lock_release_recursive>
 8004c8e:	bf00      	nop
 8004c90:	200004a9 	.word	0x200004a9

08004c94 <__sinit>:
 8004c94:	b510      	push	{r4, lr}
 8004c96:	4604      	mov	r4, r0
 8004c98:	f7ff fff0 	bl	8004c7c <__sfp_lock_acquire>
 8004c9c:	6a23      	ldr	r3, [r4, #32]
 8004c9e:	b11b      	cbz	r3, 8004ca8 <__sinit+0x14>
 8004ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca4:	f7ff bff0 	b.w	8004c88 <__sfp_lock_release>
 8004ca8:	4b04      	ldr	r3, [pc, #16]	@ (8004cbc <__sinit+0x28>)
 8004caa:	6223      	str	r3, [r4, #32]
 8004cac:	4b04      	ldr	r3, [pc, #16]	@ (8004cc0 <__sinit+0x2c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f5      	bne.n	8004ca0 <__sinit+0xc>
 8004cb4:	f7ff ffc4 	bl	8004c40 <global_stdio_init.part.0>
 8004cb8:	e7f2      	b.n	8004ca0 <__sinit+0xc>
 8004cba:	bf00      	nop
 8004cbc:	08004c01 	.word	0x08004c01
 8004cc0:	200004a0 	.word	0x200004a0

08004cc4 <_fwalk_sglue>:
 8004cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc8:	4607      	mov	r7, r0
 8004cca:	4688      	mov	r8, r1
 8004ccc:	4614      	mov	r4, r2
 8004cce:	2600      	movs	r6, #0
 8004cd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cd4:	f1b9 0901 	subs.w	r9, r9, #1
 8004cd8:	d505      	bpl.n	8004ce6 <_fwalk_sglue+0x22>
 8004cda:	6824      	ldr	r4, [r4, #0]
 8004cdc:	2c00      	cmp	r4, #0
 8004cde:	d1f7      	bne.n	8004cd0 <_fwalk_sglue+0xc>
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce6:	89ab      	ldrh	r3, [r5, #12]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d907      	bls.n	8004cfc <_fwalk_sglue+0x38>
 8004cec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	d003      	beq.n	8004cfc <_fwalk_sglue+0x38>
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	47c0      	blx	r8
 8004cfa:	4306      	orrs	r6, r0
 8004cfc:	3568      	adds	r5, #104	@ 0x68
 8004cfe:	e7e9      	b.n	8004cd4 <_fwalk_sglue+0x10>

08004d00 <iprintf>:
 8004d00:	b40f      	push	{r0, r1, r2, r3}
 8004d02:	b507      	push	{r0, r1, r2, lr}
 8004d04:	4906      	ldr	r1, [pc, #24]	@ (8004d20 <iprintf+0x20>)
 8004d06:	ab04      	add	r3, sp, #16
 8004d08:	6808      	ldr	r0, [r1, #0]
 8004d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d0e:	6881      	ldr	r1, [r0, #8]
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	f000 f9e9 	bl	80050e8 <_vfiprintf_r>
 8004d16:	b003      	add	sp, #12
 8004d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d1c:	b004      	add	sp, #16
 8004d1e:	4770      	bx	lr
 8004d20:	2000019c 	.word	0x2000019c

08004d24 <__sread>:
 8004d24:	b510      	push	{r4, lr}
 8004d26:	460c      	mov	r4, r1
 8004d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d2c:	f000 f868 	bl	8004e00 <_read_r>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	bfab      	itete	ge
 8004d34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d36:	89a3      	ldrhlt	r3, [r4, #12]
 8004d38:	181b      	addge	r3, r3, r0
 8004d3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d3e:	bfac      	ite	ge
 8004d40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d42:	81a3      	strhlt	r3, [r4, #12]
 8004d44:	bd10      	pop	{r4, pc}

08004d46 <__swrite>:
 8004d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4a:	461f      	mov	r7, r3
 8004d4c:	898b      	ldrh	r3, [r1, #12]
 8004d4e:	05db      	lsls	r3, r3, #23
 8004d50:	4605      	mov	r5, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	4616      	mov	r6, r2
 8004d56:	d505      	bpl.n	8004d64 <__swrite+0x1e>
 8004d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f000 f83c 	bl	8004ddc <_lseek_r>
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d6e:	81a3      	strh	r3, [r4, #12]
 8004d70:	4632      	mov	r2, r6
 8004d72:	463b      	mov	r3, r7
 8004d74:	4628      	mov	r0, r5
 8004d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d7a:	f000 b853 	b.w	8004e24 <_write_r>

08004d7e <__sseek>:
 8004d7e:	b510      	push	{r4, lr}
 8004d80:	460c      	mov	r4, r1
 8004d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d86:	f000 f829 	bl	8004ddc <_lseek_r>
 8004d8a:	1c43      	adds	r3, r0, #1
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	bf15      	itete	ne
 8004d90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d9a:	81a3      	strheq	r3, [r4, #12]
 8004d9c:	bf18      	it	ne
 8004d9e:	81a3      	strhne	r3, [r4, #12]
 8004da0:	bd10      	pop	{r4, pc}

08004da2 <__sclose>:
 8004da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da6:	f000 b809 	b.w	8004dbc <_close_r>

08004daa <memset>:
 8004daa:	4402      	add	r2, r0
 8004dac:	4603      	mov	r3, r0
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d100      	bne.n	8004db4 <memset+0xa>
 8004db2:	4770      	bx	lr
 8004db4:	f803 1b01 	strb.w	r1, [r3], #1
 8004db8:	e7f9      	b.n	8004dae <memset+0x4>
	...

08004dbc <_close_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d06      	ldr	r5, [pc, #24]	@ (8004dd8 <_close_r+0x1c>)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	f7fc fba3 	bl	8001512 <_close>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_close_r+0x1a>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_close_r+0x1a>
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	200004a4 	.word	0x200004a4

08004ddc <_lseek_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4d07      	ldr	r5, [pc, #28]	@ (8004dfc <_lseek_r+0x20>)
 8004de0:	4604      	mov	r4, r0
 8004de2:	4608      	mov	r0, r1
 8004de4:	4611      	mov	r1, r2
 8004de6:	2200      	movs	r2, #0
 8004de8:	602a      	str	r2, [r5, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f7fc fbb8 	bl	8001560 <_lseek>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d102      	bne.n	8004dfa <_lseek_r+0x1e>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	b103      	cbz	r3, 8004dfa <_lseek_r+0x1e>
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	200004a4 	.word	0x200004a4

08004e00 <_read_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d07      	ldr	r5, [pc, #28]	@ (8004e20 <_read_r+0x20>)
 8004e04:	4604      	mov	r4, r0
 8004e06:	4608      	mov	r0, r1
 8004e08:	4611      	mov	r1, r2
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	602a      	str	r2, [r5, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f7fc fb62 	bl	80014d8 <_read>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_read_r+0x1e>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_read_r+0x1e>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	200004a4 	.word	0x200004a4

08004e24 <_write_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d07      	ldr	r5, [pc, #28]	@ (8004e44 <_write_r+0x20>)
 8004e28:	4604      	mov	r4, r0
 8004e2a:	4608      	mov	r0, r1
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	2200      	movs	r2, #0
 8004e30:	602a      	str	r2, [r5, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f7fc f8d4 	bl	8000fe0 <_write>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_write_r+0x1e>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_write_r+0x1e>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	200004a4 	.word	0x200004a4

08004e48 <__errno>:
 8004e48:	4b01      	ldr	r3, [pc, #4]	@ (8004e50 <__errno+0x8>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	2000019c 	.word	0x2000019c

08004e54 <__libc_init_array>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	4d0d      	ldr	r5, [pc, #52]	@ (8004e8c <__libc_init_array+0x38>)
 8004e58:	4c0d      	ldr	r4, [pc, #52]	@ (8004e90 <__libc_init_array+0x3c>)
 8004e5a:	1b64      	subs	r4, r4, r5
 8004e5c:	10a4      	asrs	r4, r4, #2
 8004e5e:	2600      	movs	r6, #0
 8004e60:	42a6      	cmp	r6, r4
 8004e62:	d109      	bne.n	8004e78 <__libc_init_array+0x24>
 8004e64:	4d0b      	ldr	r5, [pc, #44]	@ (8004e94 <__libc_init_array+0x40>)
 8004e66:	4c0c      	ldr	r4, [pc, #48]	@ (8004e98 <__libc_init_array+0x44>)
 8004e68:	f000 fdb8 	bl	80059dc <_init>
 8004e6c:	1b64      	subs	r4, r4, r5
 8004e6e:	10a4      	asrs	r4, r4, #2
 8004e70:	2600      	movs	r6, #0
 8004e72:	42a6      	cmp	r6, r4
 8004e74:	d105      	bne.n	8004e82 <__libc_init_array+0x2e>
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7c:	4798      	blx	r3
 8004e7e:	3601      	adds	r6, #1
 8004e80:	e7ee      	b.n	8004e60 <__libc_init_array+0xc>
 8004e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e86:	4798      	blx	r3
 8004e88:	3601      	adds	r6, #1
 8004e8a:	e7f2      	b.n	8004e72 <__libc_init_array+0x1e>
 8004e8c:	08005a5c 	.word	0x08005a5c
 8004e90:	08005a5c 	.word	0x08005a5c
 8004e94:	08005a5c 	.word	0x08005a5c
 8004e98:	08005a60 	.word	0x08005a60

08004e9c <__retarget_lock_init_recursive>:
 8004e9c:	4770      	bx	lr

08004e9e <__retarget_lock_acquire_recursive>:
 8004e9e:	4770      	bx	lr

08004ea0 <__retarget_lock_release_recursive>:
 8004ea0:	4770      	bx	lr
	...

08004ea4 <_free_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	d041      	beq.n	8004f30 <_free_r+0x8c>
 8004eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb0:	1f0c      	subs	r4, r1, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bfb8      	it	lt
 8004eb6:	18e4      	addlt	r4, r4, r3
 8004eb8:	f000 f8e0 	bl	800507c <__malloc_lock>
 8004ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f34 <_free_r+0x90>)
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	b933      	cbnz	r3, 8004ed0 <_free_r+0x2c>
 8004ec2:	6063      	str	r3, [r4, #4]
 8004ec4:	6014      	str	r4, [r2, #0]
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ecc:	f000 b8dc 	b.w	8005088 <__malloc_unlock>
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	d908      	bls.n	8004ee6 <_free_r+0x42>
 8004ed4:	6820      	ldr	r0, [r4, #0]
 8004ed6:	1821      	adds	r1, r4, r0
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	bf01      	itttt	eq
 8004edc:	6819      	ldreq	r1, [r3, #0]
 8004ede:	685b      	ldreq	r3, [r3, #4]
 8004ee0:	1809      	addeq	r1, r1, r0
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	e7ed      	b.n	8004ec2 <_free_r+0x1e>
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b10b      	cbz	r3, 8004ef0 <_free_r+0x4c>
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	d9fa      	bls.n	8004ee6 <_free_r+0x42>
 8004ef0:	6811      	ldr	r1, [r2, #0]
 8004ef2:	1850      	adds	r0, r2, r1
 8004ef4:	42a0      	cmp	r0, r4
 8004ef6:	d10b      	bne.n	8004f10 <_free_r+0x6c>
 8004ef8:	6820      	ldr	r0, [r4, #0]
 8004efa:	4401      	add	r1, r0
 8004efc:	1850      	adds	r0, r2, r1
 8004efe:	4283      	cmp	r3, r0
 8004f00:	6011      	str	r1, [r2, #0]
 8004f02:	d1e0      	bne.n	8004ec6 <_free_r+0x22>
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	6053      	str	r3, [r2, #4]
 8004f0a:	4408      	add	r0, r1
 8004f0c:	6010      	str	r0, [r2, #0]
 8004f0e:	e7da      	b.n	8004ec6 <_free_r+0x22>
 8004f10:	d902      	bls.n	8004f18 <_free_r+0x74>
 8004f12:	230c      	movs	r3, #12
 8004f14:	602b      	str	r3, [r5, #0]
 8004f16:	e7d6      	b.n	8004ec6 <_free_r+0x22>
 8004f18:	6820      	ldr	r0, [r4, #0]
 8004f1a:	1821      	adds	r1, r4, r0
 8004f1c:	428b      	cmp	r3, r1
 8004f1e:	bf04      	itt	eq
 8004f20:	6819      	ldreq	r1, [r3, #0]
 8004f22:	685b      	ldreq	r3, [r3, #4]
 8004f24:	6063      	str	r3, [r4, #4]
 8004f26:	bf04      	itt	eq
 8004f28:	1809      	addeq	r1, r1, r0
 8004f2a:	6021      	streq	r1, [r4, #0]
 8004f2c:	6054      	str	r4, [r2, #4]
 8004f2e:	e7ca      	b.n	8004ec6 <_free_r+0x22>
 8004f30:	bd38      	pop	{r3, r4, r5, pc}
 8004f32:	bf00      	nop
 8004f34:	200004b0 	.word	0x200004b0

08004f38 <sbrk_aligned>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4e0f      	ldr	r6, [pc, #60]	@ (8004f78 <sbrk_aligned+0x40>)
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	6831      	ldr	r1, [r6, #0]
 8004f40:	4605      	mov	r5, r0
 8004f42:	b911      	cbnz	r1, 8004f4a <sbrk_aligned+0x12>
 8004f44:	f000 fcb6 	bl	80058b4 <_sbrk_r>
 8004f48:	6030      	str	r0, [r6, #0]
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f000 fcb1 	bl	80058b4 <_sbrk_r>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	d103      	bne.n	8004f5e <sbrk_aligned+0x26>
 8004f56:	f04f 34ff 	mov.w	r4, #4294967295
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	bd70      	pop	{r4, r5, r6, pc}
 8004f5e:	1cc4      	adds	r4, r0, #3
 8004f60:	f024 0403 	bic.w	r4, r4, #3
 8004f64:	42a0      	cmp	r0, r4
 8004f66:	d0f8      	beq.n	8004f5a <sbrk_aligned+0x22>
 8004f68:	1a21      	subs	r1, r4, r0
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 fca2 	bl	80058b4 <_sbrk_r>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d1f2      	bne.n	8004f5a <sbrk_aligned+0x22>
 8004f74:	e7ef      	b.n	8004f56 <sbrk_aligned+0x1e>
 8004f76:	bf00      	nop
 8004f78:	200004ac 	.word	0x200004ac

08004f7c <_malloc_r>:
 8004f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f80:	1ccd      	adds	r5, r1, #3
 8004f82:	f025 0503 	bic.w	r5, r5, #3
 8004f86:	3508      	adds	r5, #8
 8004f88:	2d0c      	cmp	r5, #12
 8004f8a:	bf38      	it	cc
 8004f8c:	250c      	movcc	r5, #12
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	4606      	mov	r6, r0
 8004f92:	db01      	blt.n	8004f98 <_malloc_r+0x1c>
 8004f94:	42a9      	cmp	r1, r5
 8004f96:	d904      	bls.n	8004fa2 <_malloc_r+0x26>
 8004f98:	230c      	movs	r3, #12
 8004f9a:	6033      	str	r3, [r6, #0]
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005078 <_malloc_r+0xfc>
 8004fa6:	f000 f869 	bl	800507c <__malloc_lock>
 8004faa:	f8d8 3000 	ldr.w	r3, [r8]
 8004fae:	461c      	mov	r4, r3
 8004fb0:	bb44      	cbnz	r4, 8005004 <_malloc_r+0x88>
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7ff ffbf 	bl	8004f38 <sbrk_aligned>
 8004fba:	1c43      	adds	r3, r0, #1
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	d158      	bne.n	8005072 <_malloc_r+0xf6>
 8004fc0:	f8d8 4000 	ldr.w	r4, [r8]
 8004fc4:	4627      	mov	r7, r4
 8004fc6:	2f00      	cmp	r7, #0
 8004fc8:	d143      	bne.n	8005052 <_malloc_r+0xd6>
 8004fca:	2c00      	cmp	r4, #0
 8004fcc:	d04b      	beq.n	8005066 <_malloc_r+0xea>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	4639      	mov	r1, r7
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	eb04 0903 	add.w	r9, r4, r3
 8004fd8:	f000 fc6c 	bl	80058b4 <_sbrk_r>
 8004fdc:	4581      	cmp	r9, r0
 8004fde:	d142      	bne.n	8005066 <_malloc_r+0xea>
 8004fe0:	6821      	ldr	r1, [r4, #0]
 8004fe2:	1a6d      	subs	r5, r5, r1
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f7ff ffa6 	bl	8004f38 <sbrk_aligned>
 8004fec:	3001      	adds	r0, #1
 8004fee:	d03a      	beq.n	8005066 <_malloc_r+0xea>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	442b      	add	r3, r5
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	bb62      	cbnz	r2, 8005058 <_malloc_r+0xdc>
 8004ffe:	f8c8 7000 	str.w	r7, [r8]
 8005002:	e00f      	b.n	8005024 <_malloc_r+0xa8>
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	1b52      	subs	r2, r2, r5
 8005008:	d420      	bmi.n	800504c <_malloc_r+0xd0>
 800500a:	2a0b      	cmp	r2, #11
 800500c:	d917      	bls.n	800503e <_malloc_r+0xc2>
 800500e:	1961      	adds	r1, r4, r5
 8005010:	42a3      	cmp	r3, r4
 8005012:	6025      	str	r5, [r4, #0]
 8005014:	bf18      	it	ne
 8005016:	6059      	strne	r1, [r3, #4]
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	bf08      	it	eq
 800501c:	f8c8 1000 	streq.w	r1, [r8]
 8005020:	5162      	str	r2, [r4, r5]
 8005022:	604b      	str	r3, [r1, #4]
 8005024:	4630      	mov	r0, r6
 8005026:	f000 f82f 	bl	8005088 <__malloc_unlock>
 800502a:	f104 000b 	add.w	r0, r4, #11
 800502e:	1d23      	adds	r3, r4, #4
 8005030:	f020 0007 	bic.w	r0, r0, #7
 8005034:	1ac2      	subs	r2, r0, r3
 8005036:	bf1c      	itt	ne
 8005038:	1a1b      	subne	r3, r3, r0
 800503a:	50a3      	strne	r3, [r4, r2]
 800503c:	e7af      	b.n	8004f9e <_malloc_r+0x22>
 800503e:	6862      	ldr	r2, [r4, #4]
 8005040:	42a3      	cmp	r3, r4
 8005042:	bf0c      	ite	eq
 8005044:	f8c8 2000 	streq.w	r2, [r8]
 8005048:	605a      	strne	r2, [r3, #4]
 800504a:	e7eb      	b.n	8005024 <_malloc_r+0xa8>
 800504c:	4623      	mov	r3, r4
 800504e:	6864      	ldr	r4, [r4, #4]
 8005050:	e7ae      	b.n	8004fb0 <_malloc_r+0x34>
 8005052:	463c      	mov	r4, r7
 8005054:	687f      	ldr	r7, [r7, #4]
 8005056:	e7b6      	b.n	8004fc6 <_malloc_r+0x4a>
 8005058:	461a      	mov	r2, r3
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	42a3      	cmp	r3, r4
 800505e:	d1fb      	bne.n	8005058 <_malloc_r+0xdc>
 8005060:	2300      	movs	r3, #0
 8005062:	6053      	str	r3, [r2, #4]
 8005064:	e7de      	b.n	8005024 <_malloc_r+0xa8>
 8005066:	230c      	movs	r3, #12
 8005068:	6033      	str	r3, [r6, #0]
 800506a:	4630      	mov	r0, r6
 800506c:	f000 f80c 	bl	8005088 <__malloc_unlock>
 8005070:	e794      	b.n	8004f9c <_malloc_r+0x20>
 8005072:	6005      	str	r5, [r0, #0]
 8005074:	e7d6      	b.n	8005024 <_malloc_r+0xa8>
 8005076:	bf00      	nop
 8005078:	200004b0 	.word	0x200004b0

0800507c <__malloc_lock>:
 800507c:	4801      	ldr	r0, [pc, #4]	@ (8005084 <__malloc_lock+0x8>)
 800507e:	f7ff bf0e 	b.w	8004e9e <__retarget_lock_acquire_recursive>
 8005082:	bf00      	nop
 8005084:	200004a8 	.word	0x200004a8

08005088 <__malloc_unlock>:
 8005088:	4801      	ldr	r0, [pc, #4]	@ (8005090 <__malloc_unlock+0x8>)
 800508a:	f7ff bf09 	b.w	8004ea0 <__retarget_lock_release_recursive>
 800508e:	bf00      	nop
 8005090:	200004a8 	.word	0x200004a8

08005094 <__sfputc_r>:
 8005094:	6893      	ldr	r3, [r2, #8]
 8005096:	3b01      	subs	r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	b410      	push	{r4}
 800509c:	6093      	str	r3, [r2, #8]
 800509e:	da08      	bge.n	80050b2 <__sfputc_r+0x1e>
 80050a0:	6994      	ldr	r4, [r2, #24]
 80050a2:	42a3      	cmp	r3, r4
 80050a4:	db01      	blt.n	80050aa <__sfputc_r+0x16>
 80050a6:	290a      	cmp	r1, #10
 80050a8:	d103      	bne.n	80050b2 <__sfputc_r+0x1e>
 80050aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ae:	f000 bb6d 	b.w	800578c <__swbuf_r>
 80050b2:	6813      	ldr	r3, [r2, #0]
 80050b4:	1c58      	adds	r0, r3, #1
 80050b6:	6010      	str	r0, [r2, #0]
 80050b8:	7019      	strb	r1, [r3, #0]
 80050ba:	4608      	mov	r0, r1
 80050bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <__sfputs_r>:
 80050c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c4:	4606      	mov	r6, r0
 80050c6:	460f      	mov	r7, r1
 80050c8:	4614      	mov	r4, r2
 80050ca:	18d5      	adds	r5, r2, r3
 80050cc:	42ac      	cmp	r4, r5
 80050ce:	d101      	bne.n	80050d4 <__sfputs_r+0x12>
 80050d0:	2000      	movs	r0, #0
 80050d2:	e007      	b.n	80050e4 <__sfputs_r+0x22>
 80050d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d8:	463a      	mov	r2, r7
 80050da:	4630      	mov	r0, r6
 80050dc:	f7ff ffda 	bl	8005094 <__sfputc_r>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d1f3      	bne.n	80050cc <__sfputs_r+0xa>
 80050e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050e8 <_vfiprintf_r>:
 80050e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	460d      	mov	r5, r1
 80050ee:	b09d      	sub	sp, #116	@ 0x74
 80050f0:	4614      	mov	r4, r2
 80050f2:	4698      	mov	r8, r3
 80050f4:	4606      	mov	r6, r0
 80050f6:	b118      	cbz	r0, 8005100 <_vfiprintf_r+0x18>
 80050f8:	6a03      	ldr	r3, [r0, #32]
 80050fa:	b90b      	cbnz	r3, 8005100 <_vfiprintf_r+0x18>
 80050fc:	f7ff fdca 	bl	8004c94 <__sinit>
 8005100:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005102:	07d9      	lsls	r1, r3, #31
 8005104:	d405      	bmi.n	8005112 <_vfiprintf_r+0x2a>
 8005106:	89ab      	ldrh	r3, [r5, #12]
 8005108:	059a      	lsls	r2, r3, #22
 800510a:	d402      	bmi.n	8005112 <_vfiprintf_r+0x2a>
 800510c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800510e:	f7ff fec6 	bl	8004e9e <__retarget_lock_acquire_recursive>
 8005112:	89ab      	ldrh	r3, [r5, #12]
 8005114:	071b      	lsls	r3, r3, #28
 8005116:	d501      	bpl.n	800511c <_vfiprintf_r+0x34>
 8005118:	692b      	ldr	r3, [r5, #16]
 800511a:	b99b      	cbnz	r3, 8005144 <_vfiprintf_r+0x5c>
 800511c:	4629      	mov	r1, r5
 800511e:	4630      	mov	r0, r6
 8005120:	f000 fb72 	bl	8005808 <__swsetup_r>
 8005124:	b170      	cbz	r0, 8005144 <_vfiprintf_r+0x5c>
 8005126:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005128:	07dc      	lsls	r4, r3, #31
 800512a:	d504      	bpl.n	8005136 <_vfiprintf_r+0x4e>
 800512c:	f04f 30ff 	mov.w	r0, #4294967295
 8005130:	b01d      	add	sp, #116	@ 0x74
 8005132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005136:	89ab      	ldrh	r3, [r5, #12]
 8005138:	0598      	lsls	r0, r3, #22
 800513a:	d4f7      	bmi.n	800512c <_vfiprintf_r+0x44>
 800513c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800513e:	f7ff feaf 	bl	8004ea0 <__retarget_lock_release_recursive>
 8005142:	e7f3      	b.n	800512c <_vfiprintf_r+0x44>
 8005144:	2300      	movs	r3, #0
 8005146:	9309      	str	r3, [sp, #36]	@ 0x24
 8005148:	2320      	movs	r3, #32
 800514a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800514e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005152:	2330      	movs	r3, #48	@ 0x30
 8005154:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005304 <_vfiprintf_r+0x21c>
 8005158:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800515c:	f04f 0901 	mov.w	r9, #1
 8005160:	4623      	mov	r3, r4
 8005162:	469a      	mov	sl, r3
 8005164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005168:	b10a      	cbz	r2, 800516e <_vfiprintf_r+0x86>
 800516a:	2a25      	cmp	r2, #37	@ 0x25
 800516c:	d1f9      	bne.n	8005162 <_vfiprintf_r+0x7a>
 800516e:	ebba 0b04 	subs.w	fp, sl, r4
 8005172:	d00b      	beq.n	800518c <_vfiprintf_r+0xa4>
 8005174:	465b      	mov	r3, fp
 8005176:	4622      	mov	r2, r4
 8005178:	4629      	mov	r1, r5
 800517a:	4630      	mov	r0, r6
 800517c:	f7ff ffa1 	bl	80050c2 <__sfputs_r>
 8005180:	3001      	adds	r0, #1
 8005182:	f000 80a7 	beq.w	80052d4 <_vfiprintf_r+0x1ec>
 8005186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005188:	445a      	add	r2, fp
 800518a:	9209      	str	r2, [sp, #36]	@ 0x24
 800518c:	f89a 3000 	ldrb.w	r3, [sl]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 809f 	beq.w	80052d4 <_vfiprintf_r+0x1ec>
 8005196:	2300      	movs	r3, #0
 8005198:	f04f 32ff 	mov.w	r2, #4294967295
 800519c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051a0:	f10a 0a01 	add.w	sl, sl, #1
 80051a4:	9304      	str	r3, [sp, #16]
 80051a6:	9307      	str	r3, [sp, #28]
 80051a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80051ae:	4654      	mov	r4, sl
 80051b0:	2205      	movs	r2, #5
 80051b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b6:	4853      	ldr	r0, [pc, #332]	@ (8005304 <_vfiprintf_r+0x21c>)
 80051b8:	f7fb f82a 	bl	8000210 <memchr>
 80051bc:	9a04      	ldr	r2, [sp, #16]
 80051be:	b9d8      	cbnz	r0, 80051f8 <_vfiprintf_r+0x110>
 80051c0:	06d1      	lsls	r1, r2, #27
 80051c2:	bf44      	itt	mi
 80051c4:	2320      	movmi	r3, #32
 80051c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051ca:	0713      	lsls	r3, r2, #28
 80051cc:	bf44      	itt	mi
 80051ce:	232b      	movmi	r3, #43	@ 0x2b
 80051d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051d4:	f89a 3000 	ldrb.w	r3, [sl]
 80051d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80051da:	d015      	beq.n	8005208 <_vfiprintf_r+0x120>
 80051dc:	9a07      	ldr	r2, [sp, #28]
 80051de:	4654      	mov	r4, sl
 80051e0:	2000      	movs	r0, #0
 80051e2:	f04f 0c0a 	mov.w	ip, #10
 80051e6:	4621      	mov	r1, r4
 80051e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ec:	3b30      	subs	r3, #48	@ 0x30
 80051ee:	2b09      	cmp	r3, #9
 80051f0:	d94b      	bls.n	800528a <_vfiprintf_r+0x1a2>
 80051f2:	b1b0      	cbz	r0, 8005222 <_vfiprintf_r+0x13a>
 80051f4:	9207      	str	r2, [sp, #28]
 80051f6:	e014      	b.n	8005222 <_vfiprintf_r+0x13a>
 80051f8:	eba0 0308 	sub.w	r3, r0, r8
 80051fc:	fa09 f303 	lsl.w	r3, r9, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	9304      	str	r3, [sp, #16]
 8005204:	46a2      	mov	sl, r4
 8005206:	e7d2      	b.n	80051ae <_vfiprintf_r+0xc6>
 8005208:	9b03      	ldr	r3, [sp, #12]
 800520a:	1d19      	adds	r1, r3, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	9103      	str	r1, [sp, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	bfbb      	ittet	lt
 8005214:	425b      	neglt	r3, r3
 8005216:	f042 0202 	orrlt.w	r2, r2, #2
 800521a:	9307      	strge	r3, [sp, #28]
 800521c:	9307      	strlt	r3, [sp, #28]
 800521e:	bfb8      	it	lt
 8005220:	9204      	strlt	r2, [sp, #16]
 8005222:	7823      	ldrb	r3, [r4, #0]
 8005224:	2b2e      	cmp	r3, #46	@ 0x2e
 8005226:	d10a      	bne.n	800523e <_vfiprintf_r+0x156>
 8005228:	7863      	ldrb	r3, [r4, #1]
 800522a:	2b2a      	cmp	r3, #42	@ 0x2a
 800522c:	d132      	bne.n	8005294 <_vfiprintf_r+0x1ac>
 800522e:	9b03      	ldr	r3, [sp, #12]
 8005230:	1d1a      	adds	r2, r3, #4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	9203      	str	r2, [sp, #12]
 8005236:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800523a:	3402      	adds	r4, #2
 800523c:	9305      	str	r3, [sp, #20]
 800523e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005314 <_vfiprintf_r+0x22c>
 8005242:	7821      	ldrb	r1, [r4, #0]
 8005244:	2203      	movs	r2, #3
 8005246:	4650      	mov	r0, sl
 8005248:	f7fa ffe2 	bl	8000210 <memchr>
 800524c:	b138      	cbz	r0, 800525e <_vfiprintf_r+0x176>
 800524e:	9b04      	ldr	r3, [sp, #16]
 8005250:	eba0 000a 	sub.w	r0, r0, sl
 8005254:	2240      	movs	r2, #64	@ 0x40
 8005256:	4082      	lsls	r2, r0
 8005258:	4313      	orrs	r3, r2
 800525a:	3401      	adds	r4, #1
 800525c:	9304      	str	r3, [sp, #16]
 800525e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005262:	4829      	ldr	r0, [pc, #164]	@ (8005308 <_vfiprintf_r+0x220>)
 8005264:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005268:	2206      	movs	r2, #6
 800526a:	f7fa ffd1 	bl	8000210 <memchr>
 800526e:	2800      	cmp	r0, #0
 8005270:	d03f      	beq.n	80052f2 <_vfiprintf_r+0x20a>
 8005272:	4b26      	ldr	r3, [pc, #152]	@ (800530c <_vfiprintf_r+0x224>)
 8005274:	bb1b      	cbnz	r3, 80052be <_vfiprintf_r+0x1d6>
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	3307      	adds	r3, #7
 800527a:	f023 0307 	bic.w	r3, r3, #7
 800527e:	3308      	adds	r3, #8
 8005280:	9303      	str	r3, [sp, #12]
 8005282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005284:	443b      	add	r3, r7
 8005286:	9309      	str	r3, [sp, #36]	@ 0x24
 8005288:	e76a      	b.n	8005160 <_vfiprintf_r+0x78>
 800528a:	fb0c 3202 	mla	r2, ip, r2, r3
 800528e:	460c      	mov	r4, r1
 8005290:	2001      	movs	r0, #1
 8005292:	e7a8      	b.n	80051e6 <_vfiprintf_r+0xfe>
 8005294:	2300      	movs	r3, #0
 8005296:	3401      	adds	r4, #1
 8005298:	9305      	str	r3, [sp, #20]
 800529a:	4619      	mov	r1, r3
 800529c:	f04f 0c0a 	mov.w	ip, #10
 80052a0:	4620      	mov	r0, r4
 80052a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052a6:	3a30      	subs	r2, #48	@ 0x30
 80052a8:	2a09      	cmp	r2, #9
 80052aa:	d903      	bls.n	80052b4 <_vfiprintf_r+0x1cc>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0c6      	beq.n	800523e <_vfiprintf_r+0x156>
 80052b0:	9105      	str	r1, [sp, #20]
 80052b2:	e7c4      	b.n	800523e <_vfiprintf_r+0x156>
 80052b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80052b8:	4604      	mov	r4, r0
 80052ba:	2301      	movs	r3, #1
 80052bc:	e7f0      	b.n	80052a0 <_vfiprintf_r+0x1b8>
 80052be:	ab03      	add	r3, sp, #12
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	462a      	mov	r2, r5
 80052c4:	4b12      	ldr	r3, [pc, #72]	@ (8005310 <_vfiprintf_r+0x228>)
 80052c6:	a904      	add	r1, sp, #16
 80052c8:	4630      	mov	r0, r6
 80052ca:	f3af 8000 	nop.w
 80052ce:	4607      	mov	r7, r0
 80052d0:	1c78      	adds	r0, r7, #1
 80052d2:	d1d6      	bne.n	8005282 <_vfiprintf_r+0x19a>
 80052d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052d6:	07d9      	lsls	r1, r3, #31
 80052d8:	d405      	bmi.n	80052e6 <_vfiprintf_r+0x1fe>
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	059a      	lsls	r2, r3, #22
 80052de:	d402      	bmi.n	80052e6 <_vfiprintf_r+0x1fe>
 80052e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052e2:	f7ff fddd 	bl	8004ea0 <__retarget_lock_release_recursive>
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	065b      	lsls	r3, r3, #25
 80052ea:	f53f af1f 	bmi.w	800512c <_vfiprintf_r+0x44>
 80052ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052f0:	e71e      	b.n	8005130 <_vfiprintf_r+0x48>
 80052f2:	ab03      	add	r3, sp, #12
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	462a      	mov	r2, r5
 80052f8:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <_vfiprintf_r+0x228>)
 80052fa:	a904      	add	r1, sp, #16
 80052fc:	4630      	mov	r0, r6
 80052fe:	f000 f879 	bl	80053f4 <_printf_i>
 8005302:	e7e4      	b.n	80052ce <_vfiprintf_r+0x1e6>
 8005304:	08005a20 	.word	0x08005a20
 8005308:	08005a2a 	.word	0x08005a2a
 800530c:	00000000 	.word	0x00000000
 8005310:	080050c3 	.word	0x080050c3
 8005314:	08005a26 	.word	0x08005a26

08005318 <_printf_common>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	4616      	mov	r6, r2
 800531e:	4698      	mov	r8, r3
 8005320:	688a      	ldr	r2, [r1, #8]
 8005322:	690b      	ldr	r3, [r1, #16]
 8005324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005328:	4293      	cmp	r3, r2
 800532a:	bfb8      	it	lt
 800532c:	4613      	movlt	r3, r2
 800532e:	6033      	str	r3, [r6, #0]
 8005330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005334:	4607      	mov	r7, r0
 8005336:	460c      	mov	r4, r1
 8005338:	b10a      	cbz	r2, 800533e <_printf_common+0x26>
 800533a:	3301      	adds	r3, #1
 800533c:	6033      	str	r3, [r6, #0]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	0699      	lsls	r1, r3, #26
 8005342:	bf42      	ittt	mi
 8005344:	6833      	ldrmi	r3, [r6, #0]
 8005346:	3302      	addmi	r3, #2
 8005348:	6033      	strmi	r3, [r6, #0]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	f015 0506 	ands.w	r5, r5, #6
 8005350:	d106      	bne.n	8005360 <_printf_common+0x48>
 8005352:	f104 0a19 	add.w	sl, r4, #25
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	6832      	ldr	r2, [r6, #0]
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	42ab      	cmp	r3, r5
 800535e:	dc26      	bgt.n	80053ae <_printf_common+0x96>
 8005360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	3b00      	subs	r3, #0
 8005368:	bf18      	it	ne
 800536a:	2301      	movne	r3, #1
 800536c:	0692      	lsls	r2, r2, #26
 800536e:	d42b      	bmi.n	80053c8 <_printf_common+0xb0>
 8005370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005374:	4641      	mov	r1, r8
 8005376:	4638      	mov	r0, r7
 8005378:	47c8      	blx	r9
 800537a:	3001      	adds	r0, #1
 800537c:	d01e      	beq.n	80053bc <_printf_common+0xa4>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	6922      	ldr	r2, [r4, #16]
 8005382:	f003 0306 	and.w	r3, r3, #6
 8005386:	2b04      	cmp	r3, #4
 8005388:	bf02      	ittt	eq
 800538a:	68e5      	ldreq	r5, [r4, #12]
 800538c:	6833      	ldreq	r3, [r6, #0]
 800538e:	1aed      	subeq	r5, r5, r3
 8005390:	68a3      	ldr	r3, [r4, #8]
 8005392:	bf0c      	ite	eq
 8005394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005398:	2500      	movne	r5, #0
 800539a:	4293      	cmp	r3, r2
 800539c:	bfc4      	itt	gt
 800539e:	1a9b      	subgt	r3, r3, r2
 80053a0:	18ed      	addgt	r5, r5, r3
 80053a2:	2600      	movs	r6, #0
 80053a4:	341a      	adds	r4, #26
 80053a6:	42b5      	cmp	r5, r6
 80053a8:	d11a      	bne.n	80053e0 <_printf_common+0xc8>
 80053aa:	2000      	movs	r0, #0
 80053ac:	e008      	b.n	80053c0 <_printf_common+0xa8>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4652      	mov	r2, sl
 80053b2:	4641      	mov	r1, r8
 80053b4:	4638      	mov	r0, r7
 80053b6:	47c8      	blx	r9
 80053b8:	3001      	adds	r0, #1
 80053ba:	d103      	bne.n	80053c4 <_printf_common+0xac>
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295
 80053c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c4:	3501      	adds	r5, #1
 80053c6:	e7c6      	b.n	8005356 <_printf_common+0x3e>
 80053c8:	18e1      	adds	r1, r4, r3
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	2030      	movs	r0, #48	@ 0x30
 80053ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053d2:	4422      	add	r2, r4
 80053d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053dc:	3302      	adds	r3, #2
 80053de:	e7c7      	b.n	8005370 <_printf_common+0x58>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4622      	mov	r2, r4
 80053e4:	4641      	mov	r1, r8
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c8      	blx	r9
 80053ea:	3001      	adds	r0, #1
 80053ec:	d0e6      	beq.n	80053bc <_printf_common+0xa4>
 80053ee:	3601      	adds	r6, #1
 80053f0:	e7d9      	b.n	80053a6 <_printf_common+0x8e>
	...

080053f4 <_printf_i>:
 80053f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f8:	7e0f      	ldrb	r7, [r1, #24]
 80053fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053fc:	2f78      	cmp	r7, #120	@ 0x78
 80053fe:	4691      	mov	r9, r2
 8005400:	4680      	mov	r8, r0
 8005402:	460c      	mov	r4, r1
 8005404:	469a      	mov	sl, r3
 8005406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800540a:	d807      	bhi.n	800541c <_printf_i+0x28>
 800540c:	2f62      	cmp	r7, #98	@ 0x62
 800540e:	d80a      	bhi.n	8005426 <_printf_i+0x32>
 8005410:	2f00      	cmp	r7, #0
 8005412:	f000 80d2 	beq.w	80055ba <_printf_i+0x1c6>
 8005416:	2f58      	cmp	r7, #88	@ 0x58
 8005418:	f000 80b9 	beq.w	800558e <_printf_i+0x19a>
 800541c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005424:	e03a      	b.n	800549c <_printf_i+0xa8>
 8005426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800542a:	2b15      	cmp	r3, #21
 800542c:	d8f6      	bhi.n	800541c <_printf_i+0x28>
 800542e:	a101      	add	r1, pc, #4	@ (adr r1, 8005434 <_printf_i+0x40>)
 8005430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005434:	0800548d 	.word	0x0800548d
 8005438:	080054a1 	.word	0x080054a1
 800543c:	0800541d 	.word	0x0800541d
 8005440:	0800541d 	.word	0x0800541d
 8005444:	0800541d 	.word	0x0800541d
 8005448:	0800541d 	.word	0x0800541d
 800544c:	080054a1 	.word	0x080054a1
 8005450:	0800541d 	.word	0x0800541d
 8005454:	0800541d 	.word	0x0800541d
 8005458:	0800541d 	.word	0x0800541d
 800545c:	0800541d 	.word	0x0800541d
 8005460:	080055a1 	.word	0x080055a1
 8005464:	080054cb 	.word	0x080054cb
 8005468:	0800555b 	.word	0x0800555b
 800546c:	0800541d 	.word	0x0800541d
 8005470:	0800541d 	.word	0x0800541d
 8005474:	080055c3 	.word	0x080055c3
 8005478:	0800541d 	.word	0x0800541d
 800547c:	080054cb 	.word	0x080054cb
 8005480:	0800541d 	.word	0x0800541d
 8005484:	0800541d 	.word	0x0800541d
 8005488:	08005563 	.word	0x08005563
 800548c:	6833      	ldr	r3, [r6, #0]
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6032      	str	r2, [r6, #0]
 8005494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800549c:	2301      	movs	r3, #1
 800549e:	e09d      	b.n	80055dc <_printf_i+0x1e8>
 80054a0:	6833      	ldr	r3, [r6, #0]
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	1d19      	adds	r1, r3, #4
 80054a6:	6031      	str	r1, [r6, #0]
 80054a8:	0606      	lsls	r6, r0, #24
 80054aa:	d501      	bpl.n	80054b0 <_printf_i+0xbc>
 80054ac:	681d      	ldr	r5, [r3, #0]
 80054ae:	e003      	b.n	80054b8 <_printf_i+0xc4>
 80054b0:	0645      	lsls	r5, r0, #25
 80054b2:	d5fb      	bpl.n	80054ac <_printf_i+0xb8>
 80054b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054b8:	2d00      	cmp	r5, #0
 80054ba:	da03      	bge.n	80054c4 <_printf_i+0xd0>
 80054bc:	232d      	movs	r3, #45	@ 0x2d
 80054be:	426d      	negs	r5, r5
 80054c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054c4:	4859      	ldr	r0, [pc, #356]	@ (800562c <_printf_i+0x238>)
 80054c6:	230a      	movs	r3, #10
 80054c8:	e011      	b.n	80054ee <_printf_i+0xfa>
 80054ca:	6821      	ldr	r1, [r4, #0]
 80054cc:	6833      	ldr	r3, [r6, #0]
 80054ce:	0608      	lsls	r0, r1, #24
 80054d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80054d4:	d402      	bmi.n	80054dc <_printf_i+0xe8>
 80054d6:	0649      	lsls	r1, r1, #25
 80054d8:	bf48      	it	mi
 80054da:	b2ad      	uxthmi	r5, r5
 80054dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80054de:	4853      	ldr	r0, [pc, #332]	@ (800562c <_printf_i+0x238>)
 80054e0:	6033      	str	r3, [r6, #0]
 80054e2:	bf14      	ite	ne
 80054e4:	230a      	movne	r3, #10
 80054e6:	2308      	moveq	r3, #8
 80054e8:	2100      	movs	r1, #0
 80054ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054ee:	6866      	ldr	r6, [r4, #4]
 80054f0:	60a6      	str	r6, [r4, #8]
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	bfa2      	ittt	ge
 80054f6:	6821      	ldrge	r1, [r4, #0]
 80054f8:	f021 0104 	bicge.w	r1, r1, #4
 80054fc:	6021      	strge	r1, [r4, #0]
 80054fe:	b90d      	cbnz	r5, 8005504 <_printf_i+0x110>
 8005500:	2e00      	cmp	r6, #0
 8005502:	d04b      	beq.n	800559c <_printf_i+0x1a8>
 8005504:	4616      	mov	r6, r2
 8005506:	fbb5 f1f3 	udiv	r1, r5, r3
 800550a:	fb03 5711 	mls	r7, r3, r1, r5
 800550e:	5dc7      	ldrb	r7, [r0, r7]
 8005510:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005514:	462f      	mov	r7, r5
 8005516:	42bb      	cmp	r3, r7
 8005518:	460d      	mov	r5, r1
 800551a:	d9f4      	bls.n	8005506 <_printf_i+0x112>
 800551c:	2b08      	cmp	r3, #8
 800551e:	d10b      	bne.n	8005538 <_printf_i+0x144>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	07df      	lsls	r7, r3, #31
 8005524:	d508      	bpl.n	8005538 <_printf_i+0x144>
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	6861      	ldr	r1, [r4, #4]
 800552a:	4299      	cmp	r1, r3
 800552c:	bfde      	ittt	le
 800552e:	2330      	movle	r3, #48	@ 0x30
 8005530:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005534:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005538:	1b92      	subs	r2, r2, r6
 800553a:	6122      	str	r2, [r4, #16]
 800553c:	f8cd a000 	str.w	sl, [sp]
 8005540:	464b      	mov	r3, r9
 8005542:	aa03      	add	r2, sp, #12
 8005544:	4621      	mov	r1, r4
 8005546:	4640      	mov	r0, r8
 8005548:	f7ff fee6 	bl	8005318 <_printf_common>
 800554c:	3001      	adds	r0, #1
 800554e:	d14a      	bne.n	80055e6 <_printf_i+0x1f2>
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	b004      	add	sp, #16
 8005556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	f043 0320 	orr.w	r3, r3, #32
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	4833      	ldr	r0, [pc, #204]	@ (8005630 <_printf_i+0x23c>)
 8005564:	2778      	movs	r7, #120	@ 0x78
 8005566:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	6831      	ldr	r1, [r6, #0]
 800556e:	061f      	lsls	r7, r3, #24
 8005570:	f851 5b04 	ldr.w	r5, [r1], #4
 8005574:	d402      	bmi.n	800557c <_printf_i+0x188>
 8005576:	065f      	lsls	r7, r3, #25
 8005578:	bf48      	it	mi
 800557a:	b2ad      	uxthmi	r5, r5
 800557c:	6031      	str	r1, [r6, #0]
 800557e:	07d9      	lsls	r1, r3, #31
 8005580:	bf44      	itt	mi
 8005582:	f043 0320 	orrmi.w	r3, r3, #32
 8005586:	6023      	strmi	r3, [r4, #0]
 8005588:	b11d      	cbz	r5, 8005592 <_printf_i+0x19e>
 800558a:	2310      	movs	r3, #16
 800558c:	e7ac      	b.n	80054e8 <_printf_i+0xf4>
 800558e:	4827      	ldr	r0, [pc, #156]	@ (800562c <_printf_i+0x238>)
 8005590:	e7e9      	b.n	8005566 <_printf_i+0x172>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	f023 0320 	bic.w	r3, r3, #32
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	e7f6      	b.n	800558a <_printf_i+0x196>
 800559c:	4616      	mov	r6, r2
 800559e:	e7bd      	b.n	800551c <_printf_i+0x128>
 80055a0:	6833      	ldr	r3, [r6, #0]
 80055a2:	6825      	ldr	r5, [r4, #0]
 80055a4:	6961      	ldr	r1, [r4, #20]
 80055a6:	1d18      	adds	r0, r3, #4
 80055a8:	6030      	str	r0, [r6, #0]
 80055aa:	062e      	lsls	r6, r5, #24
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	d501      	bpl.n	80055b4 <_printf_i+0x1c0>
 80055b0:	6019      	str	r1, [r3, #0]
 80055b2:	e002      	b.n	80055ba <_printf_i+0x1c6>
 80055b4:	0668      	lsls	r0, r5, #25
 80055b6:	d5fb      	bpl.n	80055b0 <_printf_i+0x1bc>
 80055b8:	8019      	strh	r1, [r3, #0]
 80055ba:	2300      	movs	r3, #0
 80055bc:	6123      	str	r3, [r4, #16]
 80055be:	4616      	mov	r6, r2
 80055c0:	e7bc      	b.n	800553c <_printf_i+0x148>
 80055c2:	6833      	ldr	r3, [r6, #0]
 80055c4:	1d1a      	adds	r2, r3, #4
 80055c6:	6032      	str	r2, [r6, #0]
 80055c8:	681e      	ldr	r6, [r3, #0]
 80055ca:	6862      	ldr	r2, [r4, #4]
 80055cc:	2100      	movs	r1, #0
 80055ce:	4630      	mov	r0, r6
 80055d0:	f7fa fe1e 	bl	8000210 <memchr>
 80055d4:	b108      	cbz	r0, 80055da <_printf_i+0x1e6>
 80055d6:	1b80      	subs	r0, r0, r6
 80055d8:	6060      	str	r0, [r4, #4]
 80055da:	6863      	ldr	r3, [r4, #4]
 80055dc:	6123      	str	r3, [r4, #16]
 80055de:	2300      	movs	r3, #0
 80055e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055e4:	e7aa      	b.n	800553c <_printf_i+0x148>
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	4632      	mov	r2, r6
 80055ea:	4649      	mov	r1, r9
 80055ec:	4640      	mov	r0, r8
 80055ee:	47d0      	blx	sl
 80055f0:	3001      	adds	r0, #1
 80055f2:	d0ad      	beq.n	8005550 <_printf_i+0x15c>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	079b      	lsls	r3, r3, #30
 80055f8:	d413      	bmi.n	8005622 <_printf_i+0x22e>
 80055fa:	68e0      	ldr	r0, [r4, #12]
 80055fc:	9b03      	ldr	r3, [sp, #12]
 80055fe:	4298      	cmp	r0, r3
 8005600:	bfb8      	it	lt
 8005602:	4618      	movlt	r0, r3
 8005604:	e7a6      	b.n	8005554 <_printf_i+0x160>
 8005606:	2301      	movs	r3, #1
 8005608:	4632      	mov	r2, r6
 800560a:	4649      	mov	r1, r9
 800560c:	4640      	mov	r0, r8
 800560e:	47d0      	blx	sl
 8005610:	3001      	adds	r0, #1
 8005612:	d09d      	beq.n	8005550 <_printf_i+0x15c>
 8005614:	3501      	adds	r5, #1
 8005616:	68e3      	ldr	r3, [r4, #12]
 8005618:	9903      	ldr	r1, [sp, #12]
 800561a:	1a5b      	subs	r3, r3, r1
 800561c:	42ab      	cmp	r3, r5
 800561e:	dcf2      	bgt.n	8005606 <_printf_i+0x212>
 8005620:	e7eb      	b.n	80055fa <_printf_i+0x206>
 8005622:	2500      	movs	r5, #0
 8005624:	f104 0619 	add.w	r6, r4, #25
 8005628:	e7f5      	b.n	8005616 <_printf_i+0x222>
 800562a:	bf00      	nop
 800562c:	08005a31 	.word	0x08005a31
 8005630:	08005a42 	.word	0x08005a42

08005634 <__sflush_r>:
 8005634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563c:	0716      	lsls	r6, r2, #28
 800563e:	4605      	mov	r5, r0
 8005640:	460c      	mov	r4, r1
 8005642:	d454      	bmi.n	80056ee <__sflush_r+0xba>
 8005644:	684b      	ldr	r3, [r1, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	dc02      	bgt.n	8005650 <__sflush_r+0x1c>
 800564a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	dd48      	ble.n	80056e2 <__sflush_r+0xae>
 8005650:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005652:	2e00      	cmp	r6, #0
 8005654:	d045      	beq.n	80056e2 <__sflush_r+0xae>
 8005656:	2300      	movs	r3, #0
 8005658:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800565c:	682f      	ldr	r7, [r5, #0]
 800565e:	6a21      	ldr	r1, [r4, #32]
 8005660:	602b      	str	r3, [r5, #0]
 8005662:	d030      	beq.n	80056c6 <__sflush_r+0x92>
 8005664:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	0759      	lsls	r1, r3, #29
 800566a:	d505      	bpl.n	8005678 <__sflush_r+0x44>
 800566c:	6863      	ldr	r3, [r4, #4]
 800566e:	1ad2      	subs	r2, r2, r3
 8005670:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005672:	b10b      	cbz	r3, 8005678 <__sflush_r+0x44>
 8005674:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005676:	1ad2      	subs	r2, r2, r3
 8005678:	2300      	movs	r3, #0
 800567a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800567c:	6a21      	ldr	r1, [r4, #32]
 800567e:	4628      	mov	r0, r5
 8005680:	47b0      	blx	r6
 8005682:	1c43      	adds	r3, r0, #1
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	d106      	bne.n	8005696 <__sflush_r+0x62>
 8005688:	6829      	ldr	r1, [r5, #0]
 800568a:	291d      	cmp	r1, #29
 800568c:	d82b      	bhi.n	80056e6 <__sflush_r+0xb2>
 800568e:	4a2a      	ldr	r2, [pc, #168]	@ (8005738 <__sflush_r+0x104>)
 8005690:	410a      	asrs	r2, r1
 8005692:	07d6      	lsls	r6, r2, #31
 8005694:	d427      	bmi.n	80056e6 <__sflush_r+0xb2>
 8005696:	2200      	movs	r2, #0
 8005698:	6062      	str	r2, [r4, #4]
 800569a:	04d9      	lsls	r1, r3, #19
 800569c:	6922      	ldr	r2, [r4, #16]
 800569e:	6022      	str	r2, [r4, #0]
 80056a0:	d504      	bpl.n	80056ac <__sflush_r+0x78>
 80056a2:	1c42      	adds	r2, r0, #1
 80056a4:	d101      	bne.n	80056aa <__sflush_r+0x76>
 80056a6:	682b      	ldr	r3, [r5, #0]
 80056a8:	b903      	cbnz	r3, 80056ac <__sflush_r+0x78>
 80056aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80056ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056ae:	602f      	str	r7, [r5, #0]
 80056b0:	b1b9      	cbz	r1, 80056e2 <__sflush_r+0xae>
 80056b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056b6:	4299      	cmp	r1, r3
 80056b8:	d002      	beq.n	80056c0 <__sflush_r+0x8c>
 80056ba:	4628      	mov	r0, r5
 80056bc:	f7ff fbf2 	bl	8004ea4 <_free_r>
 80056c0:	2300      	movs	r3, #0
 80056c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80056c4:	e00d      	b.n	80056e2 <__sflush_r+0xae>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b0      	blx	r6
 80056cc:	4602      	mov	r2, r0
 80056ce:	1c50      	adds	r0, r2, #1
 80056d0:	d1c9      	bne.n	8005666 <__sflush_r+0x32>
 80056d2:	682b      	ldr	r3, [r5, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0c6      	beq.n	8005666 <__sflush_r+0x32>
 80056d8:	2b1d      	cmp	r3, #29
 80056da:	d001      	beq.n	80056e0 <__sflush_r+0xac>
 80056dc:	2b16      	cmp	r3, #22
 80056de:	d11e      	bne.n	800571e <__sflush_r+0xea>
 80056e0:	602f      	str	r7, [r5, #0]
 80056e2:	2000      	movs	r0, #0
 80056e4:	e022      	b.n	800572c <__sflush_r+0xf8>
 80056e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ea:	b21b      	sxth	r3, r3
 80056ec:	e01b      	b.n	8005726 <__sflush_r+0xf2>
 80056ee:	690f      	ldr	r7, [r1, #16]
 80056f0:	2f00      	cmp	r7, #0
 80056f2:	d0f6      	beq.n	80056e2 <__sflush_r+0xae>
 80056f4:	0793      	lsls	r3, r2, #30
 80056f6:	680e      	ldr	r6, [r1, #0]
 80056f8:	bf08      	it	eq
 80056fa:	694b      	ldreq	r3, [r1, #20]
 80056fc:	600f      	str	r7, [r1, #0]
 80056fe:	bf18      	it	ne
 8005700:	2300      	movne	r3, #0
 8005702:	eba6 0807 	sub.w	r8, r6, r7
 8005706:	608b      	str	r3, [r1, #8]
 8005708:	f1b8 0f00 	cmp.w	r8, #0
 800570c:	dde9      	ble.n	80056e2 <__sflush_r+0xae>
 800570e:	6a21      	ldr	r1, [r4, #32]
 8005710:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005712:	4643      	mov	r3, r8
 8005714:	463a      	mov	r2, r7
 8005716:	4628      	mov	r0, r5
 8005718:	47b0      	blx	r6
 800571a:	2800      	cmp	r0, #0
 800571c:	dc08      	bgt.n	8005730 <__sflush_r+0xfc>
 800571e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005726:	81a3      	strh	r3, [r4, #12]
 8005728:	f04f 30ff 	mov.w	r0, #4294967295
 800572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005730:	4407      	add	r7, r0
 8005732:	eba8 0800 	sub.w	r8, r8, r0
 8005736:	e7e7      	b.n	8005708 <__sflush_r+0xd4>
 8005738:	dfbffffe 	.word	0xdfbffffe

0800573c <_fflush_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	690b      	ldr	r3, [r1, #16]
 8005740:	4605      	mov	r5, r0
 8005742:	460c      	mov	r4, r1
 8005744:	b913      	cbnz	r3, 800574c <_fflush_r+0x10>
 8005746:	2500      	movs	r5, #0
 8005748:	4628      	mov	r0, r5
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	b118      	cbz	r0, 8005756 <_fflush_r+0x1a>
 800574e:	6a03      	ldr	r3, [r0, #32]
 8005750:	b90b      	cbnz	r3, 8005756 <_fflush_r+0x1a>
 8005752:	f7ff fa9f 	bl	8004c94 <__sinit>
 8005756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f3      	beq.n	8005746 <_fflush_r+0xa>
 800575e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005760:	07d0      	lsls	r0, r2, #31
 8005762:	d404      	bmi.n	800576e <_fflush_r+0x32>
 8005764:	0599      	lsls	r1, r3, #22
 8005766:	d402      	bmi.n	800576e <_fflush_r+0x32>
 8005768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800576a:	f7ff fb98 	bl	8004e9e <__retarget_lock_acquire_recursive>
 800576e:	4628      	mov	r0, r5
 8005770:	4621      	mov	r1, r4
 8005772:	f7ff ff5f 	bl	8005634 <__sflush_r>
 8005776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005778:	07da      	lsls	r2, r3, #31
 800577a:	4605      	mov	r5, r0
 800577c:	d4e4      	bmi.n	8005748 <_fflush_r+0xc>
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	059b      	lsls	r3, r3, #22
 8005782:	d4e1      	bmi.n	8005748 <_fflush_r+0xc>
 8005784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005786:	f7ff fb8b 	bl	8004ea0 <__retarget_lock_release_recursive>
 800578a:	e7dd      	b.n	8005748 <_fflush_r+0xc>

0800578c <__swbuf_r>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	460e      	mov	r6, r1
 8005790:	4614      	mov	r4, r2
 8005792:	4605      	mov	r5, r0
 8005794:	b118      	cbz	r0, 800579e <__swbuf_r+0x12>
 8005796:	6a03      	ldr	r3, [r0, #32]
 8005798:	b90b      	cbnz	r3, 800579e <__swbuf_r+0x12>
 800579a:	f7ff fa7b 	bl	8004c94 <__sinit>
 800579e:	69a3      	ldr	r3, [r4, #24]
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	071a      	lsls	r2, r3, #28
 80057a6:	d501      	bpl.n	80057ac <__swbuf_r+0x20>
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	b943      	cbnz	r3, 80057be <__swbuf_r+0x32>
 80057ac:	4621      	mov	r1, r4
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 f82a 	bl	8005808 <__swsetup_r>
 80057b4:	b118      	cbz	r0, 80057be <__swbuf_r+0x32>
 80057b6:	f04f 37ff 	mov.w	r7, #4294967295
 80057ba:	4638      	mov	r0, r7
 80057bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	6922      	ldr	r2, [r4, #16]
 80057c2:	1a98      	subs	r0, r3, r2
 80057c4:	6963      	ldr	r3, [r4, #20]
 80057c6:	b2f6      	uxtb	r6, r6
 80057c8:	4283      	cmp	r3, r0
 80057ca:	4637      	mov	r7, r6
 80057cc:	dc05      	bgt.n	80057da <__swbuf_r+0x4e>
 80057ce:	4621      	mov	r1, r4
 80057d0:	4628      	mov	r0, r5
 80057d2:	f7ff ffb3 	bl	800573c <_fflush_r>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d1ed      	bne.n	80057b6 <__swbuf_r+0x2a>
 80057da:	68a3      	ldr	r3, [r4, #8]
 80057dc:	3b01      	subs	r3, #1
 80057de:	60a3      	str	r3, [r4, #8]
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	6022      	str	r2, [r4, #0]
 80057e6:	701e      	strb	r6, [r3, #0]
 80057e8:	6962      	ldr	r2, [r4, #20]
 80057ea:	1c43      	adds	r3, r0, #1
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d004      	beq.n	80057fa <__swbuf_r+0x6e>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	07db      	lsls	r3, r3, #31
 80057f4:	d5e1      	bpl.n	80057ba <__swbuf_r+0x2e>
 80057f6:	2e0a      	cmp	r6, #10
 80057f8:	d1df      	bne.n	80057ba <__swbuf_r+0x2e>
 80057fa:	4621      	mov	r1, r4
 80057fc:	4628      	mov	r0, r5
 80057fe:	f7ff ff9d 	bl	800573c <_fflush_r>
 8005802:	2800      	cmp	r0, #0
 8005804:	d0d9      	beq.n	80057ba <__swbuf_r+0x2e>
 8005806:	e7d6      	b.n	80057b6 <__swbuf_r+0x2a>

08005808 <__swsetup_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4b29      	ldr	r3, [pc, #164]	@ (80058b0 <__swsetup_r+0xa8>)
 800580c:	4605      	mov	r5, r0
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	460c      	mov	r4, r1
 8005812:	b118      	cbz	r0, 800581c <__swsetup_r+0x14>
 8005814:	6a03      	ldr	r3, [r0, #32]
 8005816:	b90b      	cbnz	r3, 800581c <__swsetup_r+0x14>
 8005818:	f7ff fa3c 	bl	8004c94 <__sinit>
 800581c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005820:	0719      	lsls	r1, r3, #28
 8005822:	d422      	bmi.n	800586a <__swsetup_r+0x62>
 8005824:	06da      	lsls	r2, r3, #27
 8005826:	d407      	bmi.n	8005838 <__swsetup_r+0x30>
 8005828:	2209      	movs	r2, #9
 800582a:	602a      	str	r2, [r5, #0]
 800582c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005830:	81a3      	strh	r3, [r4, #12]
 8005832:	f04f 30ff 	mov.w	r0, #4294967295
 8005836:	e033      	b.n	80058a0 <__swsetup_r+0x98>
 8005838:	0758      	lsls	r0, r3, #29
 800583a:	d512      	bpl.n	8005862 <__swsetup_r+0x5a>
 800583c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800583e:	b141      	cbz	r1, 8005852 <__swsetup_r+0x4a>
 8005840:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005844:	4299      	cmp	r1, r3
 8005846:	d002      	beq.n	800584e <__swsetup_r+0x46>
 8005848:	4628      	mov	r0, r5
 800584a:	f7ff fb2b 	bl	8004ea4 <_free_r>
 800584e:	2300      	movs	r3, #0
 8005850:	6363      	str	r3, [r4, #52]	@ 0x34
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	2300      	movs	r3, #0
 800585c:	6063      	str	r3, [r4, #4]
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	f043 0308 	orr.w	r3, r3, #8
 8005868:	81a3      	strh	r3, [r4, #12]
 800586a:	6923      	ldr	r3, [r4, #16]
 800586c:	b94b      	cbnz	r3, 8005882 <__swsetup_r+0x7a>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005878:	d003      	beq.n	8005882 <__swsetup_r+0x7a>
 800587a:	4621      	mov	r1, r4
 800587c:	4628      	mov	r0, r5
 800587e:	f000 f84f 	bl	8005920 <__smakebuf_r>
 8005882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005886:	f013 0201 	ands.w	r2, r3, #1
 800588a:	d00a      	beq.n	80058a2 <__swsetup_r+0x9a>
 800588c:	2200      	movs	r2, #0
 800588e:	60a2      	str	r2, [r4, #8]
 8005890:	6962      	ldr	r2, [r4, #20]
 8005892:	4252      	negs	r2, r2
 8005894:	61a2      	str	r2, [r4, #24]
 8005896:	6922      	ldr	r2, [r4, #16]
 8005898:	b942      	cbnz	r2, 80058ac <__swsetup_r+0xa4>
 800589a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800589e:	d1c5      	bne.n	800582c <__swsetup_r+0x24>
 80058a0:	bd38      	pop	{r3, r4, r5, pc}
 80058a2:	0799      	lsls	r1, r3, #30
 80058a4:	bf58      	it	pl
 80058a6:	6962      	ldrpl	r2, [r4, #20]
 80058a8:	60a2      	str	r2, [r4, #8]
 80058aa:	e7f4      	b.n	8005896 <__swsetup_r+0x8e>
 80058ac:	2000      	movs	r0, #0
 80058ae:	e7f7      	b.n	80058a0 <__swsetup_r+0x98>
 80058b0:	2000019c 	.word	0x2000019c

080058b4 <_sbrk_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4d06      	ldr	r5, [pc, #24]	@ (80058d0 <_sbrk_r+0x1c>)
 80058b8:	2300      	movs	r3, #0
 80058ba:	4604      	mov	r4, r0
 80058bc:	4608      	mov	r0, r1
 80058be:	602b      	str	r3, [r5, #0]
 80058c0:	f7fb fe5c 	bl	800157c <_sbrk>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_sbrk_r+0x1a>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_sbrk_r+0x1a>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	200004a4 	.word	0x200004a4

080058d4 <__swhatbuf_r>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	460c      	mov	r4, r1
 80058d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058dc:	2900      	cmp	r1, #0
 80058de:	b096      	sub	sp, #88	@ 0x58
 80058e0:	4615      	mov	r5, r2
 80058e2:	461e      	mov	r6, r3
 80058e4:	da0d      	bge.n	8005902 <__swhatbuf_r+0x2e>
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058ec:	f04f 0100 	mov.w	r1, #0
 80058f0:	bf14      	ite	ne
 80058f2:	2340      	movne	r3, #64	@ 0x40
 80058f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058f8:	2000      	movs	r0, #0
 80058fa:	6031      	str	r1, [r6, #0]
 80058fc:	602b      	str	r3, [r5, #0]
 80058fe:	b016      	add	sp, #88	@ 0x58
 8005900:	bd70      	pop	{r4, r5, r6, pc}
 8005902:	466a      	mov	r2, sp
 8005904:	f000 f848 	bl	8005998 <_fstat_r>
 8005908:	2800      	cmp	r0, #0
 800590a:	dbec      	blt.n	80058e6 <__swhatbuf_r+0x12>
 800590c:	9901      	ldr	r1, [sp, #4]
 800590e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005912:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005916:	4259      	negs	r1, r3
 8005918:	4159      	adcs	r1, r3
 800591a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800591e:	e7eb      	b.n	80058f8 <__swhatbuf_r+0x24>

08005920 <__smakebuf_r>:
 8005920:	898b      	ldrh	r3, [r1, #12]
 8005922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005924:	079d      	lsls	r5, r3, #30
 8005926:	4606      	mov	r6, r0
 8005928:	460c      	mov	r4, r1
 800592a:	d507      	bpl.n	800593c <__smakebuf_r+0x1c>
 800592c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	6123      	str	r3, [r4, #16]
 8005934:	2301      	movs	r3, #1
 8005936:	6163      	str	r3, [r4, #20]
 8005938:	b003      	add	sp, #12
 800593a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800593c:	ab01      	add	r3, sp, #4
 800593e:	466a      	mov	r2, sp
 8005940:	f7ff ffc8 	bl	80058d4 <__swhatbuf_r>
 8005944:	9f00      	ldr	r7, [sp, #0]
 8005946:	4605      	mov	r5, r0
 8005948:	4639      	mov	r1, r7
 800594a:	4630      	mov	r0, r6
 800594c:	f7ff fb16 	bl	8004f7c <_malloc_r>
 8005950:	b948      	cbnz	r0, 8005966 <__smakebuf_r+0x46>
 8005952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005956:	059a      	lsls	r2, r3, #22
 8005958:	d4ee      	bmi.n	8005938 <__smakebuf_r+0x18>
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	f043 0302 	orr.w	r3, r3, #2
 8005962:	81a3      	strh	r3, [r4, #12]
 8005964:	e7e2      	b.n	800592c <__smakebuf_r+0xc>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	6020      	str	r0, [r4, #0]
 800596a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	9b01      	ldr	r3, [sp, #4]
 8005972:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005976:	b15b      	cbz	r3, 8005990 <__smakebuf_r+0x70>
 8005978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800597c:	4630      	mov	r0, r6
 800597e:	f000 f81d 	bl	80059bc <_isatty_r>
 8005982:	b128      	cbz	r0, 8005990 <__smakebuf_r+0x70>
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	f023 0303 	bic.w	r3, r3, #3
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	431d      	orrs	r5, r3
 8005994:	81a5      	strh	r5, [r4, #12]
 8005996:	e7cf      	b.n	8005938 <__smakebuf_r+0x18>

08005998 <_fstat_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d07      	ldr	r5, [pc, #28]	@ (80059b8 <_fstat_r+0x20>)
 800599c:	2300      	movs	r3, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	4611      	mov	r1, r2
 80059a4:	602b      	str	r3, [r5, #0]
 80059a6:	f7fb fdc0 	bl	800152a <_fstat>
 80059aa:	1c43      	adds	r3, r0, #1
 80059ac:	d102      	bne.n	80059b4 <_fstat_r+0x1c>
 80059ae:	682b      	ldr	r3, [r5, #0]
 80059b0:	b103      	cbz	r3, 80059b4 <_fstat_r+0x1c>
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	bd38      	pop	{r3, r4, r5, pc}
 80059b6:	bf00      	nop
 80059b8:	200004a4 	.word	0x200004a4

080059bc <_isatty_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4d06      	ldr	r5, [pc, #24]	@ (80059d8 <_isatty_r+0x1c>)
 80059c0:	2300      	movs	r3, #0
 80059c2:	4604      	mov	r4, r0
 80059c4:	4608      	mov	r0, r1
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	f7fb fdbf 	bl	800154a <_isatty>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_isatty_r+0x1a>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_isatty_r+0x1a>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	200004a4 	.word	0x200004a4

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr

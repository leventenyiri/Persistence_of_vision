
Persistence_of_vision.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000899c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08008b70  08008b70  00009b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f08  08008f08  0000a240  2**0
                  CONTENTS
  4 .ARM          00000008  08008f08  08008f08  00009f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f10  08008f10  0000a240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f10  08008f10  00009f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f14  08008f14  00009f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  08008f18  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001010  20000240  08009158  0000a240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001250  08009158  0000a250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d98b  00000000  00000000  0000a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f7  00000000  00000000  00027bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  0002a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001481  00000000  00000000  0002bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ab9  00000000  00000000  0002d3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017317  00000000  00000000  00050e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc10d  00000000  00000000  000681a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001442ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008250  00000000  00000000  001442f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0014c544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b54 	.word	0x08008b54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	08008b54 	.word	0x08008b54

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <OutputEnable>:

	 would look like this, now i write each column into a vector, and i will light up these leds
	 with a delay to display the character
	 */

void OutputEnable(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Set PB2 low to enable output
 8000edc:	2200      	movs	r2, #0
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <OutputEnable+0x14>)
 8000ee2:	f002 fe79 	bl	8003bd8 <HAL_GPIO_WritePin>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020400 	.word	0x40020400

08000ef0 <OutputDisable>:

void OutputDisable(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Set PB2 high to disable output
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <OutputDisable+0x14>)
 8000efa:	f002 fe6d 	bl	8003bd8 <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020400 	.word	0x40020400

08000f08 <LatchEnable>:

void LatchEnable(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // Set PB1 high
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4806      	ldr	r0, [pc, #24]	@ (8000f2c <LatchEnable+0x24>)
 8000f12:	f002 fe61 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_Delay(1);  // Short delay to ensure the latch pulse is detected
 8000f16:	2001      	movs	r0, #1
 8000f18:	f002 faa0 	bl	800345c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Set PB1 low again
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <LatchEnable+0x24>)
 8000f22:	f002 fe59 	bl	8003bd8 <HAL_GPIO_WritePin>
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40020400 	.word	0x40020400

08000f30 <SendLEDData>:


void SendLEDData(uint8_t *data) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 8000f38:	2305      	movs	r3, #5
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	e00a      	b.n	8000f54 <SendLEDData+0x24>
		HAL_SPI_Transmit(&hspi2, &data[i], 1, 100);  // Send 1 byte per driver
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	18d1      	adds	r1, r2, r3
 8000f44:	2364      	movs	r3, #100	@ 0x64
 8000f46:	2201      	movs	r2, #1
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <SendLEDData+0x38>)
 8000f4a:	f003 fd10 	bl	800496e <HAL_SPI_Transmit>
	for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	daf1      	bge.n	8000f3e <SendLEDData+0xe>
	}
	LatchEnable();  // Latch data once all have been transmitted
 8000f5a:	f7ff ffd5 	bl	8000f08 <LatchEnable>
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000270 	.word	0x20000270

08000f6c <wrap_platform_read>:

	SendLEDData(LED);
}

int32_t wrap_platform_read(uint8_t Address, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	603a      	str	r2, [r7, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	71bb      	strb	r3, [r7, #6]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	80bb      	strh	r3, [r7, #4]
	Reg |= 0x80;
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2110      	movs	r1, #16
 8000f90:	480b      	ldr	r0, [pc, #44]	@ (8000fc0 <wrap_platform_read+0x54>)
 8000f92:	f002 fe21 	bl	8003bd8 <HAL_GPIO_WritePin>
	BSP_SPI1_Send(&Reg, 1);
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 ff7a 	bl	8001e94 <BSP_SPI1_Send>
	BSP_SPI1_SendRecv(&Reg, Bufp, len);
 8000fa0:	88ba      	ldrh	r2, [r7, #4]
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	6839      	ldr	r1, [r7, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 ff90 	bl	8001ecc <BSP_SPI1_SendRecv>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <wrap_platform_read+0x54>)
 8000fb2:	f002 fe11 	bl	8003bd8 <HAL_GPIO_WritePin>
	return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <wrap_platform_write>:

int32_t wrap_platform_write(uint8_t Address, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	603a      	str	r2, [r7, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	71bb      	strb	r3, [r7, #6]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2110      	movs	r1, #16
 8000fde:	480b      	ldr	r0, [pc, #44]	@ (800100c <wrap_platform_write+0x48>)
 8000fe0:	f002 fdfa 	bl	8003bd8 <HAL_GPIO_WritePin>
	BSP_SPI1_Send(&Reg, 1);
 8000fe4:	1dbb      	adds	r3, r7, #6
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 ff53 	bl	8001e94 <BSP_SPI1_Send>
	BSP_SPI1_Send(Bufp, len);
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6838      	ldr	r0, [r7, #0]
 8000ff4:	f000 ff4e 	bl	8001e94 <BSP_SPI1_Send>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	4803      	ldr	r0, [pc, #12]	@ (800100c <wrap_platform_write+0x48>)
 8000ffe:	f002 fdeb 	bl	8003bd8 <HAL_GPIO_WritePin>
	return 0;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40020000 	.word	0x40020000

08001010 <updateMeanAndCenterData>:
		dir_change.flag ^= 1;
	}
}

// Update mean and center data dynamically
double updateMeanAndCenterData(double newData) {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	ed87 0b00 	vstr	d0, [r7]
    runningTotal += newData;
 800101a:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <updateMeanAndCenterData+0x78>)
 800101c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001024:	f7ff f952 	bl	80002cc <__adddf3>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4916      	ldr	r1, [pc, #88]	@ (8001088 <updateMeanAndCenterData+0x78>)
 800102e:	e9c1 2300 	strd	r2, r3, [r1]
    count++;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <updateMeanAndCenterData+0x7c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a14      	ldr	r2, [pc, #80]	@ (800108c <updateMeanAndCenterData+0x7c>)
 800103a:	6013      	str	r3, [r2, #0]
    currentMean = runningTotal / count;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <updateMeanAndCenterData+0x78>)
 800103e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <updateMeanAndCenterData+0x7c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa8c 	bl	8000564 <__aeabi_i2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4620      	mov	r0, r4
 8001052:	4629      	mov	r1, r5
 8001054:	f7ff fc1a 	bl	800088c <__aeabi_ddiv>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	490c      	ldr	r1, [pc, #48]	@ (8001090 <updateMeanAndCenterData+0x80>)
 800105e:	e9c1 2300 	strd	r2, r3, [r1]
    return newData - currentMean;
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <updateMeanAndCenterData+0x80>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800106c:	f7ff f92c 	bl	80002c8 <__aeabi_dsub>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	ec43 2b17 	vmov	d7, r2, r3
}
 8001078:	eeb0 0a47 	vmov.f32	s0, s14
 800107c:	eef0 0a67 	vmov.f32	s1, s15
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bdb0      	pop	{r4, r5, r7, pc}
 8001086:	bf00      	nop
 8001088:	20001040 	.word	0x20001040
 800108c:	20001048 	.word	0x20001048
 8001090:	20001050 	.word	0x20001050

08001094 <switchBuffers>:
    procBuffer_index++;


}

void switchBuffers(Data** writeBuffer, Data** readBuffer, Data* buffer1, Data* buffer2) {
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	603b      	str	r3, [r7, #0]
    if (*writeBuffer == buffer1) {
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d106      	bne.n	80010ba <switchBuffers+0x26>
        *writeBuffer = buffer2;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	601a      	str	r2, [r3, #0]
        *readBuffer = buffer1;
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	601a      	str	r2, [r3, #0]
    } else {
        *writeBuffer = buffer1;
        *readBuffer = buffer2;
    }

}
 80010b8:	e005      	b.n	80010c6 <switchBuffers+0x32>
        *writeBuffer = buffer1;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	601a      	str	r2, [r3, #0]
        *readBuffer = buffer2;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	601a      	str	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010e4:	d142      	bne.n	800116c <HAL_TIM_PeriodElapsedCallback+0x98>
		LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 80010e6:	4923      	ldr	r1, [pc, #140]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010e8:	4823      	ldr	r0, [pc, #140]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80010ea:	f001 faef 	bl	80026cc <LSM6DSL_ACC_GetAxes>

		// Check if buffer is ready to switch
		if (buffer_index >= BUFFER_SIZE) {
 80010ee:	4b23      	ldr	r3, [pc, #140]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b63      	cmp	r3, #99	@ 0x63
 80010f4:	dd0d      	ble.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x3e>
			switchBuffers(&writeBuffer,&readBuffer,buffer1,buffer2); // Switch the buffers
 80010f6:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80010f8:	4a22      	ldr	r2, [pc, #136]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80010fa:	4923      	ldr	r1, [pc, #140]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80010fc:	4823      	ldr	r0, [pc, #140]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80010fe:	f7ff ffc9 	bl	8001094 <switchBuffers>
			buffer_index = 0; // Reset buffer index for new writing
 8001102:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
			isBufferSwitched.flag = TRUE; // Set the flag indicating buffer switch
 8001108:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800110a:	7813      	ldrb	r3, [r2, #0]
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	7013      	strb	r3, [r2, #0]
		}

		// Write data to the active buffer
		writeBuffer[buffer_index].acc_axes_x = updateMeanAndCenterData((int) acc_axes.x);
 8001112:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa24 	bl	8000564 <__aeabi_i2d>
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	18d4      	adds	r4, r2, r3
 8001128:	ec41 0b10 	vmov	d0, r0, r1
 800112c:	f7ff ff70 	bl	8001010 <updateMeanAndCenterData>
 8001130:	eeb0 7a40 	vmov.f32	s14, s0
 8001134:	eef0 7a60 	vmov.f32	s15, s1
 8001138:	ed84 7b00 	vstr	d7, [r4]
		writeBuffer[buffer_index].cnt = cnt;
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	4413      	add	r3, r2
 8001148:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	609a      	str	r2, [r3, #8]
		buffer_index++;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	4a09      	ldr	r2, [pc, #36]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001156:	6013      	str	r3, [r2, #0]
		cnt++;
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001160:	6013      	str	r3, [r2, #0]



		timer_flag.flag = TRUE;
 8001162:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001164:	7813      	ldrb	r3, [r2, #0]
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	7013      	strb	r3, [r2, #0]
	}
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}
 8001174:	2000039c 	.word	0x2000039c
 8001178:	20000358 	.word	0x20000358
 800117c:	20001030 	.word	0x20001030
 8001180:	200009f0 	.word	0x200009f0
 8001184:	200003b0 	.word	0x200003b0
 8001188:	20000068 	.word	0x20000068
 800118c:	20000064 	.word	0x20000064
 8001190:	20001034 	.word	0x20001034
 8001194:	200003a8 	.word	0x200003a8
 8001198:	20000398 	.word	0x20000398

0800119c <update_motion>:

void update_motion(double new_acceleration, double delta_t) {
 800119c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011a0:	b08e      	sub	sp, #56	@ 0x38
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	ed87 0b02 	vstr	d0, [r7, #8]
 80011a8:	ed87 1b00 	vstr	d1, [r7]
    // Constants
    const double alpha = 0.5;  // Smoothing factor. Closer to 1 makes it more responsive but less smooth.
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b95      	ldr	r3, [pc, #596]	@ (8001408 <update_motion+0x26c>)
 80011b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Compute average acceleration
    double average_acceleration = (last_acceleration + new_acceleration) / 2.0;
 80011b6:	4b95      	ldr	r3, [pc, #596]	@ (800140c <update_motion+0x270>)
 80011b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011c0:	f7ff f884 	bl	80002cc <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011d4:	f7ff fb5a 	bl	800088c <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    current_velocity += average_acceleration * delta_t;
 80011e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011e8:	f7ff fa26 	bl	8000638 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	4b86      	ldr	r3, [pc, #536]	@ (8001410 <update_motion+0x274>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff f867 	bl	80002cc <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4983      	ldr	r1, [pc, #524]	@ (8001410 <update_motion+0x274>)
 8001204:	e9c1 2300 	strd	r2, r3, [r1]

    // Apply low-pass filter to smooth the velocity
    if (velocity_cnt == 0) {
 8001208:	4b82      	ldr	r3, [pc, #520]	@ (8001414 <update_motion+0x278>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d106      	bne.n	800121e <update_motion+0x82>
        // Initialize the filtered_velocity with the first sample
        filtered_velocity = current_velocity;
 8001210:	4b7f      	ldr	r3, [pc, #508]	@ (8001410 <update_motion+0x274>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	4980      	ldr	r1, [pc, #512]	@ (8001418 <update_motion+0x27c>)
 8001218:	e9c1 2300 	strd	r2, r3, [r1]
 800121c:	e025      	b.n	800126a <update_motion+0xce>
    } else {
        // Apply the exponential moving average
        filtered_velocity = alpha * current_velocity + (1 - alpha) * filtered_velocity;
 800121e:	4b7c      	ldr	r3, [pc, #496]	@ (8001410 <update_motion+0x274>)
 8001220:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001224:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001228:	f7ff fa06 	bl	8000638 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4692      	mov	sl, r2
 8001232:	469b      	mov	fp, r3
 8001234:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	4977      	ldr	r1, [pc, #476]	@ (800141c <update_motion+0x280>)
 800123e:	f7ff f843 	bl	80002c8 <__aeabi_dsub>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	4b73      	ldr	r3, [pc, #460]	@ (8001418 <update_motion+0x27c>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f9f2 	bl	8000638 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4650      	mov	r0, sl
 800125a:	4659      	mov	r1, fp
 800125c:	f7ff f836 	bl	80002cc <__adddf3>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	496c      	ldr	r1, [pc, #432]	@ (8001418 <update_motion+0x27c>)
 8001266:	e9c1 2300 	strd	r2, r3, [r1]
    }

    // Update the running total and count for velocity
    runningTotalVelocity += filtered_velocity;
 800126a:	4b6d      	ldr	r3, [pc, #436]	@ (8001420 <update_motion+0x284>)
 800126c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001270:	4b69      	ldr	r3, [pc, #420]	@ (8001418 <update_motion+0x27c>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	f7ff f829 	bl	80002cc <__adddf3>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4968      	ldr	r1, [pc, #416]	@ (8001420 <update_motion+0x284>)
 8001280:	e9c1 2300 	strd	r2, r3, [r1]
    velocity_cnt++;
 8001284:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <update_motion+0x278>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b61      	ldr	r3, [pc, #388]	@ (8001414 <update_motion+0x278>)
 800128e:	701a      	strb	r2, [r3, #0]

    // Calculate the mean of the velocities
    double mean_velocity = runningTotalVelocity / velocity_cnt;
 8001290:	4b63      	ldr	r3, [pc, #396]	@ (8001420 <update_motion+0x284>)
 8001292:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001296:	4b5f      	ldr	r3, [pc, #380]	@ (8001414 <update_motion+0x278>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f962 	bl	8000564 <__aeabi_i2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4650      	mov	r0, sl
 80012a6:	4659      	mov	r1, fp
 80012a8:	f7ff faf0 	bl	800088c <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Center the current velocity
    centered_velocity = filtered_velocity - mean_velocity;
 80012b4:	4b58      	ldr	r3, [pc, #352]	@ (8001418 <update_motion+0x27c>)
 80012b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012be:	f7ff f803 	bl	80002c8 <__aeabi_dsub>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4957      	ldr	r1, [pc, #348]	@ (8001424 <update_motion+0x288>)
 80012c8:	e9c1 2300 	strd	r2, r3, [r1]

    double average_velocity = (last_velocity + centered_velocity) / 2.0;
 80012cc:	4b56      	ldr	r3, [pc, #344]	@ (8001428 <update_motion+0x28c>)
 80012ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d2:	4b54      	ldr	r3, [pc, #336]	@ (8001424 <update_motion+0x288>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7fe fff8 	bl	80002cc <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ec:	f7ff face 	bl	800088c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double abs_velocity = (fabs(last_velocity) + fabs(centered_velocity)) / 2.0;
 80012f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001428 <update_motion+0x28c>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	4614      	mov	r4, r2
 8001300:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001304:	4b47      	ldr	r3, [pc, #284]	@ (8001424 <update_motion+0x288>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	4690      	mov	r8, r2
 800130c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001310:	4642      	mov	r2, r8
 8001312:	464b      	mov	r3, r9
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7fe ffd8 	bl	80002cc <__adddf3>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800132c:	f7ff faae 	bl	800088c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	e9c7 2304 	strd	r2, r3, [r7, #16]
    current_displacement += abs_velocity * delta_t;
 8001338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800133c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001340:	f7ff f97a 	bl	8000638 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	4b37      	ldr	r3, [pc, #220]	@ (800142c <update_motion+0x290>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7fe ffbb 	bl	80002cc <__adddf3>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4934      	ldr	r1, [pc, #208]	@ (800142c <update_motion+0x290>)
 800135c:	e9c1 2300 	strd	r2, r3, [r1]

    if ((last_velocity > 0 && centered_velocity < 0) || (last_velocity < 0 && centered_velocity > 0)) {
 8001360:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <update_motion+0x28c>)
 8001362:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	f7ff fbf3 	bl	8000b58 <__aeabi_dcmpgt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00b      	beq.n	8001390 <update_motion+0x1f4>
 8001378:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <update_motion+0x288>)
 800137a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	f7ff fbc9 	bl	8000b1c <__aeabi_dcmplt>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d117      	bne.n	80013c0 <update_motion+0x224>
 8001390:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <update_motion+0x28c>)
 8001392:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	f7ff fbbd 	bl	8000b1c <__aeabi_dcmplt>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d011      	beq.n	80013cc <update_motion+0x230>
 80013a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <update_motion+0x288>)
 80013aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	f7ff fbcf 	bl	8000b58 <__aeabi_dcmpgt>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <update_motion+0x230>
        zeroCrossing++;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <update_motion+0x294>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <update_motion+0x294>)
 80013ca:	701a      	strb	r2, [r3, #0]
    }

    // Update last values for the next iteration
    last_acceleration = new_acceleration;
 80013cc:	490f      	ldr	r1, [pc, #60]	@ (800140c <update_motion+0x270>)
 80013ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013d2:	e9c1 2300 	strd	r2, r3, [r1]
    last_velocity = centered_velocity;
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <update_motion+0x288>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	4912      	ldr	r1, [pc, #72]	@ (8001428 <update_motion+0x28c>)
 80013de:	e9c1 2300 	strd	r2, r3, [r1]

    // Reset displacement after two zero crossings
    if (zeroCrossing == 2) {
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <update_motion+0x294>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d109      	bne.n	80013fe <update_motion+0x262>
        current_displacement = 0;
 80013ea:	4910      	ldr	r1, [pc, #64]	@ (800142c <update_motion+0x290>)
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	e9c1 2300 	strd	r2, r3, [r1]
        zeroCrossing = 0;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <update_motion+0x294>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
        //printf("Current_displacement: %f \r\n", current_displacement);
    }
}
 80013fe:	bf00      	nop
 8001400:	3738      	adds	r7, #56	@ 0x38
 8001402:	46bd      	mov	sp, r7
 8001404:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001408:	3fe00000 	.word	0x3fe00000
 800140c:	20001058 	.word	0x20001058
 8001410:	20001068 	.word	0x20001068
 8001414:	2000103c 	.word	0x2000103c
 8001418:	20001090 	.word	0x20001090
 800141c:	3ff00000 	.word	0x3ff00000
 8001420:	20001080 	.word	0x20001080
 8001424:	20001078 	.word	0x20001078
 8001428:	20001060 	.word	0x20001060
 800142c:	20001070 	.word	0x20001070
 8001430:	20001088 	.word	0x20001088
 8001434:	00000000 	.word	0x00000000

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	b0ab      	sub	sp, #172	@ 0xac
 800143c:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	isBufferSwitched.flag = FALSE;
 800143e:	4a9c      	ldr	r2, [pc, #624]	@ (80016b0 <main+0x278>)
 8001440:	7813      	ldrb	r3, [r2, #0]
 8001442:	f36f 0300 	bfc	r3, #0, #1
 8001446:	7013      	strb	r3, [r2, #0]
	isProcBufferSwitched.flag = FALSE;
 8001448:	4a9a      	ldr	r2, [pc, #616]	@ (80016b4 <main+0x27c>)
 800144a:	7813      	ldrb	r3, [r2, #0]
 800144c:	f36f 0300 	bfc	r3, #0, #1
 8001450:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001452:	f001 ff91 	bl	8003378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001456:	f000 f94b 	bl	80016f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145a:	f000 fa63 	bl	8001924 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800145e:	f000 fa37 	bl	80018d0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001462:	f000 f9b3 	bl	80017cc <MX_SPI2_Init>
  MX_TIM2_Init();
 8001466:	f000 f9e7 	bl	8001838 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  OutputDisable();  // Disable outputs during initialization
 800146a:	f7ff fd41 	bl	8000ef0 <OutputDisable>
  SendLEDData(LED_CLEAR);
 800146e:	4892      	ldr	r0, [pc, #584]	@ (80016b8 <main+0x280>)
 8001470:	f7ff fd5e 	bl	8000f30 <SendLEDData>
  OutputEnable();
 8001474:	f7ff fd30 	bl	8000ed8 <OutputEnable>

  MEMS_Init();
 8001478:	f000 faee 	bl	8001a58 <MEMS_Init>


  int delayTime;

  timer_flag.flag = 0;
 800147c:	4a8f      	ldr	r2, [pc, #572]	@ (80016bc <main+0x284>)
 800147e:	7813      	ldrb	r3, [r2, #0]
 8001480:	f36f 0300 	bfc	r3, #0, #1
 8001484:	7013      	strb	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 8001486:	488e      	ldr	r0, [pc, #568]	@ (80016c0 <main+0x288>)
 8001488:	f003 fe9e 	bl	80051c8 <HAL_TIM_Base_Start_IT>



  dir_change.flag =1; //using a flag to detect the change of direction
 800148c:	4a8d      	ldr	r2, [pc, #564]	@ (80016c4 <main+0x28c>)
 800148e:	7813      	ldrb	r3, [r2, #0]
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	7013      	strb	r3, [r2, #0]


  uint16_t ASCII_ARRAY[7][9];

	for (int i = 0; i < 7; i++) {
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800149c:	e0b3      	b.n	8001606 <main+0x1ce>
		for (int j = 0; j < 9; j++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014a4:	e0a5      	b.n	80015f2 <main+0x1ba>

			if (i == 0)
 80014a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d112      	bne.n	80014d4 <main+0x9c>
				ASCII_ARRAY[i][j] = BLANK[j];
 80014ae:	4a86      	ldr	r2, [pc, #536]	@ (80016c8 <main+0x290>)
 80014b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014b4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80014b8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4413      	add	r3, r2
 80014c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	3390      	adds	r3, #144	@ 0x90
 80014cc:	443b      	add	r3, r7
 80014ce:	460a      	mov	r2, r1
 80014d0:	f823 2c8c 	strh.w	r2, [r3, #-140]
			if (i == 1)
 80014d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d112      	bne.n	8001502 <main+0xca>
				ASCII_ARRAY[i][j] = E[j];
 80014dc:	4a7b      	ldr	r2, [pc, #492]	@ (80016cc <main+0x294>)
 80014de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014e2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80014e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80014f4:	4413      	add	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	3390      	adds	r3, #144	@ 0x90
 80014fa:	443b      	add	r3, r7
 80014fc:	460a      	mov	r2, r1
 80014fe:	f823 2c8c 	strh.w	r2, [r3, #-140]
			if (i == 2)
 8001502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001506:	2b02      	cmp	r3, #2
 8001508:	d112      	bne.n	8001530 <main+0xf8>
				ASCII_ARRAY[i][j] = R[j];
 800150a:	4a71      	ldr	r2, [pc, #452]	@ (80016d0 <main+0x298>)
 800150c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001510:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001514:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001522:	4413      	add	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	3390      	adds	r3, #144	@ 0x90
 8001528:	443b      	add	r3, r7
 800152a:	460a      	mov	r2, r1
 800152c:	f823 2c8c 	strh.w	r2, [r3, #-140]
			if (i == 3)
 8001530:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001534:	2b03      	cmp	r3, #3
 8001536:	d112      	bne.n	800155e <main+0x126>
				ASCII_ARRAY[i][j] = I[j];
 8001538:	4a66      	ldr	r2, [pc, #408]	@ (80016d4 <main+0x29c>)
 800153a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800153e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001542:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001550:	4413      	add	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	3390      	adds	r3, #144	@ 0x90
 8001556:	443b      	add	r3, r7
 8001558:	460a      	mov	r2, r1
 800155a:	f823 2c8c 	strh.w	r2, [r3, #-140]
			if (i == 4)
 800155e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001562:	2b04      	cmp	r3, #4
 8001564:	d112      	bne.n	800158c <main+0x154>
				ASCII_ARRAY[i][j] = K[j];
 8001566:	4a5c      	ldr	r2, [pc, #368]	@ (80016d8 <main+0x2a0>)
 8001568:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800156c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001570:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	3390      	adds	r3, #144	@ 0x90
 8001584:	443b      	add	r3, r7
 8001586:	460a      	mov	r2, r1
 8001588:	f823 2c8c 	strh.w	r2, [r3, #-140]
			if (i == 5)
 800158c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001590:	2b05      	cmp	r3, #5
 8001592:	d112      	bne.n	80015ba <main+0x182>
				ASCII_ARRAY[i][j] = A[j];
 8001594:	4a51      	ldr	r2, [pc, #324]	@ (80016dc <main+0x2a4>)
 8001596:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800159a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800159e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80015ac:	4413      	add	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	3390      	adds	r3, #144	@ 0x90
 80015b2:	443b      	add	r3, r7
 80015b4:	460a      	mov	r2, r1
 80015b6:	f823 2c8c 	strh.w	r2, [r3, #-140]
			if (i == 6)
 80015ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d112      	bne.n	80015e8 <main+0x1b0>
				ASCII_ARRAY[i][j] = BLANK[j];
 80015c2:	4a41      	ldr	r2, [pc, #260]	@ (80016c8 <main+0x290>)
 80015c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015c8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4413      	add	r3, r2
 80015d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80015da:	4413      	add	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	3390      	adds	r3, #144	@ 0x90
 80015e0:	443b      	add	r3, r7
 80015e2:	460a      	mov	r2, r1
 80015e4:	f823 2c8c 	strh.w	r2, [r3, #-140]
		for (int j = 0; j < 9; j++) {
 80015e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015ec:	3301      	adds	r3, #1
 80015ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	f77f af55 	ble.w	80014a6 <main+0x6e>
	for (int i = 0; i < 7; i++) {
 80015fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001600:	3301      	adds	r3, #1
 8001602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800160a:	2b06      	cmp	r3, #6
 800160c:	f77f af47 	ble.w	800149e <main+0x66>
  {



	  //Every 0.5ms write out the x axis value
		if (timer_flag.flag == TRUE) {
 8001610:	4b2a      	ldr	r3, [pc, #168]	@ (80016bc <main+0x284>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d1f8      	bne.n	8001610 <main+0x1d8>



			for (int i = 0; i < BUFFER_SIZE; i++) {
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001624:	e034      	b.n	8001690 <main+0x258>
				update_motion(readBuffer[i].acc_axes_x,1);
 8001626:	4b2e      	ldr	r3, [pc, #184]	@ (80016e0 <main+0x2a8>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	ed93 7b00 	vldr	d7, [r3]
 8001636:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80016a8 <main+0x270>
 800163a:	eeb0 0a47 	vmov.f32	s0, s14
 800163e:	eef0 0a67 	vmov.f32	s1, s15
 8001642:	f7ff fdab 	bl	800119c <update_motion>
				printf("%f %f %f %d\r\n", readBuffer[i].acc_axes_x, centered_velocity, current_displacement, readBuffer[i].cnt);
 8001646:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <main+0x2a8>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	4413      	add	r3, r2
 8001652:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001656:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <main+0x2ac>)
 8001658:	ed93 7b00 	vldr	d7, [r3]
 800165c:	4922      	ldr	r1, [pc, #136]	@ (80016e8 <main+0x2b0>)
 800165e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001662:	4e1f      	ldr	r6, [pc, #124]	@ (80016e0 <main+0x2a8>)
 8001664:	6836      	ldr	r6, [r6, #0]
 8001666:	4633      	mov	r3, r6
 8001668:	f8d7 6084 	ldr.w	r6, [r7, #132]	@ 0x84
 800166c:	0136      	lsls	r6, r6, #4
 800166e:	441e      	add	r6, r3
 8001670:	68b6      	ldr	r6, [r6, #8]
 8001672:	9604      	str	r6, [sp, #16]
 8001674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001678:	ed8d 7b00 	vstr	d7, [sp]
 800167c:	4622      	mov	r2, r4
 800167e:	462b      	mov	r3, r5
 8001680:	481a      	ldr	r0, [pc, #104]	@ (80016ec <main+0x2b4>)
 8001682:	f005 faed 	bl	8006c60 <iprintf>
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8001686:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800168a:	3301      	adds	r3, #1
 800168c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001690:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001694:	2b63      	cmp	r3, #99	@ 0x63
 8001696:	ddc6      	ble.n	8001626 <main+0x1ee>
			}


			timer_flag.flag = FALSE;
 8001698:	4a08      	ldr	r2, [pc, #32]	@ (80016bc <main+0x284>)
 800169a:	7813      	ldrb	r3, [r2, #0]
 800169c:	f36f 0300 	bfc	r3, #0, #1
 80016a0:	7013      	strb	r3, [r2, #0]
		if (timer_flag.flag == TRUE) {
 80016a2:	e7b5      	b.n	8001610 <main+0x1d8>
 80016a4:	f3af 8000 	nop.w
 80016a8:	00000000 	.word	0x00000000
 80016ac:	3ff00000 	.word	0x3ff00000
 80016b0:	20001034 	.word	0x20001034
 80016b4:	20001038 	.word	0x20001038
 80016b8:	20001098 	.word	0x20001098
 80016bc:	20000398 	.word	0x20000398
 80016c0:	200002c8 	.word	0x200002c8
 80016c4:	20000394 	.word	0x20000394
 80016c8:	2000025c 	.word	0x2000025c
 80016cc:	20000014 	.word	0x20000014
 80016d0:	20000028 	.word	0x20000028
 80016d4:	2000003c 	.word	0x2000003c
 80016d8:	20000050 	.word	0x20000050
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000068 	.word	0x20000068
 80016e4:	20001078 	.word	0x20001078
 80016e8:	20001070 	.word	0x20001070
 80016ec:	08008b70 	.word	0x08008b70

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b094      	sub	sp, #80	@ 0x50
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	2234      	movs	r2, #52	@ 0x34
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f005 fb03 	bl	8006d0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <SystemClock_Config+0xd4>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	4a29      	ldr	r2, [pc, #164]	@ (80017c4 <SystemClock_Config+0xd4>)
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001722:	6413      	str	r3, [r2, #64]	@ 0x40
 8001724:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <SystemClock_Config+0xd4>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001730:	2300      	movs	r3, #0
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	4b24      	ldr	r3, [pc, #144]	@ (80017c8 <SystemClock_Config+0xd8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800173c:	4a22      	ldr	r2, [pc, #136]	@ (80017c8 <SystemClock_Config+0xd8>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <SystemClock_Config+0xd8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001750:	2302      	movs	r3, #2
 8001752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001754:	2301      	movs	r3, #1
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001758:	2310      	movs	r3, #16
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175c:	2302      	movs	r3, #2
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001760:	2300      	movs	r3, #0
 8001762:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001764:	2310      	movs	r3, #16
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001768:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800176c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800176e:	2304      	movs	r3, #4
 8001770:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001772:	2302      	movs	r3, #2
 8001774:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001776:	2302      	movs	r3, #2
 8001778:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fda6 	bl	80042d0 <HAL_RCC_OscConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800178a:	f000 f9e3 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178e:	230f      	movs	r3, #15
 8001790:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001792:	2302      	movs	r3, #2
 8001794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800179a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800179e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	2102      	movs	r1, #2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fa46 	bl	8003c3c <HAL_RCC_ClockConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80017b6:	f000 f9cd 	bl	8001b54 <Error_Handler>
  }
}
 80017ba:	bf00      	nop
 80017bc:	3750      	adds	r7, #80	@ 0x50
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40007000 	.word	0x40007000

080017cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017d2:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <MX_SPI2_Init+0x68>)
 80017d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <MX_SPI2_Init+0x64>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <MX_SPI2_Init+0x64>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <MX_SPI2_Init+0x64>)
 800180c:	2200      	movs	r2, #0
 800180e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <MX_SPI2_Init+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_SPI2_Init+0x64>)
 8001818:	220a      	movs	r2, #10
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_SPI2_Init+0x64>)
 800181e:	f002 fff5 	bl	800480c <HAL_SPI_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001828:	f000 f994 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000270 	.word	0x20000270
 8001834:	40003800 	.word	0x40003800

08001838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001854:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <MX_TIM2_Init+0x94>)
 8001856:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800185a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1050-1;
 800185c:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <MX_TIM2_Init+0x94>)
 800185e:	f240 4219 	movw	r2, #1049	@ 0x419
 8001862:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001864:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <MX_TIM2_Init+0x94>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <MX_TIM2_Init+0x94>)
 800186c:	2209      	movs	r2, #9
 800186e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001870:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <MX_TIM2_Init+0x94>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <MX_TIM2_Init+0x94>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800187c:	4813      	ldr	r0, [pc, #76]	@ (80018cc <MX_TIM2_Init+0x94>)
 800187e:	f003 fc53 	bl	8005128 <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001888:	f000 f964 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	4619      	mov	r1, r3
 8001898:	480c      	ldr	r0, [pc, #48]	@ (80018cc <MX_TIM2_Init+0x94>)
 800189a:	f003 fdf5 	bl	8005488 <HAL_TIM_ConfigClockSource>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018a4:	f000 f956 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	@ (80018cc <MX_TIM2_Init+0x94>)
 80018b6:	f004 f81d 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018c0:	f000 f948 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200002c8 	.word	0x200002c8

080018d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_USART2_UART_Init+0x4c>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <MX_USART2_UART_Init+0x50>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <MX_USART2_UART_Init+0x4c>)
 80018dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <MX_USART2_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MX_USART2_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <MX_USART2_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_USART2_UART_Init+0x4c>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <MX_USART2_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_USART2_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	@ (800191c <MX_USART2_UART_Init+0x4c>)
 8001908:	f004 f884 	bl	8005a14 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001912:	f000 f91f 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000310 	.word	0x20000310
 8001920:	40004400 	.word	0x40004400

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b42      	ldr	r3, [pc, #264]	@ (8001a48 <MX_GPIO_Init+0x124>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a41      	ldr	r2, [pc, #260]	@ (8001a48 <MX_GPIO_Init+0x124>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a48 <MX_GPIO_Init+0x124>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <MX_GPIO_Init+0x124>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a48 <MX_GPIO_Init+0x124>)
 8001960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b38      	ldr	r3, [pc, #224]	@ (8001a48 <MX_GPIO_Init+0x124>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	4b34      	ldr	r3, [pc, #208]	@ (8001a48 <MX_GPIO_Init+0x124>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a33      	ldr	r2, [pc, #204]	@ (8001a48 <MX_GPIO_Init+0x124>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b31      	ldr	r3, [pc, #196]	@ (8001a48 <MX_GPIO_Init+0x124>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <MX_GPIO_Init+0x124>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a2c      	ldr	r2, [pc, #176]	@ (8001a48 <MX_GPIO_Init+0x124>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <MX_GPIO_Init+0x124>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2110      	movs	r1, #16
 80019ae:	4827      	ldr	r0, [pc, #156]	@ (8001a4c <MX_GPIO_Init+0x128>)
 80019b0:	f002 f912 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_LE_Pin|LED_OE_Pin, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2106      	movs	r1, #6
 80019b8:	4825      	ldr	r0, [pc, #148]	@ (8001a50 <MX_GPIO_Init+0x12c>)
 80019ba:	f002 f90d 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	481f      	ldr	r0, [pc, #124]	@ (8001a54 <MX_GPIO_Init+0x130>)
 80019d6:	f001 fe77 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019da:	2310      	movs	r3, #16
 80019dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	4816      	ldr	r0, [pc, #88]	@ (8001a4c <MX_GPIO_Init+0x128>)
 80019f2:	f001 fe69 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LE_Pin LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_LE_Pin|LED_OE_Pin;
 80019f6:	2306      	movs	r3, #6
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4810      	ldr	r0, [pc, #64]	@ (8001a50 <MX_GPIO_Init+0x12c>)
 8001a0e:	f001 fe5b 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_INT1_EXTI11_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_INT1_EXTI11_Pin;
 8001a12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6DSL_INT1_EXTI11_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	480a      	ldr	r0, [pc, #40]	@ (8001a54 <MX_GPIO_Init+0x130>)
 8001a2a:	f001 fe4d 	bl	80036c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2028      	movs	r0, #40	@ 0x28
 8001a34:	f001 fe11 	bl	800365a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a38:	2028      	movs	r0, #40	@ 0x28
 8001a3a:	f001 fe2a 	bl	8003692 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	@ 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40020800 	.word	0x40020800

08001a58 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	@ 0x30
 8001a5c:	af00      	add	r7, sp, #0
  uint8_t id ;
  LSM6DSL_AxesRaw_t axes;
  float odr;

  /* Link I2C functions to the LSM6DSL driver */
	io_ctx.BusType = LSM6DSL_SPI_4WIRES_BUS;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	61bb      	str	r3, [r7, #24]
	io_ctx.Address = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	773b      	strb	r3, [r7, #28]
	io_ctx.Init = BSP_SPI1_Init;
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <MEMS_Init+0x88>)
 8001a68:	613b      	str	r3, [r7, #16]
	io_ctx.DeInit = BSP_SPI1_DeInit;
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <MEMS_Init+0x8c>)
 8001a6c:	617b      	str	r3, [r7, #20]
	io_ctx.ReadReg = wrap_platform_read;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <MEMS_Init+0x90>)
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
	io_ctx.WriteReg = wrap_platform_write;
 8001a72:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <MEMS_Init+0x94>)
 8001a74:	623b      	str	r3, [r7, #32]
	io_ctx.GetTick = BSP_GetTick;
 8001a76:	4b1e      	ldr	r3, [pc, #120]	@ (8001af0 <MEMS_Init+0x98>)
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
	LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481c      	ldr	r0, [pc, #112]	@ (8001af4 <MEMS_Init+0x9c>)
 8001a82:	f000 fbe3 	bl	800224c <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 8001a86:	f107 030f 	add.w	r3, r7, #15
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4819      	ldr	r0, [pc, #100]	@ (8001af4 <MEMS_Init+0x9c>)
 8001a8e:	f000 fcb0 	bl	80023f2 <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	2b6a      	cmp	r3, #106	@ 0x6a
 8001a96:	d001      	beq.n	8001a9c <MEMS_Init+0x44>
    Error_Handler();
 8001a98:	f000 f85c 	bl	8001b54 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 8001a9c:	4815      	ldr	r0, [pc, #84]	@ (8001af4 <MEMS_Init+0x9c>)
 8001a9e:	f000 fc3f 	bl	8002320 <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 3330.0f); /* 26 Hz */
 8001aa2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001af8 <MEMS_Init+0xa0>
 8001aa6:	4813      	ldr	r0, [pc, #76]	@ (8001af4 <MEMS_Init+0x9c>)
 8001aa8:	f000 fda8 	bl	80025fc <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 8);          /* [-4000mg; +4000mg]  old*/
 8001aac:	2108      	movs	r1, #8
 8001aae:	4811      	ldr	r0, [pc, #68]	@ (8001af4 <MEMS_Init+0x9c>)
 8001ab0:	f000 fdc0 	bl	8002634 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	480f      	ldr	r0, [pc, #60]	@ (8001af4 <MEMS_Init+0x9c>)
 8001ab8:	f000 fe7a 	bl	80027b0 <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <MEMS_Init+0x9c>)
 8001ac4:	f000 fdde 	bl	8002684 <LSM6DSL_ACC_GetAxesRaw>



  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 8001ac8:	480a      	ldr	r0, [pc, #40]	@ (8001af4 <MEMS_Init+0x9c>)
 8001aca:	f000 fca8 	bl	800241e <LSM6DSL_ACC_Enable>

  LSM6DSL_ACC_GetOutputDataRate(&MotionSensor, &odr);
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4808      	ldr	r0, [pc, #32]	@ (8001af4 <MEMS_Init+0x9c>)
 8001ad4:	f000 fd0e 	bl	80024f4 <LSM6DSL_ACC_GetOutputDataRate>
}
 8001ad8:	bf00      	nop
 8001ada:	3730      	adds	r7, #48	@ 0x30
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	08001de5 	.word	0x08001de5
 8001ae4:	08001e45 	.word	0x08001e45
 8001ae8:	08000f6d 	.word	0x08000f6d
 8001aec:	08000fc5 	.word	0x08000fc5
 8001af0:	08001f0d 	.word	0x08001f0d
 8001af4:	20000358 	.word	0x20000358
 8001af8:	45502000 	.word	0x45502000

08001afc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b0c:	d104      	bne.n	8001b18 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_GPIO_EXTI_Callback+0x28>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3301      	adds	r3, #1
 8001b14:	4a03      	ldr	r2, [pc, #12]	@ (8001b24 <HAL_GPIO_EXTI_Callback+0x28>)
 8001b16:	6013      	str	r3, [r2, #0]
  }
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	20000390 	.word	0x20000390

08001b28 <_write>:

int _write(int fd, char * ptr, int len)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	4804      	ldr	r0, [pc, #16]	@ (8001b50 <_write+0x28>)
 8001b40:	f003 ffb8 	bl	8005ab4 <HAL_UART_Transmit>
  return len;
 8001b44:	687b      	ldr	r3, [r7, #4]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000310 	.word	0x20000310

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <Error_Handler+0x8>

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	4a08      	ldr	r2, [pc, #32]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b9e:	2007      	movs	r0, #7
 8001ba0:	f001 fd50 	bl	8003644 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	@ (8001c34 <HAL_SPI_MspInit+0x84>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12c      	bne.n	8001c2c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <HAL_SPI_MspInit+0x88>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	4a17      	ldr	r2, [pc, #92]	@ (8001c38 <HAL_SPI_MspInit+0x88>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_SPI_MspInit+0x88>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_SPI_MspInit+0x88>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	4a10      	ldr	r2, [pc, #64]	@ (8001c38 <HAL_SPI_MspInit+0x88>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <HAL_SPI_MspInit+0x88>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c0a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c1c:	2305      	movs	r3, #5
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <HAL_SPI_MspInit+0x8c>)
 8001c28:	f001 fd4e 	bl	80036c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	@ 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40003800 	.word	0x40003800
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020400 	.word	0x40020400

08001c40 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a08      	ldr	r2, [pc, #32]	@ (8001c70 <HAL_SPI_MspDeInit+0x30>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10a      	bne.n	8001c68 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <HAL_SPI_MspDeInit+0x34>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	4a07      	ldr	r2, [pc, #28]	@ (8001c74 <HAL_SPI_MspDeInit+0x34>)
 8001c58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 8001c5e:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8001c62:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <HAL_SPI_MspDeInit+0x38>)
 8001c64:	f001 fec4 	bl	80039f0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40003800 	.word	0x40003800
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020400 	.word	0x40020400

08001c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8c:	d115      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x48>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x48>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9e:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x48>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	201c      	movs	r0, #28
 8001cb0:	f001 fcd3 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cb4:	201c      	movs	r0, #28
 8001cb6:	f001 fcec 	bl	8003692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	@ (8001d4c <HAL_UART_MspInit+0x84>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d12b      	bne.n	8001d42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <HAL_UART_MspInit+0x88>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <HAL_UART_MspInit+0x88>)
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <HAL_UART_MspInit+0x88>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_UART_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4a10      	ldr	r2, [pc, #64]	@ (8001d50 <HAL_UART_MspInit+0x88>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <HAL_UART_MspInit+0x88>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d22:	230c      	movs	r3, #12
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d32:	2307      	movs	r3, #7
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <HAL_UART_MspInit+0x8c>)
 8001d3e:	f001 fcc3 	bl	80036c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	@ 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40004400 	.word	0x40004400
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020000 	.word	0x40020000

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <NMI_Handler+0x4>

08001d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <MemManage_Handler+0x4>

08001d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <BusFault_Handler+0x4>

08001d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <UsageFault_Handler+0x4>

08001d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dae:	f001 fb35 	bl	800341c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <TIM2_IRQHandler+0x10>)
 8001dbe:	f003 fa73 	bl	80052a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200002c8 	.word	0x200002c8

08001dcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001dd0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001dd4:	f001 ff1a 	bl	8003c0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001dd8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ddc:	f001 ff16 	bl	8003c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8001dee:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <BSP_SPI1_Init+0x54>)
 8001df0:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <BSP_SPI1_Init+0x58>)
 8001df2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <BSP_SPI1_Init+0x5c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	4911      	ldr	r1, [pc, #68]	@ (8001e40 <BSP_SPI1_Init+0x5c>)
 8001dfc:	600a      	str	r2, [r1, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d114      	bne.n	8001e2c <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001e02:	480d      	ldr	r0, [pc, #52]	@ (8001e38 <BSP_SPI1_Init+0x54>)
 8001e04:	f003 f8a6 	bl	8004f54 <HAL_SPI_GetState>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10e      	bne.n	8001e2c <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001e0e:	480a      	ldr	r0, [pc, #40]	@ (8001e38 <BSP_SPI1_Init+0x54>)
 8001e10:	f000 f8c0 	bl	8001f94 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d108      	bne.n	8001e2c <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001e1a:	4807      	ldr	r0, [pc, #28]	@ (8001e38 <BSP_SPI1_Init+0x54>)
 8001e1c:	f000 f87e 	bl	8001f1c <MX_SPI1_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001e26:	f06f 0307 	mvn.w	r3, #7
 8001e2a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200010a0 	.word	0x200010a0
 8001e3c:	40013000 	.word	0x40013000
 8001e40:	200010f8 	.word	0x200010f8

08001e44 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8001e4a:	f06f 0307 	mvn.w	r3, #7
 8001e4e:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 8001e50:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <BSP_SPI1_DeInit+0x48>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <BSP_SPI1_DeInit+0x48>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e8c <BSP_SPI1_DeInit+0x48>)
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <BSP_SPI1_DeInit+0x48>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10a      	bne.n	8001e80 <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 8001e6a:	4809      	ldr	r0, [pc, #36]	@ (8001e90 <BSP_SPI1_DeInit+0x4c>)
 8001e6c:	f000 f8ea 	bl	8002044 <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8001e70:	4807      	ldr	r0, [pc, #28]	@ (8001e90 <BSP_SPI1_DeInit+0x4c>)
 8001e72:	f002 fd54 	bl	800491e <HAL_SPI_DeInit>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001e80:	687b      	ldr	r3, [r7, #4]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200010f8 	.word	0x200010f8
 8001e90:	200010a0 	.word	0x200010a0

08001e94 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001ea4:	887a      	ldrh	r2, [r7, #2]
 8001ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4806      	ldr	r0, [pc, #24]	@ (8001ec8 <BSP_SPI1_Send+0x34>)
 8001eae:	f002 fd5e 	bl	800496e <HAL_SPI_Transmit>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001eb8:	f06f 0305 	mvn.w	r3, #5
 8001ebc:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200010a0 	.word	0x200010a0

08001ecc <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ee4:	9200      	str	r2, [sp, #0]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	4807      	ldr	r0, [pc, #28]	@ (8001f08 <BSP_SPI1_SendRecv+0x3c>)
 8001eec:	f002 fe82 	bl	8004bf4 <HAL_SPI_TransmitReceive>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001ef6:	f06f 0305 	mvn.w	r3, #5
 8001efa:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001efc:	697b      	ldr	r3, [r7, #20]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200010a0 	.word	0x200010a0

08001f0c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001f10:	f001 fa98 	bl	8003444 <HAL_GetTick>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a19      	ldr	r2, [pc, #100]	@ (8001f90 <MX_SPI1_Init+0x74>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f34:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f54:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2218      	movs	r2, #24
 8001f5a:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	220a      	movs	r2, #10
 8001f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f002 fc49 	bl	800480c <HAL_SPI_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40013000 	.word	0x40013000

08001f94 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	@ 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	4b26      	ldr	r3, [pc, #152]	@ (800203c <SPI1_MspInit+0xa8>)
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa4:	4a25      	ldr	r2, [pc, #148]	@ (800203c <SPI1_MspInit+0xa8>)
 8001fa6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001faa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fac:	4b23      	ldr	r3, [pc, #140]	@ (800203c <SPI1_MspInit+0xa8>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <SPI1_MspInit+0xa8>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800203c <SPI1_MspInit+0xa8>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800203c <SPI1_MspInit+0xa8>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001fe4:	2305      	movs	r3, #5
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	4814      	ldr	r0, [pc, #80]	@ (8002040 <SPI1_MspInit+0xac>)
 8001ff0:	f001 fb6a 	bl	80036c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001ff4:	2340      	movs	r3, #64	@ 0x40
 8001ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002004:	2305      	movs	r3, #5
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	480c      	ldr	r0, [pc, #48]	@ (8002040 <SPI1_MspInit+0xac>)
 8002010:	f001 fb5a 	bl	80036c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002024:	2305      	movs	r3, #5
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4804      	ldr	r0, [pc, #16]	@ (8002040 <SPI1_MspInit+0xac>)
 8002030:	f001 fb4a 	bl	80036c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8002034:	bf00      	nop
 8002036:	3728      	adds	r7, #40	@ 0x28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	40020000 	.word	0x40020000

08002044 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800204c:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <SPI1_MspDeInit+0x34>)
 800204e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002050:	4a09      	ldr	r2, [pc, #36]	@ (8002078 <SPI1_MspDeInit+0x34>)
 8002052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002056:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 8002058:	2120      	movs	r1, #32
 800205a:	4808      	ldr	r0, [pc, #32]	@ (800207c <SPI1_MspDeInit+0x38>)
 800205c:	f001 fcc8 	bl	80039f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8002060:	2140      	movs	r1, #64	@ 0x40
 8002062:	4806      	ldr	r0, [pc, #24]	@ (800207c <SPI1_MspDeInit+0x38>)
 8002064:	f001 fcc4 	bl	80039f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	4804      	ldr	r0, [pc, #16]	@ (800207c <SPI1_MspDeInit+0x38>)
 800206c:	f001 fcc0 	bl	80039f0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000

08002080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return 1;
 8002084:	2301      	movs	r3, #1
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_kill>:

int _kill(int pid, int sig)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800209a:	f004 fe89 	bl	8006db0 <__errno>
 800209e:	4603      	mov	r3, r0
 80020a0:	2216      	movs	r2, #22
 80020a2:	601a      	str	r2, [r3, #0]
  return -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_exit>:

void _exit (int status)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ffe7 	bl	8002090 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020c2:	bf00      	nop
 80020c4:	e7fd      	b.n	80020c2 <_exit+0x12>

080020c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e00a      	b.n	80020ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d8:	f3af 8000 	nop.w
 80020dc:	4601      	mov	r1, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	60ba      	str	r2, [r7, #8]
 80020e4:	b2ca      	uxtb	r2, r1
 80020e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3301      	adds	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	dbf0      	blt.n	80020d8 <_read+0x12>
  }

  return len;
 80020f6:	687b      	ldr	r3, [r7, #4]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002128:	605a      	str	r2, [r3, #4]
  return 0;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_isatty>:

int _isatty(int file)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002170:	4a14      	ldr	r2, [pc, #80]	@ (80021c4 <_sbrk+0x5c>)
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <_sbrk+0x60>)
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800217c:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <_sbrk+0x64>)
 8002186:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <_sbrk+0x68>)
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218a:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	429a      	cmp	r2, r3
 8002196:	d207      	bcs.n	80021a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002198:	f004 fe0a 	bl	8006db0 <__errno>
 800219c:	4603      	mov	r3, r0
 800219e:	220c      	movs	r2, #12
 80021a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	e009      	b.n	80021bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	4a05      	ldr	r2, [pc, #20]	@ (80021cc <_sbrk+0x64>)
 80021b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20020000 	.word	0x20020000
 80021c8:	00000400 	.word	0x00000400
 80021cc:	200010fc 	.word	0x200010fc
 80021d0:	20001250 	.word	0x20001250

080021d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <SystemInit+0x20>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021de:	4a05      	ldr	r2, [pc, #20]	@ (80021f4 <SystemInit+0x20>)
 80021e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002230 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021fc:	f7ff ffea 	bl	80021d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002200:	480c      	ldr	r0, [pc, #48]	@ (8002234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002202:	490d      	ldr	r1, [pc, #52]	@ (8002238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002204:	4a0d      	ldr	r2, [pc, #52]	@ (800223c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002208:	e002      	b.n	8002210 <LoopCopyDataInit>

0800220a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800220c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220e:	3304      	adds	r3, #4

08002210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002214:	d3f9      	bcc.n	800220a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002216:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002218:	4c0a      	ldr	r4, [pc, #40]	@ (8002244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800221c:	e001      	b.n	8002222 <LoopFillZerobss>

0800221e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002220:	3204      	adds	r2, #4

08002222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002224:	d3fb      	bcc.n	800221e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002226:	f004 fdc9 	bl	8006dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800222a:	f7ff f905 	bl	8001438 <main>
  bx  lr    
 800222e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002238:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800223c:	08008f18 	.word	0x08008f18
  ldr r2, =_sbss
 8002240:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8002244:	20001250 	.word	0x20001250

08002248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC_IRQHandler>
	...

0800224c <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e051      	b.n	800230c <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	7b1a      	ldrb	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002318 <LSM6DSL_RegisterBusIO+0xcc>)
 80022a4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1c      	ldr	r2, [pc, #112]	@ (800231c <LSM6DSL_RegisterBusIO+0xd0>)
 80022aa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e020      	b.n	800230c <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4798      	blx	r3
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e016      	b.n	800230c <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d112      	bne.n	800230c <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10d      	bne.n	800230c <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80022f0:	230c      	movs	r3, #12
 80022f2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	461a      	mov	r2, r3
 80022f8:	2112      	movs	r1, #18
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fa3d 	bl	800277a <LSM6DSL_Write_Reg>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800230c:	68fb      	ldr	r3, [r7, #12]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	08002a35 	.word	0x08002a35
 800231c:	08002a6b 	.word	0x08002a6b

08002320 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3320      	adds	r3, #32
 800232c:	2101      	movs	r1, #1
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fd9d 	bl	8002e6e <lsm6dsl_auto_increment_set>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	e054      	b.n	80023ea <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3320      	adds	r3, #32
 8002344:	2101      	movs	r1, #1
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fd12 	bl	8002d70 <lsm6dsl_block_data_update_set>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
 8002356:	e048      	b.n	80023ea <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3320      	adds	r3, #32
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f000 ffe4 	bl	800332c <lsm6dsl_fifo_mode_set>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	e03c      	b.n	80023ea <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2204      	movs	r2, #4
 8002374:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3320      	adds	r3, #32
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fc1c 	bl	8002bbc <lsm6dsl_xl_data_rate_set>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	e02c      	b.n	80023ea <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3320      	adds	r3, #32
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fbb2 	bl	8002b00 <lsm6dsl_xl_full_scale_set>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e020      	b.n	80023ea <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2204      	movs	r2, #4
 80023ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3320      	adds	r3, #32
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fcb4 	bl	8002d24 <lsm6dsl_gy_data_rate_set>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	e010      	b.n	80023ea <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3320      	adds	r3, #32
 80023cc:	2106      	movs	r1, #6
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fc82 	bl	8002cd8 <lsm6dsl_gy_full_scale_set>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	e004      	b.n	80023ea <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3320      	adds	r3, #32
 8002400:	6839      	ldr	r1, [r7, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fd22 	bl	8002e4c <lsm6dsl_device_id_get>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	e000      	b.n	8002416 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e014      	b.n	800245e <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f103 0220 	add.w	r2, r3, #32
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f000 fbba 	bl	8002bbc <lsm6dsl_xl_data_rate_set>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
 8002452:	e004      	b.n	800245e <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3320      	adds	r3, #32
 800247a:	f107 020b 	add.w	r2, r7, #11
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fb63 	bl	8002b4c <lsm6dsl_xl_full_scale_get>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800248c:	f04f 33ff 	mov.w	r3, #4294967295
 8002490:	e023      	b.n	80024da <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002492:	7afb      	ldrb	r3, [r7, #11]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d81b      	bhi.n	80024d0 <LSM6DSL_ACC_GetSensitivity+0x68>
 8002498:	a201      	add	r2, pc, #4	@ (adr r2, 80024a0 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800249a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249e:	bf00      	nop
 80024a0:	080024b1 	.word	0x080024b1
 80024a4:	080024c9 	.word	0x080024c9
 80024a8:	080024b9 	.word	0x080024b9
 80024ac:	080024c1 	.word	0x080024c1
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4a0c      	ldr	r2, [pc, #48]	@ (80024e4 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 80024b4:	601a      	str	r2, [r3, #0]
      break;
 80024b6:	e00f      	b.n	80024d8 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4a0b      	ldr	r2, [pc, #44]	@ (80024e8 <LSM6DSL_ACC_GetSensitivity+0x80>)
 80024bc:	601a      	str	r2, [r3, #0]
      break;
 80024be:	e00b      	b.n	80024d8 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <LSM6DSL_ACC_GetSensitivity+0x84>)
 80024c4:	601a      	str	r2, [r3, #0]
      break;
 80024c6:	e007      	b.n	80024d8 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <LSM6DSL_ACC_GetSensitivity+0x88>)
 80024cc:	601a      	str	r2, [r3, #0]
      break;
 80024ce:	e003      	b.n	80024d8 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
 80024d4:	60fb      	str	r3, [r7, #12]
      break;
 80024d6:	bf00      	nop
  }

  return ret;
 80024d8:	68fb      	ldr	r3, [r7, #12]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	3d79db23 	.word	0x3d79db23
 80024e8:	3df9db23 	.word	0x3df9db23
 80024ec:	3e79db23 	.word	0x3e79db23
 80024f0:	3ef9db23 	.word	0x3ef9db23

080024f4 <LSM6DSL_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3320      	adds	r3, #32
 8002506:	f107 020b 	add.w	r2, r7, #11
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fb7b 	bl	8002c08 <lsm6dsl_xl_data_rate_get>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
 800251c:	e054      	b.n	80025c8 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	2b0b      	cmp	r3, #11
 8002522:	d84c      	bhi.n	80025be <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8002524:	a201      	add	r2, pc, #4	@ (adr r2, 800252c <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8002526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252a:	bf00      	nop
 800252c:	0800255d 	.word	0x0800255d
 8002530:	0800256f 	.word	0x0800256f
 8002534:	08002577 	.word	0x08002577
 8002538:	0800257f 	.word	0x0800257f
 800253c:	08002587 	.word	0x08002587
 8002540:	0800258f 	.word	0x0800258f
 8002544:	08002597 	.word	0x08002597
 8002548:	0800259f 	.word	0x0800259f
 800254c:	080025a7 	.word	0x080025a7
 8002550:	080025af 	.word	0x080025af
 8002554:	080025b7 	.word	0x080025b7
 8002558:	08002567 	.word	0x08002567
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
      break;
 8002564:	e02f      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	4a19      	ldr	r2, [pc, #100]	@ (80025d0 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 800256a:	601a      	str	r2, [r3, #0]
      break;
 800256c:	e02b      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	4a18      	ldr	r2, [pc, #96]	@ (80025d4 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8002572:	601a      	str	r2, [r3, #0]
      break;
 8002574:	e027      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 800257a:	601a      	str	r2, [r3, #0]
      break;
 800257c:	e023      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	4a16      	ldr	r2, [pc, #88]	@ (80025dc <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8002582:	601a      	str	r2, [r3, #0]
      break;
 8002584:	e01f      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	4a15      	ldr	r2, [pc, #84]	@ (80025e0 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 800258a:	601a      	str	r2, [r3, #0]
      break;
 800258c:	e01b      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	4a14      	ldr	r2, [pc, #80]	@ (80025e4 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8002592:	601a      	str	r2, [r3, #0]
      break;
 8002594:	e017      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	4a13      	ldr	r2, [pc, #76]	@ (80025e8 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 800259a:	601a      	str	r2, [r3, #0]
      break;
 800259c:	e013      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 80025a2:	601a      	str	r2, [r3, #0]
      break;
 80025a4:	e00f      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	4a11      	ldr	r2, [pc, #68]	@ (80025f0 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 80025aa:	601a      	str	r2, [r3, #0]
      break;
 80025ac:	e00b      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	4a10      	ldr	r2, [pc, #64]	@ (80025f4 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 80025b2:	601a      	str	r2, [r3, #0]
      break;
 80025b4:	e007      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	4a0f      	ldr	r2, [pc, #60]	@ (80025f8 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 80025ba:	601a      	str	r2, [r3, #0]
      break;
 80025bc:	e003      	b.n	80025c6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	60fb      	str	r3, [r7, #12]
      break;
 80025c4:	bf00      	nop
  }

  return ret;
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	3fcccccd 	.word	0x3fcccccd
 80025d4:	41480000 	.word	0x41480000
 80025d8:	41d00000 	.word	0x41d00000
 80025dc:	42500000 	.word	0x42500000
 80025e0:	42d00000 	.word	0x42d00000
 80025e4:	43500000 	.word	0x43500000
 80025e8:	43d00000 	.word	0x43d00000
 80025ec:	44504000 	.word	0x44504000
 80025f0:	44cf8000 	.word	0x44cf8000
 80025f4:	45502000 	.word	0x45502000
 80025f8:	45d02000 	.word	0x45d02000

080025fc <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800260e:	2b01      	cmp	r3, #1
 8002610:	d106      	bne.n	8002620 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002612:	ed97 0a00 	vldr	s0, [r7]
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8fe 	bl	8002818 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800261c:	4603      	mov	r3, r0
 800261e:	e005      	b.n	800262c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002620:	ed97 0a00 	vldr	s0, [r7]
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f983 	bl	8002930 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800262a:	4603      	mov	r3, r0
  }
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b02      	cmp	r3, #2
 8002642:	dd0b      	ble.n	800265c <LSM6DSL_ACC_SetFullScale+0x28>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b04      	cmp	r3, #4
 8002648:	dd06      	ble.n	8002658 <LSM6DSL_ACC_SetFullScale+0x24>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b08      	cmp	r3, #8
 800264e:	dc01      	bgt.n	8002654 <LSM6DSL_ACC_SetFullScale+0x20>
 8002650:	2303      	movs	r3, #3
 8002652:	e004      	b.n	800265e <LSM6DSL_ACC_SetFullScale+0x2a>
 8002654:	2301      	movs	r3, #1
 8002656:	e002      	b.n	800265e <LSM6DSL_ACC_SetFullScale+0x2a>
 8002658:	2302      	movs	r3, #2
 800265a:	e000      	b.n	800265e <LSM6DSL_ACC_SetFullScale+0x2a>
 800265c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800265e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3320      	adds	r3, #32
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fa49 	bl	8002b00 <lsm6dsl_xl_full_scale_set>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	e000      	b.n	800267c <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3320      	adds	r3, #32
 8002692:	f107 0208 	add.w	r2, r7, #8
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fb8f 	bl	8002dbc <lsm6dsl_acceleration_raw_get>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	e00c      	b.n	80026c4 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80026aa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80026b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80026ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3320      	adds	r3, #32
 80026e0:	f107 0210 	add.w	r2, r7, #16
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fb68 	bl	8002dbc <lsm6dsl_acceleration_raw_get>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e03c      	b.n	8002772 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff feb2 	bl	8002468 <LSM6DSL_ACC_GetSensitivity>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	e030      	b.n	8002772 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002710:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002714:	ee07 3a90 	vmov	s15, r3
 8002718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800271c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002728:	ee17 2a90 	vmov	r2, s15
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002730:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800273c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002748:	ee17 2a90 	vmov	r2, s15
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002750:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002754:	ee07 3a90 	vmov	s15, r3
 8002758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800275c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002768:	ee17 2a90 	vmov	r2, s15
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	70fb      	strb	r3, [r7, #3]
 8002786:	4613      	mov	r3, r2
 8002788:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f103 0020 	add.w	r0, r3, #32
 8002790:	1cba      	adds	r2, r7, #2
 8002792:	78f9      	ldrb	r1, [r7, #3]
 8002794:	2301      	movs	r3, #1
 8002796:	f000 f99b 	bl	8002ad0 <lsm6dsl_write_reg>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	e000      	b.n	80027a8 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3320      	adds	r3, #32
 80027c0:	f107 020c 	add.w	r2, r7, #12
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fcda 	bl	8003180 <lsm6dsl_pin_int1_route_get>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	e01b      	b.n	8002810 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d811      	bhi.n	8002802 <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	7b3b      	ldrb	r3, [r7, #12]
 80027e8:	f362 0300 	bfi	r3, r2, #0, #1
 80027ec:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3320      	adds	r3, #32
 80027f2:	68f9      	ldr	r1, [r7, #12]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fb60 	bl	8002eba <lsm6dsl_pin_int1_route_set>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8002800:	e002      	b.n	8002808 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e003      	b.n	8002810 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	e000      	b.n	8002810 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002824:	edd7 7a00 	vldr	s15, [r7]
 8002828:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800282c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002834:	d801      	bhi.n	800283a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8002836:	2301      	movs	r3, #1
 8002838:	e058      	b.n	80028ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800283a:	edd7 7a00 	vldr	s15, [r7]
 800283e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8002842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	d801      	bhi.n	8002850 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 800284c:	2302      	movs	r3, #2
 800284e:	e04d      	b.n	80028ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002850:	edd7 7a00 	vldr	s15, [r7]
 8002854:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002914 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8002858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002860:	d801      	bhi.n	8002866 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002862:	2303      	movs	r3, #3
 8002864:	e042      	b.n	80028ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002866:	edd7 7a00 	vldr	s15, [r7]
 800286a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002918 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800286e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002876:	d801      	bhi.n	800287c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002878:	2304      	movs	r3, #4
 800287a:	e037      	b.n	80028ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800287c:	edd7 7a00 	vldr	s15, [r7]
 8002880:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800291c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288c:	d801      	bhi.n	8002892 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800288e:	2305      	movs	r3, #5
 8002890:	e02c      	b.n	80028ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002892:	edd7 7a00 	vldr	s15, [r7]
 8002896:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002920 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800289a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a2:	d801      	bhi.n	80028a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80028a4:	2306      	movs	r3, #6
 80028a6:	e021      	b.n	80028ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80028a8:	edd7 7a00 	vldr	s15, [r7]
 80028ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002924 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80028b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b8:	d801      	bhi.n	80028be <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80028ba:	2307      	movs	r3, #7
 80028bc:	e016      	b.n	80028ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80028be:	edd7 7a00 	vldr	s15, [r7]
 80028c2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002928 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80028c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ce:	d801      	bhi.n	80028d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80028d0:	2308      	movs	r3, #8
 80028d2:	e00b      	b.n	80028ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80028d4:	edd7 7a00 	vldr	s15, [r7]
 80028d8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800292c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80028dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e4:	d801      	bhi.n	80028ea <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80028e6:	2309      	movs	r3, #9
 80028e8:	e000      	b.n	80028ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80028ea:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80028ec:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3320      	adds	r3, #32
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f960 	bl	8002bbc <lsm6dsl_xl_data_rate_set>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	e000      	b.n	800290a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	42500000 	.word	0x42500000
 8002918:	42d00000 	.word	0x42d00000
 800291c:	43500000 	.word	0x43500000
 8002920:	43d00000 	.word	0x43d00000
 8002924:	44504000 	.word	0x44504000
 8002928:	44cf8000 	.word	0x44cf8000
 800292c:	45502000 	.word	0x45502000

08002930 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800293c:	edd7 7a00 	vldr	s15, [r7]
 8002940:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	d801      	bhi.n	8002952 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800294e:	2301      	movs	r3, #1
 8002950:	e058      	b.n	8002a04 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002952:	edd7 7a00 	vldr	s15, [r7]
 8002956:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800295a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800295e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002962:	d801      	bhi.n	8002968 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002964:	2302      	movs	r3, #2
 8002966:	e04d      	b.n	8002a04 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002968:	edd7 7a00 	vldr	s15, [r7]
 800296c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002a18 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002978:	d801      	bhi.n	800297e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800297a:	2303      	movs	r3, #3
 800297c:	e042      	b.n	8002a04 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800297e:	edd7 7a00 	vldr	s15, [r7]
 8002982:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002a1c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8002986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298e:	d801      	bhi.n	8002994 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002990:	2304      	movs	r3, #4
 8002992:	e037      	b.n	8002a04 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002994:	edd7 7a00 	vldr	s15, [r7]
 8002998:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002a20 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800299c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a4:	d801      	bhi.n	80029aa <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e02c      	b.n	8002a04 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80029aa:	edd7 7a00 	vldr	s15, [r7]
 80029ae:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002a24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80029b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	d801      	bhi.n	80029c0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80029bc:	2306      	movs	r3, #6
 80029be:	e021      	b.n	8002a04 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80029c0:	edd7 7a00 	vldr	s15, [r7]
 80029c4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002a28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80029c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	d801      	bhi.n	80029d6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80029d2:	2307      	movs	r3, #7
 80029d4:	e016      	b.n	8002a04 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80029d6:	edd7 7a00 	vldr	s15, [r7]
 80029da:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002a2c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80029de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e6:	d801      	bhi.n	80029ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80029e8:	2308      	movs	r3, #8
 80029ea:	e00b      	b.n	8002a04 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80029ec:	edd7 7a00 	vldr	s15, [r7]
 80029f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002a30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80029f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	d801      	bhi.n	8002a02 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80029fe:	2309      	movs	r3, #9
 8002a00:	e000      	b.n	8002a04 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002a02:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	42500000 	.word	0x42500000
 8002a1c:	42d00000 	.word	0x42d00000
 8002a20:	43500000 	.word	0x43500000
 8002a24:	43d00000 	.word	0x43d00000
 8002a28:	44504000 	.word	0x44504000
 8002a2c:	44cf8000 	.word	0x44cf8000
 8002a30:	45502000 	.word	0x45502000

08002a34 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	72fb      	strb	r3, [r7, #11]
 8002a44:	4613      	mov	r3, r2
 8002a46:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	695c      	ldr	r4, [r3, #20]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	7b1b      	ldrb	r3, [r3, #12]
 8002a54:	4618      	mov	r0, r3
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	b299      	uxth	r1, r3
 8002a5a:	893b      	ldrh	r3, [r7, #8]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	47a0      	blx	r4
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd90      	pop	{r4, r7, pc}

08002a6a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a6a:	b590      	push	{r4, r7, lr}
 8002a6c:	b087      	sub	sp, #28
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	461a      	mov	r2, r3
 8002a76:	460b      	mov	r3, r1
 8002a78:	72fb      	strb	r3, [r7, #11]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	691c      	ldr	r4, [r3, #16]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	7b1b      	ldrb	r3, [r3, #12]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	7afb      	ldrb	r3, [r7, #11]
 8002a8e:	b299      	uxth	r1, r3
 8002a90:	893b      	ldrh	r3, [r7, #8]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	47a0      	blx	r4
 8002a96:	4603      	mov	r3, r0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}

08002aa0 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	460b      	mov	r3, r1
 8002aae:	72fb      	strb	r3, [r7, #11]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685c      	ldr	r4, [r3, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	68d8      	ldr	r0, [r3, #12]
 8002abc:	893b      	ldrh	r3, [r7, #8]
 8002abe:	7af9      	ldrb	r1, [r7, #11]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	47a0      	blx	r4
 8002ac4:	6178      	str	r0, [r7, #20]

  return ret;
 8002ac6:	697b      	ldr	r3, [r7, #20]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd90      	pop	{r4, r7, pc}

08002ad0 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	461a      	mov	r2, r3
 8002adc:	460b      	mov	r3, r1
 8002ade:	72fb      	strb	r3, [r7, #11]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681c      	ldr	r4, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68d8      	ldr	r0, [r3, #12]
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	7af9      	ldrb	r1, [r7, #11]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	47a0      	blx	r4
 8002af4:	6178      	str	r0, [r7, #20]

  return ret;
 8002af6:	697b      	ldr	r3, [r7, #20]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd90      	pop	{r4, r7, pc}

08002b00 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002b0c:	f107 0208 	add.w	r2, r7, #8
 8002b10:	2301      	movs	r3, #1
 8002b12:	2110      	movs	r1, #16
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ffc3 	bl	8002aa0 <lsm6dsl_read_reg>
 8002b1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	7a3b      	ldrb	r3, [r7, #8]
 8002b2c:	f362 0383 	bfi	r3, r2, #2, #2
 8002b30:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002b32:	f107 0208 	add.w	r2, r7, #8
 8002b36:	2301      	movs	r3, #1
 8002b38:	2110      	movs	r1, #16
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffc8 	bl	8002ad0 <lsm6dsl_write_reg>
 8002b40:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002b56:	f107 0208 	add.w	r2, r7, #8
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	2110      	movs	r1, #16
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ff9e 	bl	8002aa0 <lsm6dsl_read_reg>
 8002b64:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8002b66:	7a3b      	ldrb	r3, [r7, #8]
 8002b68:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d81a      	bhi.n	8002ba8 <lsm6dsl_xl_full_scale_get+0x5c>
 8002b72:	a201      	add	r2, pc, #4	@ (adr r2, 8002b78 <lsm6dsl_xl_full_scale_get+0x2c>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002b91 	.word	0x08002b91
 8002b80:	08002b99 	.word	0x08002b99
 8002b84:	08002ba1 	.word	0x08002ba1
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
      break;
 8002b8e:	e00f      	b.n	8002bb0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
      break;
 8002b96:	e00b      	b.n	8002bb0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	701a      	strb	r2, [r3, #0]
      break;
 8002b9e:	e007      	b.n	8002bb0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	701a      	strb	r2, [r3, #0]
      break;
 8002ba6:	e003      	b.n	8002bb0 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2204      	movs	r2, #4
 8002bac:	701a      	strb	r2, [r3, #0]
      break;
 8002bae:	bf00      	nop
  }

  return ret;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop

08002bbc <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002bc8:	f107 0208 	add.w	r2, r7, #8
 8002bcc:	2301      	movs	r3, #1
 8002bce:	2110      	movs	r1, #16
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff65 	bl	8002aa0 <lsm6dsl_read_reg>
 8002bd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	7a3b      	ldrb	r3, [r7, #8]
 8002be8:	f362 1307 	bfi	r3, r2, #4, #4
 8002bec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002bee:	f107 0208 	add.w	r2, r7, #8
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	2110      	movs	r1, #16
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ff6a 	bl	8002ad0 <lsm6dsl_write_reg>
 8002bfc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002c12:	f107 0208 	add.w	r2, r7, #8
 8002c16:	2301      	movs	r3, #1
 8002c18:	2110      	movs	r1, #16
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ff40 	bl	8002aa0 <lsm6dsl_read_reg>
 8002c20:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 8002c22:	7a3b      	ldrb	r3, [r7, #8]
 8002c24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b0b      	cmp	r3, #11
 8002c2c:	d84a      	bhi.n	8002cc4 <lsm6dsl_xl_data_rate_get+0xbc>
 8002c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c34 <lsm6dsl_xl_data_rate_get+0x2c>)
 8002c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c34:	08002c65 	.word	0x08002c65
 8002c38:	08002c6d 	.word	0x08002c6d
 8002c3c:	08002c75 	.word	0x08002c75
 8002c40:	08002c7d 	.word	0x08002c7d
 8002c44:	08002c85 	.word	0x08002c85
 8002c48:	08002c8d 	.word	0x08002c8d
 8002c4c:	08002c95 	.word	0x08002c95
 8002c50:	08002c9d 	.word	0x08002c9d
 8002c54:	08002ca5 	.word	0x08002ca5
 8002c58:	08002cad 	.word	0x08002cad
 8002c5c:	08002cb5 	.word	0x08002cb5
 8002c60:	08002cbd 	.word	0x08002cbd
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
      break;
 8002c6a:	e02f      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
      break;
 8002c72:	e02b      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2202      	movs	r2, #2
 8002c78:	701a      	strb	r2, [r3, #0]
      break;
 8002c7a:	e027      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2203      	movs	r2, #3
 8002c80:	701a      	strb	r2, [r3, #0]
      break;
 8002c82:	e023      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2204      	movs	r2, #4
 8002c88:	701a      	strb	r2, [r3, #0]
      break;
 8002c8a:	e01f      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2205      	movs	r2, #5
 8002c90:	701a      	strb	r2, [r3, #0]
      break;
 8002c92:	e01b      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2206      	movs	r2, #6
 8002c98:	701a      	strb	r2, [r3, #0]
      break;
 8002c9a:	e017      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2207      	movs	r2, #7
 8002ca0:	701a      	strb	r2, [r3, #0]
      break;
 8002ca2:	e013      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	701a      	strb	r2, [r3, #0]
      break;
 8002caa:	e00f      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2209      	movs	r2, #9
 8002cb0:	701a      	strb	r2, [r3, #0]
      break;
 8002cb2:	e00b      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	220a      	movs	r2, #10
 8002cb8:	701a      	strb	r2, [r3, #0]
      break;
 8002cba:	e007      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	220b      	movs	r2, #11
 8002cc0:	701a      	strb	r2, [r3, #0]
      break;
 8002cc2:	e003      	b.n	8002ccc <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	701a      	strb	r2, [r3, #0]
      break;
 8002cca:	bf00      	nop
  }

  return ret;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop

08002cd8 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002ce4:	f107 0208 	add.w	r2, r7, #8
 8002ce8:	2301      	movs	r3, #1
 8002cea:	2111      	movs	r1, #17
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff fed7 	bl	8002aa0 <lsm6dsl_read_reg>
 8002cf2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10f      	bne.n	8002d1a <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	7a3b      	ldrb	r3, [r7, #8]
 8002d04:	f362 0343 	bfi	r3, r2, #1, #3
 8002d08:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002d0a:	f107 0208 	add.w	r2, r7, #8
 8002d0e:	2301      	movs	r3, #1
 8002d10:	2111      	movs	r1, #17
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fedc 	bl	8002ad0 <lsm6dsl_write_reg>
 8002d18:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002d30:	f107 0208 	add.w	r2, r7, #8
 8002d34:	2301      	movs	r3, #1
 8002d36:	2111      	movs	r1, #17
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff feb1 	bl	8002aa0 <lsm6dsl_read_reg>
 8002d3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10f      	bne.n	8002d66 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	7a3b      	ldrb	r3, [r7, #8]
 8002d50:	f362 1307 	bfi	r3, r2, #4, #4
 8002d54:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002d56:	f107 0208 	add.w	r2, r7, #8
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	2111      	movs	r1, #17
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff feb6 	bl	8002ad0 <lsm6dsl_write_reg>
 8002d64:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002d7c:	f107 0208 	add.w	r2, r7, #8
 8002d80:	2301      	movs	r3, #1
 8002d82:	2112      	movs	r1, #18
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fe8b 	bl	8002aa0 <lsm6dsl_read_reg>
 8002d8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	7a3b      	ldrb	r3, [r7, #8]
 8002d9c:	f362 1386 	bfi	r3, r2, #6, #1
 8002da0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002da2:	f107 0208 	add.w	r2, r7, #8
 8002da6:	2301      	movs	r3, #1
 8002da8:	2112      	movs	r1, #18
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fe90 	bl	8002ad0 <lsm6dsl_write_reg>
 8002db0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8002dc6:	f107 020c 	add.w	r2, r7, #12
 8002dca:	2306      	movs	r3, #6
 8002dcc:	2128      	movs	r1, #40	@ 0x28
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fe66 	bl	8002aa0 <lsm6dsl_read_reg>
 8002dd4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002dd6:	7b7b      	ldrb	r3, [r7, #13]
 8002dd8:	b21a      	sxth	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	7b3a      	ldrb	r2, [r7, #12]
 8002dec:	4413      	add	r3, r2
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	b21a      	sxth	r2, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	b212      	sxth	r2, r2
 8002dfe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	3302      	adds	r3, #2
 8002e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	7bba      	ldrb	r2, [r7, #14]
 8002e10:	4413      	add	r3, r2
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	3302      	adds	r3, #2
 8002e18:	b212      	sxth	r2, r2
 8002e1a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002e1c:	7c7a      	ldrb	r2, [r7, #17]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	3304      	adds	r3, #4
 8002e22:	b212      	sxth	r2, r2
 8002e24:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	7c3a      	ldrb	r2, [r7, #16]
 8002e36:	4413      	add	r3, r2
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	b212      	sxth	r2, r2
 8002e40:	801a      	strh	r2, [r3, #0]

  return ret;
 8002e42:	697b      	ldr	r3, [r7, #20]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8002e56:	2301      	movs	r3, #1
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	210f      	movs	r1, #15
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fe1f 	bl	8002aa0 <lsm6dsl_read_reg>
 8002e62:	60f8      	str	r0, [r7, #12]

  return ret;
 8002e64:	68fb      	ldr	r3, [r7, #12]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002e7a:	f107 0208 	add.w	r2, r7, #8
 8002e7e:	2301      	movs	r3, #1
 8002e80:	2112      	movs	r1, #18
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff fe0c 	bl	8002aa0 <lsm6dsl_read_reg>
 8002e88:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10f      	bne.n	8002eb0 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	7a3b      	ldrb	r3, [r7, #8]
 8002e9a:	f362 0382 	bfi	r3, r2, #2, #1
 8002e9e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002ea0:	f107 0208 	add.w	r2, r7, #8
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	2112      	movs	r1, #18
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fe11 	bl	8002ad0 <lsm6dsl_write_reg>
 8002eae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b08a      	sub	sp, #40	@ 0x28
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002ec4:	f107 021c 	add.w	r2, r7, #28
 8002ec8:	2301      	movs	r3, #1
 8002eca:	210d      	movs	r1, #13
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff fde7 	bl	8002aa0 <lsm6dsl_read_reg>
 8002ed2:	6278      	str	r0, [r7, #36]	@ 0x24

  if (ret == 0)
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d147      	bne.n	8002f6a <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8002eda:	783b      	ldrb	r3, [r7, #0]
 8002edc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	7f3b      	ldrb	r3, [r7, #28]
 8002ee4:	f362 0300 	bfi	r3, r2, #0, #1
 8002ee8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8002eea:	783b      	ldrb	r3, [r7, #0]
 8002eec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	7f3b      	ldrb	r3, [r7, #28]
 8002ef4:	f362 0341 	bfi	r3, r2, #1, #1
 8002ef8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8002efa:	783b      	ldrb	r3, [r7, #0]
 8002efc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	7f3b      	ldrb	r3, [r7, #28]
 8002f04:	f362 0382 	bfi	r3, r2, #2, #1
 8002f08:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8002f0a:	783b      	ldrb	r3, [r7, #0]
 8002f0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	7f3b      	ldrb	r3, [r7, #28]
 8002f14:	f362 03c3 	bfi	r3, r2, #3, #1
 8002f18:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8002f1a:	783b      	ldrb	r3, [r7, #0]
 8002f1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	7f3b      	ldrb	r3, [r7, #28]
 8002f24:	f362 1304 	bfi	r3, r2, #4, #1
 8002f28:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8002f2a:	783b      	ldrb	r3, [r7, #0]
 8002f2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	7f3b      	ldrb	r3, [r7, #28]
 8002f34:	f362 1345 	bfi	r3, r2, #5, #1
 8002f38:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8002f3a:	783b      	ldrb	r3, [r7, #0]
 8002f3c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	7f3b      	ldrb	r3, [r7, #28]
 8002f44:	f362 1386 	bfi	r3, r2, #6, #1
 8002f48:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8002f4a:	783b      	ldrb	r3, [r7, #0]
 8002f4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	7f3b      	ldrb	r3, [r7, #28]
 8002f54:	f362 13c7 	bfi	r3, r2, #7, #1
 8002f58:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002f5a:	f107 021c 	add.w	r2, r7, #28
 8002f5e:	2301      	movs	r3, #1
 8002f60:	210d      	movs	r1, #13
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff fdb4 	bl	8002ad0 <lsm6dsl_write_reg>
 8002f68:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002f70:	f107 0218 	add.w	r2, r7, #24
 8002f74:	2301      	movs	r3, #1
 8002f76:	215e      	movs	r1, #94	@ 0x5e
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff fd91 	bl	8002aa0 <lsm6dsl_read_reg>
 8002f7e:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8002f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8002f86:	f107 0214 	add.w	r2, r7, #20
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	215f      	movs	r1, #95	@ 0x5f
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fd86 	bl	8002aa0 <lsm6dsl_read_reg>
 8002f94:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d147      	bne.n	800302c <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8002f9c:	787b      	ldrb	r3, [r7, #1]
 8002f9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	7e3b      	ldrb	r3, [r7, #24]
 8002fa6:	f362 0300 	bfi	r3, r2, #0, #1
 8002faa:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8002fac:	787b      	ldrb	r3, [r7, #1]
 8002fae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	7e3b      	ldrb	r3, [r7, #24]
 8002fb6:	f362 0341 	bfi	r3, r2, #1, #1
 8002fba:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 8002fbc:	787b      	ldrb	r3, [r7, #1]
 8002fbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	7e3b      	ldrb	r3, [r7, #24]
 8002fc6:	f362 0382 	bfi	r3, r2, #2, #1
 8002fca:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	7e3b      	ldrb	r3, [r7, #24]
 8002fd6:	f362 03c3 	bfi	r3, r2, #3, #1
 8002fda:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	7e3b      	ldrb	r3, [r7, #24]
 8002fe6:	f362 1304 	bfi	r3, r2, #4, #1
 8002fea:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8002fec:	787b      	ldrb	r3, [r7, #1]
 8002fee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	7e3b      	ldrb	r3, [r7, #24]
 8002ff6:	f362 1345 	bfi	r3, r2, #5, #1
 8002ffa:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 8002ffc:	787b      	ldrb	r3, [r7, #1]
 8002ffe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003002:	b2da      	uxtb	r2, r3
 8003004:	7e3b      	ldrb	r3, [r7, #24]
 8003006:	f362 1386 	bfi	r3, r2, #6, #1
 800300a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 800300c:	787b      	ldrb	r3, [r7, #1]
 800300e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003012:	b2da      	uxtb	r2, r3
 8003014:	7e3b      	ldrb	r3, [r7, #24]
 8003016:	f362 13c7 	bfi	r3, r2, #7, #1
 800301a:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800301c:	f107 0218 	add.w	r2, r7, #24
 8003020:	2301      	movs	r3, #1
 8003022:	215e      	movs	r1, #94	@ 0x5e
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff fd53 	bl	8002ad0 <lsm6dsl_write_reg>
 800302a:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	2b00      	cmp	r3, #0
 8003030:	d107      	bne.n	8003042 <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003032:	f107 0210 	add.w	r2, r7, #16
 8003036:	2301      	movs	r3, #1
 8003038:	2113      	movs	r1, #19
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fd30 	bl	8002aa0 <lsm6dsl_read_reg>
 8003040:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10f      	bne.n	8003068 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8003048:	78bb      	ldrb	r3, [r7, #2]
 800304a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800304e:	b2da      	uxtb	r2, r3
 8003050:	7c3b      	ldrb	r3, [r7, #16]
 8003052:	f362 1304 	bfi	r3, r2, #4, #1
 8003056:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003058:	f107 0210 	add.w	r2, r7, #16
 800305c:	2301      	movs	r3, #1
 800305e:	2113      	movs	r1, #19
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff fd35 	bl	8002ad0 <lsm6dsl_write_reg>
 8003066:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800306e:	f107 0220 	add.w	r2, r7, #32
 8003072:	2301      	movs	r3, #1
 8003074:	211a      	movs	r1, #26
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fd12 	bl	8002aa0 <lsm6dsl_read_reg>
 800307c:	6278      	str	r0, [r7, #36]	@ 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	2b00      	cmp	r3, #0
 8003082:	d111      	bne.n	80030a8 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8003084:	78bb      	ldrb	r3, [r7, #2]
 8003086:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003090:	f362 13c7 	bfi	r3, r2, #7, #1
 8003094:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003098:	f107 0220 	add.w	r2, r7, #32
 800309c:	2301      	movs	r3, #1
 800309e:	211a      	movs	r1, #26
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fd15 	bl	8002ad0 <lsm6dsl_write_reg>
 80030a6:	6278      	str	r0, [r7, #36]	@ 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d158      	bne.n	8003160 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 80030ae:	f107 020c 	add.w	r2, r7, #12
 80030b2:	2301      	movs	r3, #1
 80030b4:	2158      	movs	r1, #88	@ 0x58
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fcf2 	bl	8002aa0 <lsm6dsl_read_reg>
 80030bc:	6278      	str	r0, [r7, #36]	@ 0x24

    if ((val.int1_6d != 0x00U) ||
 80030be:	787b      	ldrb	r3, [r7, #1]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d141      	bne.n	800314e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 80030ca:	787b      	ldrb	r3, [r7, #1]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d13b      	bne.n	800314e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 80030d6:	787b      	ldrb	r3, [r7, #1]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d135      	bne.n	800314e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 80030e2:	787b      	ldrb	r3, [r7, #1]
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d12f      	bne.n	800314e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 80030ee:	787b      	ldrb	r3, [r7, #1]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d129      	bne.n	800314e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 80030fa:	787b      	ldrb	r3, [r7, #1]
 80030fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003100:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8003102:	2b00      	cmp	r3, #0
 8003104:	d123      	bne.n	800314e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8003106:	7d3b      	ldrb	r3, [r7, #20]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 800310e:	2b00      	cmp	r3, #0
 8003110:	d11d      	bne.n	800314e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8003112:	7d3b      	ldrb	r3, [r7, #20]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 800311a:	2b00      	cmp	r3, #0
 800311c:	d117      	bne.n	800314e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800311e:	7d3b      	ldrb	r3, [r7, #20]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8003126:	2b00      	cmp	r3, #0
 8003128:	d111      	bne.n	800314e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 800312a:	7d3b      	ldrb	r3, [r7, #20]
 800312c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003130:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10b      	bne.n	800314e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8003136:	7d3b      	ldrb	r3, [r7, #20]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8003142:	7d3b      	ldrb	r3, [r7, #20]
 8003144:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003148:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 800314a:	2b00      	cmp	r3, #0
 800314c:	d004      	beq.n	8003158 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 800314e:	7b3b      	ldrb	r3, [r7, #12]
 8003150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003154:	733b      	strb	r3, [r7, #12]
 8003156:	e003      	b.n	8003160 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8003158:	7b3b      	ldrb	r3, [r7, #12]
 800315a:	f36f 13c7 	bfc	r3, #7, #1
 800315e:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d107      	bne.n	8003176 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8003166:	f107 020c 	add.w	r2, r7, #12
 800316a:	2301      	movs	r3, #1
 800316c:	2158      	movs	r1, #88	@ 0x58
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fcae 	bl	8002ad0 <lsm6dsl_write_reg>
 8003174:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return ret;
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003178:	4618      	mov	r0, r3
 800317a:	3728      	adds	r7, #40	@ 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 800318a:	f107 0214 	add.w	r2, r7, #20
 800318e:	2301      	movs	r3, #1
 8003190:	210d      	movs	r1, #13
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fc84 	bl	8002aa0 <lsm6dsl_read_reg>
 8003198:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f040 80c0 	bne.w	8003322 <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 80031a2:	7d3b      	ldrb	r3, [r7, #20]
 80031a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031a8:	b2d9      	uxtb	r1, r3
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	7813      	ldrb	r3, [r2, #0]
 80031ae:	f361 0300 	bfi	r3, r1, #0, #1
 80031b2:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 80031b4:	7d3b      	ldrb	r3, [r7, #20]
 80031b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80031ba:	b2d9      	uxtb	r1, r3
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	7813      	ldrb	r3, [r2, #0]
 80031c0:	f361 0341 	bfi	r3, r1, #1, #1
 80031c4:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 80031c6:	7d3b      	ldrb	r3, [r7, #20]
 80031c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031cc:	b2d9      	uxtb	r1, r3
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	7813      	ldrb	r3, [r2, #0]
 80031d2:	f361 0382 	bfi	r3, r1, #2, #1
 80031d6:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 80031d8:	7d3b      	ldrb	r3, [r7, #20]
 80031da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80031de:	b2d9      	uxtb	r1, r3
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	7813      	ldrb	r3, [r2, #0]
 80031e4:	f361 03c3 	bfi	r3, r1, #3, #1
 80031e8:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 80031ea:	7d3b      	ldrb	r3, [r7, #20]
 80031ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80031f0:	b2d9      	uxtb	r1, r3
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	7813      	ldrb	r3, [r2, #0]
 80031f6:	f361 1304 	bfi	r3, r1, #4, #1
 80031fa:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 80031fc:	7d3b      	ldrb	r3, [r7, #20]
 80031fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003202:	b2d9      	uxtb	r1, r3
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	7813      	ldrb	r3, [r2, #0]
 8003208:	f361 1345 	bfi	r3, r1, #5, #1
 800320c:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 800320e:	7d3b      	ldrb	r3, [r7, #20]
 8003210:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003214:	b2d9      	uxtb	r1, r3
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	7813      	ldrb	r3, [r2, #0]
 800321a:	f361 1386 	bfi	r3, r1, #6, #1
 800321e:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8003220:	7d3b      	ldrb	r3, [r7, #20]
 8003222:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003226:	b2d9      	uxtb	r1, r3
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	7813      	ldrb	r3, [r2, #0]
 800322c:	f361 13c7 	bfi	r3, r1, #7, #1
 8003230:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003232:	f107 0210 	add.w	r2, r7, #16
 8003236:	2301      	movs	r3, #1
 8003238:	215e      	movs	r1, #94	@ 0x5e
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fc30 	bl	8002aa0 <lsm6dsl_read_reg>
 8003240:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d16c      	bne.n	8003322 <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 8003248:	7c3b      	ldrb	r3, [r7, #16]
 800324a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800324e:	b2d9      	uxtb	r1, r3
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	7853      	ldrb	r3, [r2, #1]
 8003254:	f361 0300 	bfi	r3, r1, #0, #1
 8003258:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 800325a:	7c3b      	ldrb	r3, [r7, #16]
 800325c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003260:	b2d9      	uxtb	r1, r3
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	7853      	ldrb	r3, [r2, #1]
 8003266:	f361 0341 	bfi	r3, r1, #1, #1
 800326a:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 800326c:	7c3b      	ldrb	r3, [r7, #16]
 800326e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003272:	b2d9      	uxtb	r1, r3
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	7853      	ldrb	r3, [r2, #1]
 8003278:	f361 0382 	bfi	r3, r1, #2, #1
 800327c:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 800327e:	7c3b      	ldrb	r3, [r7, #16]
 8003280:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003284:	b2d9      	uxtb	r1, r3
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	7853      	ldrb	r3, [r2, #1]
 800328a:	f361 03c3 	bfi	r3, r1, #3, #1
 800328e:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8003290:	7c3b      	ldrb	r3, [r7, #16]
 8003292:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003296:	b2d9      	uxtb	r1, r3
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	7853      	ldrb	r3, [r2, #1]
 800329c:	f361 1304 	bfi	r3, r1, #4, #1
 80032a0:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 80032a2:	7c3b      	ldrb	r3, [r7, #16]
 80032a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80032a8:	b2d9      	uxtb	r1, r3
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	7853      	ldrb	r3, [r2, #1]
 80032ae:	f361 1345 	bfi	r3, r1, #5, #1
 80032b2:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 80032b4:	7c3b      	ldrb	r3, [r7, #16]
 80032b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80032ba:	b2d9      	uxtb	r1, r3
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	7853      	ldrb	r3, [r2, #1]
 80032c0:	f361 1386 	bfi	r3, r1, #6, #1
 80032c4:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 80032c6:	7c3b      	ldrb	r3, [r7, #16]
 80032c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80032cc:	b2d9      	uxtb	r1, r3
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	7853      	ldrb	r3, [r2, #1]
 80032d2:	f361 13c7 	bfi	r3, r1, #7, #1
 80032d6:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80032d8:	f107 020c 	add.w	r2, r7, #12
 80032dc:	2301      	movs	r3, #1
 80032de:	2113      	movs	r1, #19
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff fbdd 	bl	8002aa0 <lsm6dsl_read_reg>
 80032e6:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d119      	bne.n	8003322 <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 80032ee:	7b3b      	ldrb	r3, [r7, #12]
 80032f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80032f4:	b2d9      	uxtb	r1, r3
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	7893      	ldrb	r3, [r2, #2]
 80032fa:	f361 0300 	bfi	r3, r1, #0, #1
 80032fe:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003300:	f107 0218 	add.w	r2, r7, #24
 8003304:	2301      	movs	r3, #1
 8003306:	211a      	movs	r1, #26
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fbc9 	bl	8002aa0 <lsm6dsl_read_reg>
 800330e:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8003310:	7e3b      	ldrb	r3, [r7, #24]
 8003312:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003316:	b2d9      	uxtb	r1, r3
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	7893      	ldrb	r3, [r2, #2]
 800331c:	f361 0300 	bfi	r3, r1, #0, #1
 8003320:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 8003322:	69fb      	ldr	r3, [r7, #28]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8003338:	f107 0208 	add.w	r2, r7, #8
 800333c:	2301      	movs	r3, #1
 800333e:	210a      	movs	r1, #10
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff fbad 	bl	8002aa0 <lsm6dsl_read_reg>
 8003346:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10f      	bne.n	800336e <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	b2da      	uxtb	r2, r3
 8003356:	7a3b      	ldrb	r3, [r7, #8]
 8003358:	f362 0302 	bfi	r3, r2, #0, #3
 800335c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800335e:	f107 0208 	add.w	r2, r7, #8
 8003362:	2301      	movs	r3, #1
 8003364:	210a      	movs	r1, #10
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fbb2 	bl	8002ad0 <lsm6dsl_write_reg>
 800336c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 800336e:	68fb      	ldr	r3, [r7, #12]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800337c:	4b0e      	ldr	r3, [pc, #56]	@ (80033b8 <HAL_Init+0x40>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a0d      	ldr	r2, [pc, #52]	@ (80033b8 <HAL_Init+0x40>)
 8003382:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003388:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <HAL_Init+0x40>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a0a      	ldr	r2, [pc, #40]	@ (80033b8 <HAL_Init+0x40>)
 800338e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003394:	4b08      	ldr	r3, [pc, #32]	@ (80033b8 <HAL_Init+0x40>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a07      	ldr	r2, [pc, #28]	@ (80033b8 <HAL_Init+0x40>)
 800339a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800339e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033a0:	2003      	movs	r0, #3
 80033a2:	f000 f94f 	bl	8003644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f000 f808 	bl	80033bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033ac:	f7fe fbd8 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023c00 	.word	0x40023c00

080033bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033c4:	4b12      	ldr	r3, [pc, #72]	@ (8003410 <HAL_InitTick+0x54>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <HAL_InitTick+0x58>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	4619      	mov	r1, r3
 80033ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f967 	bl	80036ae <HAL_SYSTICK_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e00e      	b.n	8003408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b0f      	cmp	r3, #15
 80033ee:	d80a      	bhi.n	8003406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033f0:	2200      	movs	r2, #0
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	f000 f92f 	bl	800365a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033fc:	4a06      	ldr	r2, [pc, #24]	@ (8003418 <HAL_InitTick+0x5c>)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	e000      	b.n	8003408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	2000006c 	.word	0x2000006c
 8003414:	20000074 	.word	0x20000074
 8003418:	20000070 	.word	0x20000070

0800341c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003420:	4b06      	ldr	r3, [pc, #24]	@ (800343c <HAL_IncTick+0x20>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <HAL_IncTick+0x24>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4413      	add	r3, r2
 800342c:	4a04      	ldr	r2, [pc, #16]	@ (8003440 <HAL_IncTick+0x24>)
 800342e:	6013      	str	r3, [r2, #0]
}
 8003430:	bf00      	nop
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000074 	.word	0x20000074
 8003440:	20001100 	.word	0x20001100

08003444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return uwTick;
 8003448:	4b03      	ldr	r3, [pc, #12]	@ (8003458 <HAL_GetTick+0x14>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20001100 	.word	0x20001100

0800345c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003464:	f7ff ffee 	bl	8003444 <HAL_GetTick>
 8003468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d005      	beq.n	8003482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003476:	4b0a      	ldr	r3, [pc, #40]	@ (80034a0 <HAL_Delay+0x44>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003482:	bf00      	nop
 8003484:	f7ff ffde 	bl	8003444 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	429a      	cmp	r2, r3
 8003492:	d8f7      	bhi.n	8003484 <HAL_Delay+0x28>
  {
  }
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000074 	.word	0x20000074

080034a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b4:	4b0c      	ldr	r3, [pc, #48]	@ (80034e8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034c0:	4013      	ands	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034d6:	4a04      	ldr	r2, [pc, #16]	@ (80034e8 <__NVIC_SetPriorityGrouping+0x44>)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	60d3      	str	r3, [r2, #12]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f0:	4b04      	ldr	r3, [pc, #16]	@ (8003504 <__NVIC_GetPriorityGrouping+0x18>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	f003 0307 	and.w	r3, r3, #7
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	2b00      	cmp	r3, #0
 8003518:	db0b      	blt.n	8003532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	f003 021f 	and.w	r2, r3, #31
 8003520:	4907      	ldr	r1, [pc, #28]	@ (8003540 <__NVIC_EnableIRQ+0x38>)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2001      	movs	r0, #1
 800352a:	fa00 f202 	lsl.w	r2, r0, r2
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	e000e100 	.word	0xe000e100

08003544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	6039      	str	r1, [r7, #0]
 800354e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	2b00      	cmp	r3, #0
 8003556:	db0a      	blt.n	800356e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	490c      	ldr	r1, [pc, #48]	@ (8003590 <__NVIC_SetPriority+0x4c>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	440b      	add	r3, r1
 8003568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800356c:	e00a      	b.n	8003584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	4908      	ldr	r1, [pc, #32]	@ (8003594 <__NVIC_SetPriority+0x50>)
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	3b04      	subs	r3, #4
 800357c:	0112      	lsls	r2, r2, #4
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	440b      	add	r3, r1
 8003582:	761a      	strb	r2, [r3, #24]
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	e000e100 	.word	0xe000e100
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	@ 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f1c3 0307 	rsb	r3, r3, #7
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	bf28      	it	cs
 80035b6:	2304      	movcs	r3, #4
 80035b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3304      	adds	r3, #4
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d902      	bls.n	80035c8 <NVIC_EncodePriority+0x30>
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3b03      	subs	r3, #3
 80035c6:	e000      	b.n	80035ca <NVIC_EncodePriority+0x32>
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035cc:	f04f 32ff 	mov.w	r2, #4294967295
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43da      	mvns	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	401a      	ands	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e0:	f04f 31ff 	mov.w	r1, #4294967295
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	43d9      	mvns	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f0:	4313      	orrs	r3, r2
         );
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3724      	adds	r7, #36	@ 0x24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003610:	d301      	bcc.n	8003616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003612:	2301      	movs	r3, #1
 8003614:	e00f      	b.n	8003636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003616:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <SysTick_Config+0x40>)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3b01      	subs	r3, #1
 800361c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800361e:	210f      	movs	r1, #15
 8003620:	f04f 30ff 	mov.w	r0, #4294967295
 8003624:	f7ff ff8e 	bl	8003544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003628:	4b05      	ldr	r3, [pc, #20]	@ (8003640 <SysTick_Config+0x40>)
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800362e:	4b04      	ldr	r3, [pc, #16]	@ (8003640 <SysTick_Config+0x40>)
 8003630:	2207      	movs	r2, #7
 8003632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	e000e010 	.word	0xe000e010

08003644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff29 	bl	80034a4 <__NVIC_SetPriorityGrouping>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	4603      	mov	r3, r0
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800366c:	f7ff ff3e 	bl	80034ec <__NVIC_GetPriorityGrouping>
 8003670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	6978      	ldr	r0, [r7, #20]
 8003678:	f7ff ff8e 	bl	8003598 <NVIC_EncodePriority>
 800367c:	4602      	mov	r2, r0
 800367e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff5d 	bl	8003544 <__NVIC_SetPriority>
}
 800368a:	bf00      	nop
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff31 	bl	8003508 <__NVIC_EnableIRQ>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ffa2 	bl	8003600 <SysTick_Config>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b089      	sub	sp, #36	@ 0x24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	e165      	b.n	80039b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036e4:	2201      	movs	r2, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	f040 8154 	bne.w	80039aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d005      	beq.n	800371a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003716:	2b02      	cmp	r3, #2
 8003718:	d130      	bne.n	800377c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	2203      	movs	r2, #3
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003750:	2201      	movs	r2, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 0201 	and.w	r2, r3, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b03      	cmp	r3, #3
 8003786:	d017      	beq.n	80037b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d123      	bne.n	800380c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	08da      	lsrs	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3208      	adds	r2, #8
 80037cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	220f      	movs	r2, #15
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	08da      	lsrs	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3208      	adds	r2, #8
 8003806:	69b9      	ldr	r1, [r7, #24]
 8003808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	2203      	movs	r2, #3
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0203 	and.w	r2, r3, #3
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80ae 	beq.w	80039aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	4b5d      	ldr	r3, [pc, #372]	@ (80039c8 <HAL_GPIO_Init+0x300>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	4a5c      	ldr	r2, [pc, #368]	@ (80039c8 <HAL_GPIO_Init+0x300>)
 8003858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800385c:	6453      	str	r3, [r2, #68]	@ 0x44
 800385e:	4b5a      	ldr	r3, [pc, #360]	@ (80039c8 <HAL_GPIO_Init+0x300>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800386a:	4a58      	ldr	r2, [pc, #352]	@ (80039cc <HAL_GPIO_Init+0x304>)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	3302      	adds	r3, #2
 8003872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	220f      	movs	r2, #15
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4f      	ldr	r2, [pc, #316]	@ (80039d0 <HAL_GPIO_Init+0x308>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d025      	beq.n	80038e2 <HAL_GPIO_Init+0x21a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4e      	ldr	r2, [pc, #312]	@ (80039d4 <HAL_GPIO_Init+0x30c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d01f      	beq.n	80038de <HAL_GPIO_Init+0x216>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4d      	ldr	r2, [pc, #308]	@ (80039d8 <HAL_GPIO_Init+0x310>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d019      	beq.n	80038da <HAL_GPIO_Init+0x212>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4c      	ldr	r2, [pc, #304]	@ (80039dc <HAL_GPIO_Init+0x314>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_GPIO_Init+0x20e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4b      	ldr	r2, [pc, #300]	@ (80039e0 <HAL_GPIO_Init+0x318>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00d      	beq.n	80038d2 <HAL_GPIO_Init+0x20a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4a      	ldr	r2, [pc, #296]	@ (80039e4 <HAL_GPIO_Init+0x31c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d007      	beq.n	80038ce <HAL_GPIO_Init+0x206>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a49      	ldr	r2, [pc, #292]	@ (80039e8 <HAL_GPIO_Init+0x320>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <HAL_GPIO_Init+0x202>
 80038c6:	2306      	movs	r3, #6
 80038c8:	e00c      	b.n	80038e4 <HAL_GPIO_Init+0x21c>
 80038ca:	2307      	movs	r3, #7
 80038cc:	e00a      	b.n	80038e4 <HAL_GPIO_Init+0x21c>
 80038ce:	2305      	movs	r3, #5
 80038d0:	e008      	b.n	80038e4 <HAL_GPIO_Init+0x21c>
 80038d2:	2304      	movs	r3, #4
 80038d4:	e006      	b.n	80038e4 <HAL_GPIO_Init+0x21c>
 80038d6:	2303      	movs	r3, #3
 80038d8:	e004      	b.n	80038e4 <HAL_GPIO_Init+0x21c>
 80038da:	2302      	movs	r3, #2
 80038dc:	e002      	b.n	80038e4 <HAL_GPIO_Init+0x21c>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <HAL_GPIO_Init+0x21c>
 80038e2:	2300      	movs	r3, #0
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	f002 0203 	and.w	r2, r2, #3
 80038ea:	0092      	lsls	r2, r2, #2
 80038ec:	4093      	lsls	r3, r2
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f4:	4935      	ldr	r1, [pc, #212]	@ (80039cc <HAL_GPIO_Init+0x304>)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	089b      	lsrs	r3, r3, #2
 80038fa:	3302      	adds	r3, #2
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003902:	4b3a      	ldr	r3, [pc, #232]	@ (80039ec <HAL_GPIO_Init+0x324>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003926:	4a31      	ldr	r2, [pc, #196]	@ (80039ec <HAL_GPIO_Init+0x324>)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800392c:	4b2f      	ldr	r3, [pc, #188]	@ (80039ec <HAL_GPIO_Init+0x324>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003950:	4a26      	ldr	r2, [pc, #152]	@ (80039ec <HAL_GPIO_Init+0x324>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003956:	4b25      	ldr	r3, [pc, #148]	@ (80039ec <HAL_GPIO_Init+0x324>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800397a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ec <HAL_GPIO_Init+0x324>)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003980:	4b1a      	ldr	r3, [pc, #104]	@ (80039ec <HAL_GPIO_Init+0x324>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039a4:	4a11      	ldr	r2, [pc, #68]	@ (80039ec <HAL_GPIO_Init+0x324>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3301      	adds	r3, #1
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	f67f ae96 	bls.w	80036e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	3724      	adds	r7, #36	@ 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40013800 	.word	0x40013800
 80039d0:	40020000 	.word	0x40020000
 80039d4:	40020400 	.word	0x40020400
 80039d8:	40020800 	.word	0x40020800
 80039dc:	40020c00 	.word	0x40020c00
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40021400 	.word	0x40021400
 80039e8:	40021800 	.word	0x40021800
 80039ec:	40013c00 	.word	0x40013c00

080039f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e0c7      	b.n	8003b9c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	f040 80b7 	bne.w	8003b96 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a28:	4a62      	ldr	r2, [pc, #392]	@ (8003bb4 <HAL_GPIO_DeInit+0x1c4>)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	3302      	adds	r3, #2
 8003a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a34:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	220f      	movs	r2, #15
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	4013      	ands	r3, r2
 8003a48:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a5a      	ldr	r2, [pc, #360]	@ (8003bb8 <HAL_GPIO_DeInit+0x1c8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d025      	beq.n	8003a9e <HAL_GPIO_DeInit+0xae>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a59      	ldr	r2, [pc, #356]	@ (8003bbc <HAL_GPIO_DeInit+0x1cc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01f      	beq.n	8003a9a <HAL_GPIO_DeInit+0xaa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a58      	ldr	r2, [pc, #352]	@ (8003bc0 <HAL_GPIO_DeInit+0x1d0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d019      	beq.n	8003a96 <HAL_GPIO_DeInit+0xa6>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a57      	ldr	r2, [pc, #348]	@ (8003bc4 <HAL_GPIO_DeInit+0x1d4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_GPIO_DeInit+0xa2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a56      	ldr	r2, [pc, #344]	@ (8003bc8 <HAL_GPIO_DeInit+0x1d8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00d      	beq.n	8003a8e <HAL_GPIO_DeInit+0x9e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a55      	ldr	r2, [pc, #340]	@ (8003bcc <HAL_GPIO_DeInit+0x1dc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d007      	beq.n	8003a8a <HAL_GPIO_DeInit+0x9a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a54      	ldr	r2, [pc, #336]	@ (8003bd0 <HAL_GPIO_DeInit+0x1e0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <HAL_GPIO_DeInit+0x96>
 8003a82:	2306      	movs	r3, #6
 8003a84:	e00c      	b.n	8003aa0 <HAL_GPIO_DeInit+0xb0>
 8003a86:	2307      	movs	r3, #7
 8003a88:	e00a      	b.n	8003aa0 <HAL_GPIO_DeInit+0xb0>
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	e008      	b.n	8003aa0 <HAL_GPIO_DeInit+0xb0>
 8003a8e:	2304      	movs	r3, #4
 8003a90:	e006      	b.n	8003aa0 <HAL_GPIO_DeInit+0xb0>
 8003a92:	2303      	movs	r3, #3
 8003a94:	e004      	b.n	8003aa0 <HAL_GPIO_DeInit+0xb0>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e002      	b.n	8003aa0 <HAL_GPIO_DeInit+0xb0>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_GPIO_DeInit+0xb0>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	f002 0203 	and.w	r2, r2, #3
 8003aa6:	0092      	lsls	r2, r2, #2
 8003aa8:	4093      	lsls	r3, r2
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d132      	bne.n	8003b16 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ab0:	4b48      	ldr	r3, [pc, #288]	@ (8003bd4 <HAL_GPIO_DeInit+0x1e4>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	4946      	ldr	r1, [pc, #280]	@ (8003bd4 <HAL_GPIO_DeInit+0x1e4>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003abe:	4b45      	ldr	r3, [pc, #276]	@ (8003bd4 <HAL_GPIO_DeInit+0x1e4>)
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	4943      	ldr	r1, [pc, #268]	@ (8003bd4 <HAL_GPIO_DeInit+0x1e4>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003acc:	4b41      	ldr	r3, [pc, #260]	@ (8003bd4 <HAL_GPIO_DeInit+0x1e4>)
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	493f      	ldr	r1, [pc, #252]	@ (8003bd4 <HAL_GPIO_DeInit+0x1e4>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ada:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd4 <HAL_GPIO_DeInit+0x1e4>)
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	493c      	ldr	r1, [pc, #240]	@ (8003bd4 <HAL_GPIO_DeInit+0x1e4>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	220f      	movs	r2, #15
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003af8:	4a2e      	ldr	r2, [pc, #184]	@ (8003bb4 <HAL_GPIO_DeInit+0x1c4>)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	089b      	lsrs	r3, r3, #2
 8003afe:	3302      	adds	r3, #2
 8003b00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	43da      	mvns	r2, r3
 8003b08:	482a      	ldr	r0, [pc, #168]	@ (8003bb4 <HAL_GPIO_DeInit+0x1c4>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	400a      	ands	r2, r1
 8003b10:	3302      	adds	r3, #2
 8003b12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	2103      	movs	r1, #3
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	401a      	ands	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	08da      	lsrs	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3208      	adds	r2, #8
 8003b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	220f      	movs	r2, #15
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	08d2      	lsrs	r2, r2, #3
 8003b4c:	4019      	ands	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3208      	adds	r2, #8
 8003b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2103      	movs	r1, #3
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	401a      	ands	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	2101      	movs	r1, #1
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	2103      	movs	r1, #3
 8003b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	401a      	ands	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b0f      	cmp	r3, #15
 8003ba0:	f67f af34 	bls.w	8003a0c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	40020000 	.word	0x40020000
 8003bbc:	40020400 	.word	0x40020400
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	40020c00 	.word	0x40020c00
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40021400 	.word	0x40021400
 8003bd0:	40021800 	.word	0x40021800
 8003bd4:	40013c00 	.word	0x40013c00

08003bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
 8003be4:	4613      	mov	r3, r2
 8003be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be8:	787b      	ldrb	r3, [r7, #1]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bee:	887a      	ldrh	r2, [r7, #2]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bf4:	e003      	b.n	8003bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	041a      	lsls	r2, r3, #16
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	619a      	str	r2, [r3, #24]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c16:	4b08      	ldr	r3, [pc, #32]	@ (8003c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d006      	beq.n	8003c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c22:	4a05      	ldr	r2, [pc, #20]	@ (8003c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd ff66 	bl	8001afc <HAL_GPIO_EXTI_Callback>
  }
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40013c00 	.word	0x40013c00

08003c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0cc      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c50:	4b68      	ldr	r3, [pc, #416]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d90c      	bls.n	8003c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5e:	4b65      	ldr	r3, [pc, #404]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b63      	ldr	r3, [pc, #396]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0b8      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d020      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c90:	4b59      	ldr	r3, [pc, #356]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a58      	ldr	r2, [pc, #352]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca8:	4b53      	ldr	r3, [pc, #332]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a52      	ldr	r2, [pc, #328]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb4:	4b50      	ldr	r3, [pc, #320]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	494d      	ldr	r1, [pc, #308]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d044      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	4b47      	ldr	r3, [pc, #284]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d119      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e07f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e06f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e067      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d1a:	4b37      	ldr	r3, [pc, #220]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f023 0203 	bic.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4934      	ldr	r1, [pc, #208]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d2c:	f7ff fb8a 	bl	8003444 <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d34:	f7ff fb86 	bl	8003444 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e04f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 020c 	and.w	r2, r3, #12
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d1eb      	bne.n	8003d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b25      	ldr	r3, [pc, #148]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d20c      	bcs.n	8003d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b22      	ldr	r3, [pc, #136]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b20      	ldr	r3, [pc, #128]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e032      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d90:	4b19      	ldr	r3, [pc, #100]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4916      	ldr	r1, [pc, #88]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dae:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	490e      	ldr	r1, [pc, #56]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dc2:	f000 f855 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	490a      	ldr	r1, [pc, #40]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	5ccb      	ldrb	r3, [r1, r3]
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	4a09      	ldr	r2, [pc, #36]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dde:	4b09      	ldr	r3, [pc, #36]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff faea 	bl	80033bc <HAL_InitTick>

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023c00 	.word	0x40023c00
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	08008b80 	.word	0x08008b80
 8003e00:	2000006c 	.word	0x2000006c
 8003e04:	20000070 	.word	0x20000070

08003e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	@ (8003e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	2000006c 	.word	0x2000006c

08003e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e24:	f7ff fff0 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	0a9b      	lsrs	r3, r3, #10
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	4903      	ldr	r1, [pc, #12]	@ (8003e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40023800 	.word	0x40023800
 8003e44:	08008b90 	.word	0x08008b90

08003e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e4c:	f7ff ffdc 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	0b5b      	lsrs	r3, r3, #13
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	4903      	ldr	r1, [pc, #12]	@ (8003e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	08008b90 	.word	0x08008b90

08003e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e74:	b0ae      	sub	sp, #184	@ 0xb8
 8003e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e96:	4bcb      	ldr	r3, [pc, #812]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	f200 8206 	bhi.w	80042b0 <HAL_RCC_GetSysClockFreq+0x440>
 8003ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eac <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ee1 	.word	0x08003ee1
 8003eb0:	080042b1 	.word	0x080042b1
 8003eb4:	080042b1 	.word	0x080042b1
 8003eb8:	080042b1 	.word	0x080042b1
 8003ebc:	08003ee9 	.word	0x08003ee9
 8003ec0:	080042b1 	.word	0x080042b1
 8003ec4:	080042b1 	.word	0x080042b1
 8003ec8:	080042b1 	.word	0x080042b1
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	080042b1 	.word	0x080042b1
 8003ed4:	080042b1 	.word	0x080042b1
 8003ed8:	080042b1 	.word	0x080042b1
 8003edc:	080040e1 	.word	0x080040e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4bb9      	ldr	r3, [pc, #740]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003ee6:	e1e7      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ee8:	4bb8      	ldr	r3, [pc, #736]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003eee:	e1e3      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef0:	4bb4      	ldr	r3, [pc, #720]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efc:	4bb1      	ldr	r3, [pc, #708]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d071      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f08:	4bae      	ldr	r3, [pc, #696]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f14:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f2e:	4622      	mov	r2, r4
 8003f30:	462b      	mov	r3, r5
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	0159      	lsls	r1, r3, #5
 8003f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f40:	0150      	lsls	r0, r2, #5
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4621      	mov	r1, r4
 8003f48:	1a51      	subs	r1, r2, r1
 8003f4a:	6439      	str	r1, [r7, #64]	@ 0x40
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f52:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003f60:	4649      	mov	r1, r9
 8003f62:	018b      	lsls	r3, r1, #6
 8003f64:	4641      	mov	r1, r8
 8003f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f6a:	4641      	mov	r1, r8
 8003f6c:	018a      	lsls	r2, r1, #6
 8003f6e:	4641      	mov	r1, r8
 8003f70:	1a51      	subs	r1, r2, r1
 8003f72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f74:	4649      	mov	r1, r9
 8003f76:	eb63 0301 	sbc.w	r3, r3, r1
 8003f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003f88:	4649      	mov	r1, r9
 8003f8a:	00cb      	lsls	r3, r1, #3
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f92:	4641      	mov	r1, r8
 8003f94:	00ca      	lsls	r2, r1, #3
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4622      	mov	r2, r4
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	460a      	mov	r2, r1
 8003fa6:	eb42 0303 	adc.w	r3, r2, r3
 8003faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fb8:	4629      	mov	r1, r5
 8003fba:	024b      	lsls	r3, r1, #9
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	024a      	lsls	r2, r1, #9
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fd8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fdc:	f7fc fe04 	bl	8000be8 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fea:	e067      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fec:	4b75      	ldr	r3, [pc, #468]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	099b      	lsrs	r3, r3, #6
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ff8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004004:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004006:	2300      	movs	r3, #0
 8004008:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800400a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800400e:	4622      	mov	r2, r4
 8004010:	462b      	mov	r3, r5
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	0159      	lsls	r1, r3, #5
 800401c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004020:	0150      	lsls	r0, r2, #5
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4621      	mov	r1, r4
 8004028:	1a51      	subs	r1, r2, r1
 800402a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800402c:	4629      	mov	r1, r5
 800402e:	eb63 0301 	sbc.w	r3, r3, r1
 8004032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004040:	4649      	mov	r1, r9
 8004042:	018b      	lsls	r3, r1, #6
 8004044:	4641      	mov	r1, r8
 8004046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800404a:	4641      	mov	r1, r8
 800404c:	018a      	lsls	r2, r1, #6
 800404e:	4641      	mov	r1, r8
 8004050:	ebb2 0a01 	subs.w	sl, r2, r1
 8004054:	4649      	mov	r1, r9
 8004056:	eb63 0b01 	sbc.w	fp, r3, r1
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004066:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800406a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800406e:	4692      	mov	sl, r2
 8004070:	469b      	mov	fp, r3
 8004072:	4623      	mov	r3, r4
 8004074:	eb1a 0303 	adds.w	r3, sl, r3
 8004078:	623b      	str	r3, [r7, #32]
 800407a:	462b      	mov	r3, r5
 800407c:	eb4b 0303 	adc.w	r3, fp, r3
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800408e:	4629      	mov	r1, r5
 8004090:	028b      	lsls	r3, r1, #10
 8004092:	4621      	mov	r1, r4
 8004094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004098:	4621      	mov	r1, r4
 800409a:	028a      	lsls	r2, r1, #10
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040a4:	2200      	movs	r2, #0
 80040a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80040a8:	677a      	str	r2, [r7, #116]	@ 0x74
 80040aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80040ae:	f7fc fd9b 	bl	8000be8 <__aeabi_uldivmod>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4613      	mov	r3, r2
 80040b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040bc:	4b41      	ldr	r3, [pc, #260]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	3301      	adds	r3, #1
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80040ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040de:	e0eb      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e0:	4b38      	ldr	r3, [pc, #224]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ec:	4b35      	ldr	r3, [pc, #212]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d06b      	beq.n	80041d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f8:	4b32      	ldr	r3, [pc, #200]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	099b      	lsrs	r3, r3, #6
 80040fe:	2200      	movs	r2, #0
 8004100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004102:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004104:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410a:	663b      	str	r3, [r7, #96]	@ 0x60
 800410c:	2300      	movs	r3, #0
 800410e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004110:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004114:	4622      	mov	r2, r4
 8004116:	462b      	mov	r3, r5
 8004118:	f04f 0000 	mov.w	r0, #0
 800411c:	f04f 0100 	mov.w	r1, #0
 8004120:	0159      	lsls	r1, r3, #5
 8004122:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004126:	0150      	lsls	r0, r2, #5
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4621      	mov	r1, r4
 800412e:	1a51      	subs	r1, r2, r1
 8004130:	61b9      	str	r1, [r7, #24]
 8004132:	4629      	mov	r1, r5
 8004134:	eb63 0301 	sbc.w	r3, r3, r1
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004146:	4659      	mov	r1, fp
 8004148:	018b      	lsls	r3, r1, #6
 800414a:	4651      	mov	r1, sl
 800414c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004150:	4651      	mov	r1, sl
 8004152:	018a      	lsls	r2, r1, #6
 8004154:	4651      	mov	r1, sl
 8004156:	ebb2 0801 	subs.w	r8, r2, r1
 800415a:	4659      	mov	r1, fp
 800415c:	eb63 0901 	sbc.w	r9, r3, r1
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800416c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004170:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004174:	4690      	mov	r8, r2
 8004176:	4699      	mov	r9, r3
 8004178:	4623      	mov	r3, r4
 800417a:	eb18 0303 	adds.w	r3, r8, r3
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	462b      	mov	r3, r5
 8004182:	eb49 0303 	adc.w	r3, r9, r3
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004194:	4629      	mov	r1, r5
 8004196:	024b      	lsls	r3, r1, #9
 8004198:	4621      	mov	r1, r4
 800419a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800419e:	4621      	mov	r1, r4
 80041a0:	024a      	lsls	r2, r1, #9
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041aa:	2200      	movs	r2, #0
 80041ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80041b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041b4:	f7fc fd18 	bl	8000be8 <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4613      	mov	r3, r2
 80041be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041c2:	e065      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x420>
 80041c4:	40023800 	.word	0x40023800
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d0:	4b3d      	ldr	r3, [pc, #244]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	099b      	lsrs	r3, r3, #6
 80041d6:	2200      	movs	r2, #0
 80041d8:	4618      	mov	r0, r3
 80041da:	4611      	mov	r1, r2
 80041dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e2:	2300      	movs	r3, #0
 80041e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80041e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80041ea:	4642      	mov	r2, r8
 80041ec:	464b      	mov	r3, r9
 80041ee:	f04f 0000 	mov.w	r0, #0
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	0159      	lsls	r1, r3, #5
 80041f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041fc:	0150      	lsls	r0, r2, #5
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4641      	mov	r1, r8
 8004204:	1a51      	subs	r1, r2, r1
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	4649      	mov	r1, r9
 800420a:	eb63 0301 	sbc.w	r3, r3, r1
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800421c:	4659      	mov	r1, fp
 800421e:	018b      	lsls	r3, r1, #6
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004226:	4651      	mov	r1, sl
 8004228:	018a      	lsls	r2, r1, #6
 800422a:	4651      	mov	r1, sl
 800422c:	1a54      	subs	r4, r2, r1
 800422e:	4659      	mov	r1, fp
 8004230:	eb63 0501 	sbc.w	r5, r3, r1
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	00eb      	lsls	r3, r5, #3
 800423e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004242:	00e2      	lsls	r2, r4, #3
 8004244:	4614      	mov	r4, r2
 8004246:	461d      	mov	r5, r3
 8004248:	4643      	mov	r3, r8
 800424a:	18e3      	adds	r3, r4, r3
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	464b      	mov	r3, r9
 8004250:	eb45 0303 	adc.w	r3, r5, r3
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004262:	4629      	mov	r1, r5
 8004264:	028b      	lsls	r3, r1, #10
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800426c:	4621      	mov	r1, r4
 800426e:	028a      	lsls	r2, r1, #10
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004278:	2200      	movs	r2, #0
 800427a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800427c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800427e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004282:	f7fc fcb1 	bl	8000be8 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4613      	mov	r3, r2
 800428c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004290:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	0f1b      	lsrs	r3, r3, #28
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800429e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042ae:	e003      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80042b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	37b8      	adds	r7, #184	@ 0xb8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	00f42400 	.word	0x00f42400

080042d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e28d      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8083 	beq.w	80043f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042f0:	4b94      	ldr	r3, [pc, #592]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d019      	beq.n	8004330 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042fc:	4b91      	ldr	r3, [pc, #580]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004304:	2b08      	cmp	r3, #8
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004308:	4b8e      	ldr	r3, [pc, #568]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004310:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004314:	d00c      	beq.n	8004330 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004316:	4b8b      	ldr	r3, [pc, #556]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d112      	bne.n	8004348 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004322:	4b88      	ldr	r3, [pc, #544]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800432a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800432e:	d10b      	bne.n	8004348 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	4b84      	ldr	r3, [pc, #528]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d05b      	beq.n	80043f4 <HAL_RCC_OscConfig+0x124>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d157      	bne.n	80043f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e25a      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004350:	d106      	bne.n	8004360 <HAL_RCC_OscConfig+0x90>
 8004352:	4b7c      	ldr	r3, [pc, #496]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a7b      	ldr	r2, [pc, #492]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	e01d      	b.n	800439c <HAL_RCC_OscConfig+0xcc>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004368:	d10c      	bne.n	8004384 <HAL_RCC_OscConfig+0xb4>
 800436a:	4b76      	ldr	r3, [pc, #472]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a75      	ldr	r2, [pc, #468]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	4b73      	ldr	r3, [pc, #460]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a72      	ldr	r2, [pc, #456]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 800437c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e00b      	b.n	800439c <HAL_RCC_OscConfig+0xcc>
 8004384:	4b6f      	ldr	r3, [pc, #444]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a6e      	ldr	r2, [pc, #440]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 800438a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	4b6c      	ldr	r3, [pc, #432]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a6b      	ldr	r2, [pc, #428]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800439a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d013      	beq.n	80043cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7ff f84e 	bl	8003444 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ac:	f7ff f84a 	bl	8003444 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	@ 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e21f      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	4b61      	ldr	r3, [pc, #388]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0xdc>
 80043ca:	e014      	b.n	80043f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7ff f83a 	bl	8003444 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d4:	f7ff f836 	bl	8003444 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	@ 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e20b      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e6:	4b57      	ldr	r3, [pc, #348]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x104>
 80043f2:	e000      	b.n	80043f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d06f      	beq.n	80044e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004402:	4b50      	ldr	r3, [pc, #320]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b00      	cmp	r3, #0
 800440c:	d017      	beq.n	800443e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800440e:	4b4d      	ldr	r3, [pc, #308]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004416:	2b08      	cmp	r3, #8
 8004418:	d105      	bne.n	8004426 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800441a:	4b4a      	ldr	r3, [pc, #296]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004426:	4b47      	ldr	r3, [pc, #284]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800442e:	2b0c      	cmp	r3, #12
 8004430:	d11c      	bne.n	800446c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004432:	4b44      	ldr	r3, [pc, #272]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d116      	bne.n	800446c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	4b41      	ldr	r3, [pc, #260]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_RCC_OscConfig+0x186>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d001      	beq.n	8004456 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e1d3      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004456:	4b3b      	ldr	r3, [pc, #236]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4937      	ldr	r1, [pc, #220]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004466:	4313      	orrs	r3, r2
 8004468:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446a:	e03a      	b.n	80044e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d020      	beq.n	80044b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004474:	4b34      	ldr	r3, [pc, #208]	@ (8004548 <HAL_RCC_OscConfig+0x278>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fe ffe3 	bl	8003444 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004482:	f7fe ffdf 	bl	8003444 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e1b4      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004494:	4b2b      	ldr	r3, [pc, #172]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a0:	4b28      	ldr	r3, [pc, #160]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4925      	ldr	r1, [pc, #148]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]
 80044b4:	e015      	b.n	80044e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b6:	4b24      	ldr	r3, [pc, #144]	@ (8004548 <HAL_RCC_OscConfig+0x278>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fe ffc2 	bl	8003444 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c4:	f7fe ffbe 	bl	8003444 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e193      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d036      	beq.n	800455c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d016      	beq.n	8004524 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f6:	4b15      	ldr	r3, [pc, #84]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fc:	f7fe ffa2 	bl	8003444 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004504:	f7fe ff9e 	bl	8003444 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e173      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004516:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0x234>
 8004522:	e01b      	b.n	800455c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004524:	4b09      	ldr	r3, [pc, #36]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fe ff8b 	bl	8003444 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004530:	e00e      	b.n	8004550 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004532:	f7fe ff87 	bl	8003444 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d907      	bls.n	8004550 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e15c      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
 8004544:	40023800 	.word	0x40023800
 8004548:	42470000 	.word	0x42470000
 800454c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004550:	4b8a      	ldr	r3, [pc, #552]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ea      	bne.n	8004532 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8097 	beq.w	8004698 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800456e:	4b83      	ldr	r3, [pc, #524]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10f      	bne.n	800459a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	4b7f      	ldr	r3, [pc, #508]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	4a7e      	ldr	r2, [pc, #504]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004588:	6413      	str	r3, [r2, #64]	@ 0x40
 800458a:	4b7c      	ldr	r3, [pc, #496]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004596:	2301      	movs	r3, #1
 8004598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459a:	4b79      	ldr	r3, [pc, #484]	@ (8004780 <HAL_RCC_OscConfig+0x4b0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d118      	bne.n	80045d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a6:	4b76      	ldr	r3, [pc, #472]	@ (8004780 <HAL_RCC_OscConfig+0x4b0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a75      	ldr	r2, [pc, #468]	@ (8004780 <HAL_RCC_OscConfig+0x4b0>)
 80045ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b2:	f7fe ff47 	bl	8003444 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ba:	f7fe ff43 	bl	8003444 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e118      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004780 <HAL_RCC_OscConfig+0x4b0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d106      	bne.n	80045ee <HAL_RCC_OscConfig+0x31e>
 80045e0:	4b66      	ldr	r3, [pc, #408]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e4:	4a65      	ldr	r2, [pc, #404]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ec:	e01c      	b.n	8004628 <HAL_RCC_OscConfig+0x358>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d10c      	bne.n	8004610 <HAL_RCC_OscConfig+0x340>
 80045f6:	4b61      	ldr	r3, [pc, #388]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fa:	4a60      	ldr	r2, [pc, #384]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 80045fc:	f043 0304 	orr.w	r3, r3, #4
 8004600:	6713      	str	r3, [r2, #112]	@ 0x70
 8004602:	4b5e      	ldr	r3, [pc, #376]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004606:	4a5d      	ldr	r2, [pc, #372]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6713      	str	r3, [r2, #112]	@ 0x70
 800460e:	e00b      	b.n	8004628 <HAL_RCC_OscConfig+0x358>
 8004610:	4b5a      	ldr	r3, [pc, #360]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004614:	4a59      	ldr	r2, [pc, #356]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	6713      	str	r3, [r2, #112]	@ 0x70
 800461c:	4b57      	ldr	r3, [pc, #348]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004620:	4a56      	ldr	r2, [pc, #344]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004622:	f023 0304 	bic.w	r3, r3, #4
 8004626:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d015      	beq.n	800465c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fe ff08 	bl	8003444 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004636:	e00a      	b.n	800464e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004638:	f7fe ff04 	bl	8003444 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e0d7      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464e:	4b4b      	ldr	r3, [pc, #300]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ee      	beq.n	8004638 <HAL_RCC_OscConfig+0x368>
 800465a:	e014      	b.n	8004686 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fe fef2 	bl	8003444 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004662:	e00a      	b.n	800467a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f7fe feee 	bl	8003444 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e0c1      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467a:	4b40      	ldr	r3, [pc, #256]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1ee      	bne.n	8004664 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468c:	4b3b      	ldr	r3, [pc, #236]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	4a3a      	ldr	r2, [pc, #232]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004692:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004696:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80ad 	beq.w	80047fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046a2:	4b36      	ldr	r3, [pc, #216]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d060      	beq.n	8004770 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d145      	bne.n	8004742 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b6:	4b33      	ldr	r3, [pc, #204]	@ (8004784 <HAL_RCC_OscConfig+0x4b4>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fe fec2 	bl	8003444 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fe febe 	bl	8003444 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e093      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d6:	4b29      	ldr	r3, [pc, #164]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69da      	ldr	r2, [r3, #28]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	019b      	lsls	r3, r3, #6
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	3b01      	subs	r3, #1
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	061b      	lsls	r3, r3, #24
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470c:	071b      	lsls	r3, r3, #28
 800470e:	491b      	ldr	r1, [pc, #108]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004714:	4b1b      	ldr	r3, [pc, #108]	@ (8004784 <HAL_RCC_OscConfig+0x4b4>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fe fe93 	bl	8003444 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004722:	f7fe fe8f 	bl	8003444 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e064      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004734:	4b11      	ldr	r3, [pc, #68]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x452>
 8004740:	e05c      	b.n	80047fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004742:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <HAL_RCC_OscConfig+0x4b4>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fe fe7c 	bl	8003444 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004750:	f7fe fe78 	bl	8003444 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e04d      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	4b06      	ldr	r3, [pc, #24]	@ (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x480>
 800476e:	e045      	b.n	80047fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d107      	bne.n	8004788 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e040      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
 800477c:	40023800 	.word	0x40023800
 8004780:	40007000 	.word	0x40007000
 8004784:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004788:	4b1f      	ldr	r3, [pc, #124]	@ (8004808 <HAL_RCC_OscConfig+0x538>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d030      	beq.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d129      	bne.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d122      	bne.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047b8:	4013      	ands	r3, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d119      	bne.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	3b01      	subs	r3, #1
 80047d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d10f      	bne.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d107      	bne.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800

0800480c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e07b      	b.n	8004916 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d108      	bne.n	8004838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800482e:	d009      	beq.n	8004844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	61da      	str	r2, [r3, #28]
 8004836:	e005      	b.n	8004844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fd f9a6 	bl	8001bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800487a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c8:	ea42 0103 	orr.w	r1, r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	f003 0104 	and.w	r1, r3, #4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	f003 0210 	and.w	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004904:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e01a      	b.n	8004966 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004946:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7fd f979 	bl	8001c40 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b088      	sub	sp, #32
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_SPI_Transmit+0x22>
 800498c:	2302      	movs	r3, #2
 800498e:	e12d      	b.n	8004bec <HAL_SPI_Transmit+0x27e>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004998:	f7fe fd54 	bl	8003444 <HAL_GetTick>
 800499c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d002      	beq.n	80049b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049ae:	2302      	movs	r3, #2
 80049b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049b2:	e116      	b.n	8004be2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_SPI_Transmit+0x52>
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049c4:	e10d      	b.n	8004be2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2203      	movs	r2, #3
 80049ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	88fa      	ldrh	r2, [r7, #6]
 80049de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a0c:	d10f      	bne.n	8004a2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b40      	cmp	r3, #64	@ 0x40
 8004a3a:	d007      	beq.n	8004a4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a54:	d14f      	bne.n	8004af6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_SPI_Transmit+0xf6>
 8004a5e:	8afb      	ldrh	r3, [r7, #22]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d142      	bne.n	8004aea <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a68:	881a      	ldrh	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	1c9a      	adds	r2, r3, #2
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a88:	e02f      	b.n	8004aea <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d112      	bne.n	8004abe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9c:	881a      	ldrh	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa8:	1c9a      	adds	r2, r3, #2
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004abc:	e015      	b.n	8004aea <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004abe:	f7fe fcc1 	bl	8003444 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d803      	bhi.n	8004ad6 <HAL_SPI_Transmit+0x168>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d102      	bne.n	8004adc <HAL_SPI_Transmit+0x16e>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004ae8:	e07b      	b.n	8004be2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ca      	bne.n	8004a8a <HAL_SPI_Transmit+0x11c>
 8004af4:	e050      	b.n	8004b98 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_SPI_Transmit+0x196>
 8004afe:	8afb      	ldrh	r3, [r7, #22]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d144      	bne.n	8004b8e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	7812      	ldrb	r2, [r2, #0]
 8004b10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b2a:	e030      	b.n	8004b8e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d113      	bne.n	8004b62 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b60:	e015      	b.n	8004b8e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b62:	f7fe fc6f 	bl	8003444 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d803      	bhi.n	8004b7a <HAL_SPI_Transmit+0x20c>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d102      	bne.n	8004b80 <HAL_SPI_Transmit+0x212>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d106      	bne.n	8004b8e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004b8c:	e029      	b.n	8004be2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1c9      	bne.n	8004b2c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	6839      	ldr	r1, [r7, #0]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fa6f 	bl	8005080 <SPI_EndRxTxTransaction>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e003      	b.n	8004be2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004bea:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08c      	sub	sp, #48	@ 0x30
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c02:	2301      	movs	r3, #1
 8004c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x26>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e198      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x358>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c22:	f7fe fc0f 	bl	8003444 <HAL_GetTick>
 8004c26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c38:	887b      	ldrh	r3, [r7, #2]
 8004c3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d00f      	beq.n	8004c64 <HAL_SPI_TransmitReceive+0x70>
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c4a:	d107      	bne.n	8004c5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d103      	bne.n	8004c5c <HAL_SPI_TransmitReceive+0x68>
 8004c54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d003      	beq.n	8004c64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004c62:	e16d      	b.n	8004f40 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0x82>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0x82>
 8004c70:	887b      	ldrh	r3, [r7, #2]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004c7c:	e160      	b.n	8004f40 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d003      	beq.n	8004c92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2205      	movs	r2, #5
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	887a      	ldrh	r2, [r7, #2]
 8004ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	887a      	ldrh	r2, [r7, #2]
 8004ca8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	887a      	ldrh	r2, [r7, #2]
 8004cb4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	887a      	ldrh	r2, [r7, #2]
 8004cba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd2:	2b40      	cmp	r3, #64	@ 0x40
 8004cd4:	d007      	beq.n	8004ce6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ce4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cee:	d17c      	bne.n	8004dea <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x10a>
 8004cf8:	8b7b      	ldrh	r3, [r7, #26]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d16a      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d02:	881a      	ldrh	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	1c9a      	adds	r2, r3, #2
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d22:	e057      	b.n	8004dd4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d11b      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x176>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d016      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0x176>
 8004d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d113      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d46:	881a      	ldrh	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d52:	1c9a      	adds	r2, r3, #2
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d119      	bne.n	8004dac <HAL_SPI_TransmitReceive+0x1b8>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d014      	beq.n	8004dac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	b292      	uxth	r2, r2
 8004d8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d94:	1c9a      	adds	r2, r3, #2
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004da8:	2301      	movs	r3, #1
 8004daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dac:	f7fe fb4a 	bl	8003444 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d80b      	bhi.n	8004dd4 <HAL_SPI_TransmitReceive+0x1e0>
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d007      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004dd2:	e0b5      	b.n	8004f40 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1a2      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x130>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d19d      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x130>
 8004de8:	e080      	b.n	8004eec <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x204>
 8004df2:	8b7b      	ldrh	r3, [r7, #26]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d16f      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	330c      	adds	r3, #12
 8004e02:	7812      	ldrb	r2, [r2, #0]
 8004e04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e1e:	e05b      	b.n	8004ed8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d11c      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x274>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d017      	beq.n	8004e68 <HAL_SPI_TransmitReceive+0x274>
 8004e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d114      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d119      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x2b6>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d014      	beq.n	8004eaa <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eaa:	f7fe facb 	bl	8003444 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d803      	bhi.n	8004ec2 <HAL_SPI_TransmitReceive+0x2ce>
 8004eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d102      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x2d4>
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d107      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004ed6:	e033      	b.n	8004f40 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d19e      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x22c>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d199      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f8c5 	bl	8005080 <SPI_EndRxTxTransaction>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d006      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004f08:	e01a      	b.n	8004f40 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f36:	e003      	b.n	8004f40 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3730      	adds	r7, #48	@ 0x30
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f62:	b2db      	uxtb	r3, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f80:	f7fe fa60 	bl	8003444 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f90:	f7fe fa58 	bl	8003444 <HAL_GetTick>
 8004f94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f96:	4b39      	ldr	r3, [pc, #228]	@ (800507c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	015b      	lsls	r3, r3, #5
 8004f9c:	0d1b      	lsrs	r3, r3, #20
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	fb02 f303 	mul.w	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fa6:	e054      	b.n	8005052 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d050      	beq.n	8005052 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fb0:	f7fe fa48 	bl	8003444 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d902      	bls.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d13d      	bne.n	8005042 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fde:	d111      	bne.n	8005004 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe8:	d004      	beq.n	8004ff4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff2:	d107      	bne.n	8005004 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005002:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800500c:	d10f      	bne.n	800502e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800502c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e017      	b.n	8005072 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3b01      	subs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	429a      	cmp	r2, r3
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	429a      	cmp	r2, r3
 800506e:	d19b      	bne.n	8004fa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3720      	adds	r7, #32
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	2000006c 	.word	0x2000006c

08005080 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2201      	movs	r2, #1
 8005094:	2102      	movs	r1, #2
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f7ff ff6a 	bl	8004f70 <SPI_WaitFlagStateUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a6:	f043 0220 	orr.w	r2, r3, #32
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e032      	b.n	8005118 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <SPI_EndRxTxTransaction+0xa0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005124 <SPI_EndRxTxTransaction+0xa4>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	0d5b      	lsrs	r3, r3, #21
 80050be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050d0:	d112      	bne.n	80050f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2200      	movs	r2, #0
 80050da:	2180      	movs	r1, #128	@ 0x80
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff ff47 	bl	8004f70 <SPI_WaitFlagStateUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d016      	beq.n	8005116 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ec:	f043 0220 	orr.w	r2, r3, #32
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e00f      	b.n	8005118 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	3b01      	subs	r3, #1
 8005102:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510e:	2b80      	cmp	r3, #128	@ 0x80
 8005110:	d0f2      	beq.n	80050f8 <SPI_EndRxTxTransaction+0x78>
 8005112:	e000      	b.n	8005116 <SPI_EndRxTxTransaction+0x96>
        break;
 8005114:	bf00      	nop
  }

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	2000006c 	.word	0x2000006c
 8005124:	165e9f81 	.word	0x165e9f81

08005128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e041      	b.n	80051be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fc fd94 	bl	8001c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3304      	adds	r3, #4
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f000 fa7e 	bl	8005668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d001      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e04e      	b.n	800527e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a23      	ldr	r2, [pc, #140]	@ (800528c <HAL_TIM_Base_Start_IT+0xc4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d022      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520a:	d01d      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1f      	ldr	r2, [pc, #124]	@ (8005290 <HAL_TIM_Base_Start_IT+0xc8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1e      	ldr	r2, [pc, #120]	@ (8005294 <HAL_TIM_Base_Start_IT+0xcc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1c      	ldr	r2, [pc, #112]	@ (8005298 <HAL_TIM_Base_Start_IT+0xd0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1b      	ldr	r2, [pc, #108]	@ (800529c <HAL_TIM_Base_Start_IT+0xd4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a19      	ldr	r2, [pc, #100]	@ (80052a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a18      	ldr	r2, [pc, #96]	@ (80052a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d111      	bne.n	800526c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b06      	cmp	r3, #6
 8005258:	d010      	beq.n	800527c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	e007      	b.n	800527c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40010000 	.word	0x40010000
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40010400 	.word	0x40010400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40001800 	.word	0x40001800

080052a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d020      	beq.n	800530c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01b      	beq.n	800530c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0202 	mvn.w	r2, #2
 80052dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f999 	bl	800562a <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f98b 	bl	8005616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f99c 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d020      	beq.n	8005358 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01b      	beq.n	8005358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0204 	mvn.w	r2, #4
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f973 	bl	800562a <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f965 	bl	8005616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f976 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b00      	cmp	r3, #0
 8005360:	d020      	beq.n	80053a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01b      	beq.n	80053a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0208 	mvn.w	r2, #8
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2204      	movs	r2, #4
 800537a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f94d 	bl	800562a <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f93f 	bl	8005616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f950 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d020      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01b      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0210 	mvn.w	r2, #16
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2208      	movs	r2, #8
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f927 	bl	800562a <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f919 	bl	8005616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f92a 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00c      	beq.n	8005414 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0201 	mvn.w	r2, #1
 800540c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fb fe60 	bl	80010d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fae4 	bl	8005a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f8fb 	bl	8005652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0220 	mvn.w	r2, #32
 8005478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fab6 	bl	80059ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_TIM_ConfigClockSource+0x1c>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e0b4      	b.n	800560e <HAL_TIM_ConfigClockSource+0x186>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054dc:	d03e      	beq.n	800555c <HAL_TIM_ConfigClockSource+0xd4>
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054e2:	f200 8087 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ea:	f000 8086 	beq.w	80055fa <HAL_TIM_ConfigClockSource+0x172>
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f2:	d87f      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b70      	cmp	r3, #112	@ 0x70
 80054f6:	d01a      	beq.n	800552e <HAL_TIM_ConfigClockSource+0xa6>
 80054f8:	2b70      	cmp	r3, #112	@ 0x70
 80054fa:	d87b      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b60      	cmp	r3, #96	@ 0x60
 80054fe:	d050      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005500:	2b60      	cmp	r3, #96	@ 0x60
 8005502:	d877      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b50      	cmp	r3, #80	@ 0x50
 8005506:	d03c      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0xfa>
 8005508:	2b50      	cmp	r3, #80	@ 0x50
 800550a:	d873      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b40      	cmp	r3, #64	@ 0x40
 800550e:	d058      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005510:	2b40      	cmp	r3, #64	@ 0x40
 8005512:	d86f      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b30      	cmp	r3, #48	@ 0x30
 8005516:	d064      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005518:	2b30      	cmp	r3, #48	@ 0x30
 800551a:	d86b      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d060      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005520:	2b20      	cmp	r3, #32
 8005522:	d867      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d05c      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005528:	2b10      	cmp	r3, #16
 800552a:	d05a      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15a>
 800552c:	e062      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800553e:	f000 f9b9 	bl	80058b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	609a      	str	r2, [r3, #8]
      break;
 800555a:	e04f      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800556c:	f000 f9a2 	bl	80058b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800557e:	609a      	str	r2, [r3, #8]
      break;
 8005580:	e03c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	461a      	mov	r2, r3
 8005590:	f000 f916 	bl	80057c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2150      	movs	r1, #80	@ 0x50
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f96f 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 80055a0:	e02c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 f935 	bl	800581e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2160      	movs	r1, #96	@ 0x60
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f95f 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 80055c0:	e01c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 f8f6 	bl	80057c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2140      	movs	r1, #64	@ 0x40
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f94f 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 80055e0:	e00c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f000 f946 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 80055f2:	e003      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
      break;
 80055f8:	e000      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a46      	ldr	r2, [pc, #280]	@ (8005794 <TIM_Base_SetConfig+0x12c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d013      	beq.n	80056a8 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005686:	d00f      	beq.n	80056a8 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a43      	ldr	r2, [pc, #268]	@ (8005798 <TIM_Base_SetConfig+0x130>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00b      	beq.n	80056a8 <TIM_Base_SetConfig+0x40>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a42      	ldr	r2, [pc, #264]	@ (800579c <TIM_Base_SetConfig+0x134>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d007      	beq.n	80056a8 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a41      	ldr	r2, [pc, #260]	@ (80057a0 <TIM_Base_SetConfig+0x138>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d003      	beq.n	80056a8 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a40      	ldr	r2, [pc, #256]	@ (80057a4 <TIM_Base_SetConfig+0x13c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d108      	bne.n	80056ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a35      	ldr	r2, [pc, #212]	@ (8005794 <TIM_Base_SetConfig+0x12c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d02b      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c8:	d027      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a32      	ldr	r2, [pc, #200]	@ (8005798 <TIM_Base_SetConfig+0x130>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d023      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a31      	ldr	r2, [pc, #196]	@ (800579c <TIM_Base_SetConfig+0x134>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d01f      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a30      	ldr	r2, [pc, #192]	@ (80057a0 <TIM_Base_SetConfig+0x138>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d01b      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2f      	ldr	r2, [pc, #188]	@ (80057a4 <TIM_Base_SetConfig+0x13c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d017      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2e      	ldr	r2, [pc, #184]	@ (80057a8 <TIM_Base_SetConfig+0x140>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2d      	ldr	r2, [pc, #180]	@ (80057ac <TIM_Base_SetConfig+0x144>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00f      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2c      	ldr	r2, [pc, #176]	@ (80057b0 <TIM_Base_SetConfig+0x148>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00b      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2b      	ldr	r2, [pc, #172]	@ (80057b4 <TIM_Base_SetConfig+0x14c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d007      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2a      	ldr	r2, [pc, #168]	@ (80057b8 <TIM_Base_SetConfig+0x150>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d003      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a29      	ldr	r2, [pc, #164]	@ (80057bc <TIM_Base_SetConfig+0x154>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d108      	bne.n	800572c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a10      	ldr	r2, [pc, #64]	@ (8005794 <TIM_Base_SetConfig+0x12c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d003      	beq.n	8005760 <TIM_Base_SetConfig+0xf8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a12      	ldr	r2, [pc, #72]	@ (80057a4 <TIM_Base_SetConfig+0x13c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d103      	bne.n	8005768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b01      	cmp	r3, #1
 8005778:	d105      	bne.n	8005786 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f023 0201 	bic.w	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	611a      	str	r2, [r3, #16]
  }
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40010000 	.word	0x40010000
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800
 80057a0:	40000c00 	.word	0x40000c00
 80057a4:	40010400 	.word	0x40010400
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800
 80057b4:	40001800 	.word	0x40001800
 80057b8:	40001c00 	.word	0x40001c00
 80057bc:	40002000 	.word	0x40002000

080057c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f023 0201 	bic.w	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 030a 	bic.w	r3, r3, #10
 80057fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581e:	b480      	push	{r7}
 8005820:	b087      	sub	sp, #28
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	f023 0210 	bic.w	r2, r3, #16
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	031b      	lsls	r3, r3, #12
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800585a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	f043 0307 	orr.w	r3, r3, #7
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	609a      	str	r2, [r3, #8]
}
 80058a8:	bf00      	nop
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	021a      	lsls	r2, r3, #8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	609a      	str	r2, [r3, #8]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005908:	2302      	movs	r3, #2
 800590a:	e05a      	b.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a21      	ldr	r2, [pc, #132]	@ (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005958:	d01d      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1d      	ldr	r2, [pc, #116]	@ (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1b      	ldr	r2, [pc, #108]	@ (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1a      	ldr	r2, [pc, #104]	@ (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a18      	ldr	r2, [pc, #96]	@ (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a17      	ldr	r2, [pc, #92]	@ (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a15      	ldr	r2, [pc, #84]	@ (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10c      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800599c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	40010400 	.word	0x40010400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40001800 	.word	0x40001800

080059ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e042      	b.n	8005aac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fc f944 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2224      	movs	r2, #36	@ 0x24
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f973 	bl	8005d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695a      	ldr	r2, [r3, #20]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	@ 0x28
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d175      	bne.n	8005bc0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <HAL_UART_Transmit+0x2c>
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e06e      	b.n	8005bc2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2221      	movs	r2, #33	@ 0x21
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005af2:	f7fd fca7 	bl	8003444 <HAL_GetTick>
 8005af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	88fa      	ldrh	r2, [r7, #6]
 8005b02:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0c:	d108      	bne.n	8005b20 <HAL_UART_Transmit+0x6c>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d104      	bne.n	8005b20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	e003      	b.n	8005b28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b28:	e02e      	b.n	8005b88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2200      	movs	r2, #0
 8005b32:	2180      	movs	r1, #128	@ 0x80
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f848 	bl	8005bca <UART_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e03a      	b.n	8005bc2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10b      	bne.n	8005b6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	3302      	adds	r3, #2
 8005b66:	61bb      	str	r3, [r7, #24]
 8005b68:	e007      	b.n	8005b7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	3301      	adds	r3, #1
 8005b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1cb      	bne.n	8005b2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2140      	movs	r1, #64	@ 0x40
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f814 	bl	8005bca <UART_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e006      	b.n	8005bc2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e000      	b.n	8005bc2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
  }
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b086      	sub	sp, #24
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	603b      	str	r3, [r7, #0]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bda:	e03b      	b.n	8005c54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d037      	beq.n	8005c54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be4:	f7fd fc2e 	bl	8003444 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d302      	bcc.n	8005bfa <UART_WaitOnFlagUntilTimeout+0x30>
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e03a      	b.n	8005c74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d023      	beq.n	8005c54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b80      	cmp	r3, #128	@ 0x80
 8005c10:	d020      	beq.n	8005c54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b40      	cmp	r3, #64	@ 0x40
 8005c16:	d01d      	beq.n	8005c54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d116      	bne.n	8005c54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f81d 	bl	8005c7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2208      	movs	r2, #8
 8005c46:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e00f      	b.n	8005c74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d0b4      	beq.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b095      	sub	sp, #84	@ 0x54
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ca4:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005caa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e5      	bne.n	8005c84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3314      	adds	r3, #20
 8005cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f023 0301 	bic.w	r3, r3, #1
 8005cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d119      	bne.n	8005d28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f023 0310 	bic.w	r3, r3, #16
 8005d0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	330c      	adds	r3, #12
 8005d12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d14:	61ba      	str	r2, [r7, #24]
 8005d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6979      	ldr	r1, [r7, #20]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	613b      	str	r3, [r7, #16]
   return(result);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e5      	bne.n	8005cf4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d36:	bf00      	nop
 8005d38:	3754      	adds	r7, #84	@ 0x54
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
	...

08005d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d48:	b0c0      	sub	sp, #256	@ 0x100
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d60:	68d9      	ldr	r1, [r3, #12]
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	ea40 0301 	orr.w	r3, r0, r1
 8005d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d9c:	f021 010c 	bic.w	r1, r1, #12
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005daa:	430b      	orrs	r3, r1
 8005dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbe:	6999      	ldr	r1, [r3, #24]
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	ea40 0301 	orr.w	r3, r0, r1
 8005dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b8f      	ldr	r3, [pc, #572]	@ (8006010 <UART_SetConfig+0x2cc>)
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d005      	beq.n	8005de4 <UART_SetConfig+0xa0>
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b8d      	ldr	r3, [pc, #564]	@ (8006014 <UART_SetConfig+0x2d0>)
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d104      	bne.n	8005dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005de4:	f7fe f830 	bl	8003e48 <HAL_RCC_GetPCLK2Freq>
 8005de8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005dec:	e003      	b.n	8005df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dee:	f7fe f817 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8005df2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e00:	f040 810c 	bne.w	800601c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e16:	4622      	mov	r2, r4
 8005e18:	462b      	mov	r3, r5
 8005e1a:	1891      	adds	r1, r2, r2
 8005e1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e1e:	415b      	adcs	r3, r3
 8005e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e26:	4621      	mov	r1, r4
 8005e28:	eb12 0801 	adds.w	r8, r2, r1
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	eb43 0901 	adc.w	r9, r3, r1
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e46:	4690      	mov	r8, r2
 8005e48:	4699      	mov	r9, r3
 8005e4a:	4623      	mov	r3, r4
 8005e4c:	eb18 0303 	adds.w	r3, r8, r3
 8005e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e54:	462b      	mov	r3, r5
 8005e56:	eb49 0303 	adc.w	r3, r9, r3
 8005e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e72:	460b      	mov	r3, r1
 8005e74:	18db      	adds	r3, r3, r3
 8005e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e78:	4613      	mov	r3, r2
 8005e7a:	eb42 0303 	adc.w	r3, r2, r3
 8005e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e88:	f7fa feae 	bl	8000be8 <__aeabi_uldivmod>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4b61      	ldr	r3, [pc, #388]	@ (8006018 <UART_SetConfig+0x2d4>)
 8005e92:	fba3 2302 	umull	r2, r3, r3, r2
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	011c      	lsls	r4, r3, #4
 8005e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005eac:	4642      	mov	r2, r8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	1891      	adds	r1, r2, r2
 8005eb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005eb4:	415b      	adcs	r3, r3
 8005eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005edc:	4692      	mov	sl, r2
 8005ede:	469b      	mov	fp, r3
 8005ee0:	4643      	mov	r3, r8
 8005ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eea:	464b      	mov	r3, r9
 8005eec:	eb4b 0303 	adc.w	r3, fp, r3
 8005ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	18db      	adds	r3, r3, r3
 8005f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f0e:	4613      	mov	r3, r2
 8005f10:	eb42 0303 	adc.w	r3, r2, r3
 8005f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f1e:	f7fa fe63 	bl	8000be8 <__aeabi_uldivmod>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4611      	mov	r1, r2
 8005f28:	4b3b      	ldr	r3, [pc, #236]	@ (8006018 <UART_SetConfig+0x2d4>)
 8005f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	2264      	movs	r2, #100	@ 0x64
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	1acb      	subs	r3, r1, r3
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f3e:	4b36      	ldr	r3, [pc, #216]	@ (8006018 <UART_SetConfig+0x2d4>)
 8005f40:	fba3 2302 	umull	r2, r3, r3, r2
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f4c:	441c      	add	r4, r3
 8005f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f60:	4642      	mov	r2, r8
 8005f62:	464b      	mov	r3, r9
 8005f64:	1891      	adds	r1, r2, r2
 8005f66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f68:	415b      	adcs	r3, r3
 8005f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f70:	4641      	mov	r1, r8
 8005f72:	1851      	adds	r1, r2, r1
 8005f74:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f76:	4649      	mov	r1, r9
 8005f78:	414b      	adcs	r3, r1
 8005f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f88:	4659      	mov	r1, fp
 8005f8a:	00cb      	lsls	r3, r1, #3
 8005f8c:	4651      	mov	r1, sl
 8005f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f92:	4651      	mov	r1, sl
 8005f94:	00ca      	lsls	r2, r1, #3
 8005f96:	4610      	mov	r0, r2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	4642      	mov	r2, r8
 8005f9e:	189b      	adds	r3, r3, r2
 8005fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	460a      	mov	r2, r1
 8005fa8:	eb42 0303 	adc.w	r3, r2, r3
 8005fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	18db      	adds	r3, r3, r3
 8005fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fca:	4613      	mov	r3, r2
 8005fcc:	eb42 0303 	adc.w	r3, r2, r3
 8005fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fda:	f7fa fe05 	bl	8000be8 <__aeabi_uldivmod>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <UART_SetConfig+0x2d4>)
 8005fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	2164      	movs	r1, #100	@ 0x64
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	3332      	adds	r3, #50	@ 0x32
 8005ff6:	4a08      	ldr	r2, [pc, #32]	@ (8006018 <UART_SetConfig+0x2d4>)
 8005ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	f003 0207 	and.w	r2, r3, #7
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4422      	add	r2, r4
 800600a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800600c:	e106      	b.n	800621c <UART_SetConfig+0x4d8>
 800600e:	bf00      	nop
 8006010:	40011000 	.word	0x40011000
 8006014:	40011400 	.word	0x40011400
 8006018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800601c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006020:	2200      	movs	r2, #0
 8006022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006026:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800602a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800602e:	4642      	mov	r2, r8
 8006030:	464b      	mov	r3, r9
 8006032:	1891      	adds	r1, r2, r2
 8006034:	6239      	str	r1, [r7, #32]
 8006036:	415b      	adcs	r3, r3
 8006038:	627b      	str	r3, [r7, #36]	@ 0x24
 800603a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800603e:	4641      	mov	r1, r8
 8006040:	1854      	adds	r4, r2, r1
 8006042:	4649      	mov	r1, r9
 8006044:	eb43 0501 	adc.w	r5, r3, r1
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	00eb      	lsls	r3, r5, #3
 8006052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006056:	00e2      	lsls	r2, r4, #3
 8006058:	4614      	mov	r4, r2
 800605a:	461d      	mov	r5, r3
 800605c:	4643      	mov	r3, r8
 800605e:	18e3      	adds	r3, r4, r3
 8006060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006064:	464b      	mov	r3, r9
 8006066:	eb45 0303 	adc.w	r3, r5, r3
 800606a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800607a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800608a:	4629      	mov	r1, r5
 800608c:	008b      	lsls	r3, r1, #2
 800608e:	4621      	mov	r1, r4
 8006090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006094:	4621      	mov	r1, r4
 8006096:	008a      	lsls	r2, r1, #2
 8006098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800609c:	f7fa fda4 	bl	8000be8 <__aeabi_uldivmod>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4b60      	ldr	r3, [pc, #384]	@ (8006228 <UART_SetConfig+0x4e4>)
 80060a6:	fba3 2302 	umull	r2, r3, r3, r2
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	011c      	lsls	r4, r3, #4
 80060ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	1891      	adds	r1, r2, r2
 80060c6:	61b9      	str	r1, [r7, #24]
 80060c8:	415b      	adcs	r3, r3
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060d0:	4641      	mov	r1, r8
 80060d2:	1851      	adds	r1, r2, r1
 80060d4:	6139      	str	r1, [r7, #16]
 80060d6:	4649      	mov	r1, r9
 80060d8:	414b      	adcs	r3, r1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060e8:	4659      	mov	r1, fp
 80060ea:	00cb      	lsls	r3, r1, #3
 80060ec:	4651      	mov	r1, sl
 80060ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060f2:	4651      	mov	r1, sl
 80060f4:	00ca      	lsls	r2, r1, #3
 80060f6:	4610      	mov	r0, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	4642      	mov	r2, r8
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006104:	464b      	mov	r3, r9
 8006106:	460a      	mov	r2, r1
 8006108:	eb42 0303 	adc.w	r3, r2, r3
 800610c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	67bb      	str	r3, [r7, #120]	@ 0x78
 800611a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006128:	4649      	mov	r1, r9
 800612a:	008b      	lsls	r3, r1, #2
 800612c:	4641      	mov	r1, r8
 800612e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006132:	4641      	mov	r1, r8
 8006134:	008a      	lsls	r2, r1, #2
 8006136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800613a:	f7fa fd55 	bl	8000be8 <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4611      	mov	r1, r2
 8006144:	4b38      	ldr	r3, [pc, #224]	@ (8006228 <UART_SetConfig+0x4e4>)
 8006146:	fba3 2301 	umull	r2, r3, r3, r1
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2264      	movs	r2, #100	@ 0x64
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	1acb      	subs	r3, r1, r3
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	3332      	adds	r3, #50	@ 0x32
 8006158:	4a33      	ldr	r2, [pc, #204]	@ (8006228 <UART_SetConfig+0x4e4>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006164:	441c      	add	r4, r3
 8006166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616a:	2200      	movs	r2, #0
 800616c:	673b      	str	r3, [r7, #112]	@ 0x70
 800616e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006174:	4642      	mov	r2, r8
 8006176:	464b      	mov	r3, r9
 8006178:	1891      	adds	r1, r2, r2
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	415b      	adcs	r3, r3
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006184:	4641      	mov	r1, r8
 8006186:	1851      	adds	r1, r2, r1
 8006188:	6039      	str	r1, [r7, #0]
 800618a:	4649      	mov	r1, r9
 800618c:	414b      	adcs	r3, r1
 800618e:	607b      	str	r3, [r7, #4]
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800619c:	4659      	mov	r1, fp
 800619e:	00cb      	lsls	r3, r1, #3
 80061a0:	4651      	mov	r1, sl
 80061a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061a6:	4651      	mov	r1, sl
 80061a8:	00ca      	lsls	r2, r1, #3
 80061aa:	4610      	mov	r0, r2
 80061ac:	4619      	mov	r1, r3
 80061ae:	4603      	mov	r3, r0
 80061b0:	4642      	mov	r2, r8
 80061b2:	189b      	adds	r3, r3, r2
 80061b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061b6:	464b      	mov	r3, r9
 80061b8:	460a      	mov	r2, r1
 80061ba:	eb42 0303 	adc.w	r3, r2, r3
 80061be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061d8:	4649      	mov	r1, r9
 80061da:	008b      	lsls	r3, r1, #2
 80061dc:	4641      	mov	r1, r8
 80061de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061e2:	4641      	mov	r1, r8
 80061e4:	008a      	lsls	r2, r1, #2
 80061e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061ea:	f7fa fcfd 	bl	8000be8 <__aeabi_uldivmod>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <UART_SetConfig+0x4e4>)
 80061f4:	fba3 1302 	umull	r1, r3, r3, r2
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	2164      	movs	r1, #100	@ 0x64
 80061fc:	fb01 f303 	mul.w	r3, r1, r3
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	3332      	adds	r3, #50	@ 0x32
 8006206:	4a08      	ldr	r2, [pc, #32]	@ (8006228 <UART_SetConfig+0x4e4>)
 8006208:	fba2 2303 	umull	r2, r3, r2, r3
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	f003 020f 	and.w	r2, r3, #15
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4422      	add	r2, r4
 800621a:	609a      	str	r2, [r3, #8]
}
 800621c:	bf00      	nop
 800621e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006222:	46bd      	mov	sp, r7
 8006224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006228:	51eb851f 	.word	0x51eb851f

0800622c <__cvt>:
 800622c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006230:	ec57 6b10 	vmov	r6, r7, d0
 8006234:	2f00      	cmp	r7, #0
 8006236:	460c      	mov	r4, r1
 8006238:	4619      	mov	r1, r3
 800623a:	463b      	mov	r3, r7
 800623c:	bfbb      	ittet	lt
 800623e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006242:	461f      	movlt	r7, r3
 8006244:	2300      	movge	r3, #0
 8006246:	232d      	movlt	r3, #45	@ 0x2d
 8006248:	700b      	strb	r3, [r1, #0]
 800624a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800624c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006250:	4691      	mov	r9, r2
 8006252:	f023 0820 	bic.w	r8, r3, #32
 8006256:	bfbc      	itt	lt
 8006258:	4632      	movlt	r2, r6
 800625a:	4616      	movlt	r6, r2
 800625c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006260:	d005      	beq.n	800626e <__cvt+0x42>
 8006262:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006266:	d100      	bne.n	800626a <__cvt+0x3e>
 8006268:	3401      	adds	r4, #1
 800626a:	2102      	movs	r1, #2
 800626c:	e000      	b.n	8006270 <__cvt+0x44>
 800626e:	2103      	movs	r1, #3
 8006270:	ab03      	add	r3, sp, #12
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	ab02      	add	r3, sp, #8
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	ec47 6b10 	vmov	d0, r6, r7
 800627c:	4653      	mov	r3, sl
 800627e:	4622      	mov	r2, r4
 8006280:	f000 fe4e 	bl	8006f20 <_dtoa_r>
 8006284:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006288:	4605      	mov	r5, r0
 800628a:	d119      	bne.n	80062c0 <__cvt+0x94>
 800628c:	f019 0f01 	tst.w	r9, #1
 8006290:	d00e      	beq.n	80062b0 <__cvt+0x84>
 8006292:	eb00 0904 	add.w	r9, r0, r4
 8006296:	2200      	movs	r2, #0
 8006298:	2300      	movs	r3, #0
 800629a:	4630      	mov	r0, r6
 800629c:	4639      	mov	r1, r7
 800629e:	f7fa fc33 	bl	8000b08 <__aeabi_dcmpeq>
 80062a2:	b108      	cbz	r0, 80062a8 <__cvt+0x7c>
 80062a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80062a8:	2230      	movs	r2, #48	@ 0x30
 80062aa:	9b03      	ldr	r3, [sp, #12]
 80062ac:	454b      	cmp	r3, r9
 80062ae:	d31e      	bcc.n	80062ee <__cvt+0xc2>
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062b4:	1b5b      	subs	r3, r3, r5
 80062b6:	4628      	mov	r0, r5
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	b004      	add	sp, #16
 80062bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062c4:	eb00 0904 	add.w	r9, r0, r4
 80062c8:	d1e5      	bne.n	8006296 <__cvt+0x6a>
 80062ca:	7803      	ldrb	r3, [r0, #0]
 80062cc:	2b30      	cmp	r3, #48	@ 0x30
 80062ce:	d10a      	bne.n	80062e6 <__cvt+0xba>
 80062d0:	2200      	movs	r2, #0
 80062d2:	2300      	movs	r3, #0
 80062d4:	4630      	mov	r0, r6
 80062d6:	4639      	mov	r1, r7
 80062d8:	f7fa fc16 	bl	8000b08 <__aeabi_dcmpeq>
 80062dc:	b918      	cbnz	r0, 80062e6 <__cvt+0xba>
 80062de:	f1c4 0401 	rsb	r4, r4, #1
 80062e2:	f8ca 4000 	str.w	r4, [sl]
 80062e6:	f8da 3000 	ldr.w	r3, [sl]
 80062ea:	4499      	add	r9, r3
 80062ec:	e7d3      	b.n	8006296 <__cvt+0x6a>
 80062ee:	1c59      	adds	r1, r3, #1
 80062f0:	9103      	str	r1, [sp, #12]
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	e7d9      	b.n	80062aa <__cvt+0x7e>

080062f6 <__exponent>:
 80062f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062f8:	2900      	cmp	r1, #0
 80062fa:	bfba      	itte	lt
 80062fc:	4249      	neglt	r1, r1
 80062fe:	232d      	movlt	r3, #45	@ 0x2d
 8006300:	232b      	movge	r3, #43	@ 0x2b
 8006302:	2909      	cmp	r1, #9
 8006304:	7002      	strb	r2, [r0, #0]
 8006306:	7043      	strb	r3, [r0, #1]
 8006308:	dd29      	ble.n	800635e <__exponent+0x68>
 800630a:	f10d 0307 	add.w	r3, sp, #7
 800630e:	461d      	mov	r5, r3
 8006310:	270a      	movs	r7, #10
 8006312:	461a      	mov	r2, r3
 8006314:	fbb1 f6f7 	udiv	r6, r1, r7
 8006318:	fb07 1416 	mls	r4, r7, r6, r1
 800631c:	3430      	adds	r4, #48	@ 0x30
 800631e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006322:	460c      	mov	r4, r1
 8006324:	2c63      	cmp	r4, #99	@ 0x63
 8006326:	f103 33ff 	add.w	r3, r3, #4294967295
 800632a:	4631      	mov	r1, r6
 800632c:	dcf1      	bgt.n	8006312 <__exponent+0x1c>
 800632e:	3130      	adds	r1, #48	@ 0x30
 8006330:	1e94      	subs	r4, r2, #2
 8006332:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006336:	1c41      	adds	r1, r0, #1
 8006338:	4623      	mov	r3, r4
 800633a:	42ab      	cmp	r3, r5
 800633c:	d30a      	bcc.n	8006354 <__exponent+0x5e>
 800633e:	f10d 0309 	add.w	r3, sp, #9
 8006342:	1a9b      	subs	r3, r3, r2
 8006344:	42ac      	cmp	r4, r5
 8006346:	bf88      	it	hi
 8006348:	2300      	movhi	r3, #0
 800634a:	3302      	adds	r3, #2
 800634c:	4403      	add	r3, r0
 800634e:	1a18      	subs	r0, r3, r0
 8006350:	b003      	add	sp, #12
 8006352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006354:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006358:	f801 6f01 	strb.w	r6, [r1, #1]!
 800635c:	e7ed      	b.n	800633a <__exponent+0x44>
 800635e:	2330      	movs	r3, #48	@ 0x30
 8006360:	3130      	adds	r1, #48	@ 0x30
 8006362:	7083      	strb	r3, [r0, #2]
 8006364:	70c1      	strb	r1, [r0, #3]
 8006366:	1d03      	adds	r3, r0, #4
 8006368:	e7f1      	b.n	800634e <__exponent+0x58>
	...

0800636c <_printf_float>:
 800636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006370:	b08d      	sub	sp, #52	@ 0x34
 8006372:	460c      	mov	r4, r1
 8006374:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006378:	4616      	mov	r6, r2
 800637a:	461f      	mov	r7, r3
 800637c:	4605      	mov	r5, r0
 800637e:	f000 fccd 	bl	8006d1c <_localeconv_r>
 8006382:	6803      	ldr	r3, [r0, #0]
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	4618      	mov	r0, r3
 8006388:	f7f9 ff92 	bl	80002b0 <strlen>
 800638c:	2300      	movs	r3, #0
 800638e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006390:	f8d8 3000 	ldr.w	r3, [r8]
 8006394:	9005      	str	r0, [sp, #20]
 8006396:	3307      	adds	r3, #7
 8006398:	f023 0307 	bic.w	r3, r3, #7
 800639c:	f103 0208 	add.w	r2, r3, #8
 80063a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063a4:	f8d4 b000 	ldr.w	fp, [r4]
 80063a8:	f8c8 2000 	str.w	r2, [r8]
 80063ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80063b4:	9307      	str	r3, [sp, #28]
 80063b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80063ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80063be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c2:	4b9c      	ldr	r3, [pc, #624]	@ (8006634 <_printf_float+0x2c8>)
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	f7fa fbd0 	bl	8000b6c <__aeabi_dcmpun>
 80063cc:	bb70      	cbnz	r0, 800642c <_printf_float+0xc0>
 80063ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063d2:	4b98      	ldr	r3, [pc, #608]	@ (8006634 <_printf_float+0x2c8>)
 80063d4:	f04f 32ff 	mov.w	r2, #4294967295
 80063d8:	f7fa fbaa 	bl	8000b30 <__aeabi_dcmple>
 80063dc:	bb30      	cbnz	r0, 800642c <_printf_float+0xc0>
 80063de:	2200      	movs	r2, #0
 80063e0:	2300      	movs	r3, #0
 80063e2:	4640      	mov	r0, r8
 80063e4:	4649      	mov	r1, r9
 80063e6:	f7fa fb99 	bl	8000b1c <__aeabi_dcmplt>
 80063ea:	b110      	cbz	r0, 80063f2 <_printf_float+0x86>
 80063ec:	232d      	movs	r3, #45	@ 0x2d
 80063ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063f2:	4a91      	ldr	r2, [pc, #580]	@ (8006638 <_printf_float+0x2cc>)
 80063f4:	4b91      	ldr	r3, [pc, #580]	@ (800663c <_printf_float+0x2d0>)
 80063f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80063fa:	bf94      	ite	ls
 80063fc:	4690      	movls	r8, r2
 80063fe:	4698      	movhi	r8, r3
 8006400:	2303      	movs	r3, #3
 8006402:	6123      	str	r3, [r4, #16]
 8006404:	f02b 0304 	bic.w	r3, fp, #4
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	f04f 0900 	mov.w	r9, #0
 800640e:	9700      	str	r7, [sp, #0]
 8006410:	4633      	mov	r3, r6
 8006412:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 f9d2 	bl	80067c0 <_printf_common>
 800641c:	3001      	adds	r0, #1
 800641e:	f040 808d 	bne.w	800653c <_printf_float+0x1d0>
 8006422:	f04f 30ff 	mov.w	r0, #4294967295
 8006426:	b00d      	add	sp, #52	@ 0x34
 8006428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	f7fa fb9a 	bl	8000b6c <__aeabi_dcmpun>
 8006438:	b140      	cbz	r0, 800644c <_printf_float+0xe0>
 800643a:	464b      	mov	r3, r9
 800643c:	2b00      	cmp	r3, #0
 800643e:	bfbc      	itt	lt
 8006440:	232d      	movlt	r3, #45	@ 0x2d
 8006442:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006446:	4a7e      	ldr	r2, [pc, #504]	@ (8006640 <_printf_float+0x2d4>)
 8006448:	4b7e      	ldr	r3, [pc, #504]	@ (8006644 <_printf_float+0x2d8>)
 800644a:	e7d4      	b.n	80063f6 <_printf_float+0x8a>
 800644c:	6863      	ldr	r3, [r4, #4]
 800644e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006452:	9206      	str	r2, [sp, #24]
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	d13b      	bne.n	80064d0 <_printf_float+0x164>
 8006458:	2306      	movs	r3, #6
 800645a:	6063      	str	r3, [r4, #4]
 800645c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006460:	2300      	movs	r3, #0
 8006462:	6022      	str	r2, [r4, #0]
 8006464:	9303      	str	r3, [sp, #12]
 8006466:	ab0a      	add	r3, sp, #40	@ 0x28
 8006468:	e9cd a301 	strd	sl, r3, [sp, #4]
 800646c:	ab09      	add	r3, sp, #36	@ 0x24
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	6861      	ldr	r1, [r4, #4]
 8006472:	ec49 8b10 	vmov	d0, r8, r9
 8006476:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800647a:	4628      	mov	r0, r5
 800647c:	f7ff fed6 	bl	800622c <__cvt>
 8006480:	9b06      	ldr	r3, [sp, #24]
 8006482:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006484:	2b47      	cmp	r3, #71	@ 0x47
 8006486:	4680      	mov	r8, r0
 8006488:	d129      	bne.n	80064de <_printf_float+0x172>
 800648a:	1cc8      	adds	r0, r1, #3
 800648c:	db02      	blt.n	8006494 <_printf_float+0x128>
 800648e:	6863      	ldr	r3, [r4, #4]
 8006490:	4299      	cmp	r1, r3
 8006492:	dd41      	ble.n	8006518 <_printf_float+0x1ac>
 8006494:	f1aa 0a02 	sub.w	sl, sl, #2
 8006498:	fa5f fa8a 	uxtb.w	sl, sl
 800649c:	3901      	subs	r1, #1
 800649e:	4652      	mov	r2, sl
 80064a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80064a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80064a6:	f7ff ff26 	bl	80062f6 <__exponent>
 80064aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064ac:	1813      	adds	r3, r2, r0
 80064ae:	2a01      	cmp	r2, #1
 80064b0:	4681      	mov	r9, r0
 80064b2:	6123      	str	r3, [r4, #16]
 80064b4:	dc02      	bgt.n	80064bc <_printf_float+0x150>
 80064b6:	6822      	ldr	r2, [r4, #0]
 80064b8:	07d2      	lsls	r2, r2, #31
 80064ba:	d501      	bpl.n	80064c0 <_printf_float+0x154>
 80064bc:	3301      	adds	r3, #1
 80064be:	6123      	str	r3, [r4, #16]
 80064c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0a2      	beq.n	800640e <_printf_float+0xa2>
 80064c8:	232d      	movs	r3, #45	@ 0x2d
 80064ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064ce:	e79e      	b.n	800640e <_printf_float+0xa2>
 80064d0:	9a06      	ldr	r2, [sp, #24]
 80064d2:	2a47      	cmp	r2, #71	@ 0x47
 80064d4:	d1c2      	bne.n	800645c <_printf_float+0xf0>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1c0      	bne.n	800645c <_printf_float+0xf0>
 80064da:	2301      	movs	r3, #1
 80064dc:	e7bd      	b.n	800645a <_printf_float+0xee>
 80064de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064e2:	d9db      	bls.n	800649c <_printf_float+0x130>
 80064e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80064e8:	d118      	bne.n	800651c <_printf_float+0x1b0>
 80064ea:	2900      	cmp	r1, #0
 80064ec:	6863      	ldr	r3, [r4, #4]
 80064ee:	dd0b      	ble.n	8006508 <_printf_float+0x19c>
 80064f0:	6121      	str	r1, [r4, #16]
 80064f2:	b913      	cbnz	r3, 80064fa <_printf_float+0x18e>
 80064f4:	6822      	ldr	r2, [r4, #0]
 80064f6:	07d0      	lsls	r0, r2, #31
 80064f8:	d502      	bpl.n	8006500 <_printf_float+0x194>
 80064fa:	3301      	adds	r3, #1
 80064fc:	440b      	add	r3, r1
 80064fe:	6123      	str	r3, [r4, #16]
 8006500:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006502:	f04f 0900 	mov.w	r9, #0
 8006506:	e7db      	b.n	80064c0 <_printf_float+0x154>
 8006508:	b913      	cbnz	r3, 8006510 <_printf_float+0x1a4>
 800650a:	6822      	ldr	r2, [r4, #0]
 800650c:	07d2      	lsls	r2, r2, #31
 800650e:	d501      	bpl.n	8006514 <_printf_float+0x1a8>
 8006510:	3302      	adds	r3, #2
 8006512:	e7f4      	b.n	80064fe <_printf_float+0x192>
 8006514:	2301      	movs	r3, #1
 8006516:	e7f2      	b.n	80064fe <_printf_float+0x192>
 8006518:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800651c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800651e:	4299      	cmp	r1, r3
 8006520:	db05      	blt.n	800652e <_printf_float+0x1c2>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	6121      	str	r1, [r4, #16]
 8006526:	07d8      	lsls	r0, r3, #31
 8006528:	d5ea      	bpl.n	8006500 <_printf_float+0x194>
 800652a:	1c4b      	adds	r3, r1, #1
 800652c:	e7e7      	b.n	80064fe <_printf_float+0x192>
 800652e:	2900      	cmp	r1, #0
 8006530:	bfd4      	ite	le
 8006532:	f1c1 0202 	rsble	r2, r1, #2
 8006536:	2201      	movgt	r2, #1
 8006538:	4413      	add	r3, r2
 800653a:	e7e0      	b.n	80064fe <_printf_float+0x192>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	055a      	lsls	r2, r3, #21
 8006540:	d407      	bmi.n	8006552 <_printf_float+0x1e6>
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	4642      	mov	r2, r8
 8006546:	4631      	mov	r1, r6
 8006548:	4628      	mov	r0, r5
 800654a:	47b8      	blx	r7
 800654c:	3001      	adds	r0, #1
 800654e:	d12b      	bne.n	80065a8 <_printf_float+0x23c>
 8006550:	e767      	b.n	8006422 <_printf_float+0xb6>
 8006552:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006556:	f240 80dd 	bls.w	8006714 <_printf_float+0x3a8>
 800655a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800655e:	2200      	movs	r2, #0
 8006560:	2300      	movs	r3, #0
 8006562:	f7fa fad1 	bl	8000b08 <__aeabi_dcmpeq>
 8006566:	2800      	cmp	r0, #0
 8006568:	d033      	beq.n	80065d2 <_printf_float+0x266>
 800656a:	4a37      	ldr	r2, [pc, #220]	@ (8006648 <_printf_float+0x2dc>)
 800656c:	2301      	movs	r3, #1
 800656e:	4631      	mov	r1, r6
 8006570:	4628      	mov	r0, r5
 8006572:	47b8      	blx	r7
 8006574:	3001      	adds	r0, #1
 8006576:	f43f af54 	beq.w	8006422 <_printf_float+0xb6>
 800657a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800657e:	4543      	cmp	r3, r8
 8006580:	db02      	blt.n	8006588 <_printf_float+0x21c>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	07d8      	lsls	r0, r3, #31
 8006586:	d50f      	bpl.n	80065a8 <_printf_float+0x23c>
 8006588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800658c:	4631      	mov	r1, r6
 800658e:	4628      	mov	r0, r5
 8006590:	47b8      	blx	r7
 8006592:	3001      	adds	r0, #1
 8006594:	f43f af45 	beq.w	8006422 <_printf_float+0xb6>
 8006598:	f04f 0900 	mov.w	r9, #0
 800659c:	f108 38ff 	add.w	r8, r8, #4294967295
 80065a0:	f104 0a1a 	add.w	sl, r4, #26
 80065a4:	45c8      	cmp	r8, r9
 80065a6:	dc09      	bgt.n	80065bc <_printf_float+0x250>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	079b      	lsls	r3, r3, #30
 80065ac:	f100 8103 	bmi.w	80067b6 <_printf_float+0x44a>
 80065b0:	68e0      	ldr	r0, [r4, #12]
 80065b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065b4:	4298      	cmp	r0, r3
 80065b6:	bfb8      	it	lt
 80065b8:	4618      	movlt	r0, r3
 80065ba:	e734      	b.n	8006426 <_printf_float+0xba>
 80065bc:	2301      	movs	r3, #1
 80065be:	4652      	mov	r2, sl
 80065c0:	4631      	mov	r1, r6
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b8      	blx	r7
 80065c6:	3001      	adds	r0, #1
 80065c8:	f43f af2b 	beq.w	8006422 <_printf_float+0xb6>
 80065cc:	f109 0901 	add.w	r9, r9, #1
 80065d0:	e7e8      	b.n	80065a4 <_printf_float+0x238>
 80065d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dc39      	bgt.n	800664c <_printf_float+0x2e0>
 80065d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006648 <_printf_float+0x2dc>)
 80065da:	2301      	movs	r3, #1
 80065dc:	4631      	mov	r1, r6
 80065de:	4628      	mov	r0, r5
 80065e0:	47b8      	blx	r7
 80065e2:	3001      	adds	r0, #1
 80065e4:	f43f af1d 	beq.w	8006422 <_printf_float+0xb6>
 80065e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80065ec:	ea59 0303 	orrs.w	r3, r9, r3
 80065f0:	d102      	bne.n	80065f8 <_printf_float+0x28c>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	07d9      	lsls	r1, r3, #31
 80065f6:	d5d7      	bpl.n	80065a8 <_printf_float+0x23c>
 80065f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f af0d 	beq.w	8006422 <_printf_float+0xb6>
 8006608:	f04f 0a00 	mov.w	sl, #0
 800660c:	f104 0b1a 	add.w	fp, r4, #26
 8006610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006612:	425b      	negs	r3, r3
 8006614:	4553      	cmp	r3, sl
 8006616:	dc01      	bgt.n	800661c <_printf_float+0x2b0>
 8006618:	464b      	mov	r3, r9
 800661a:	e793      	b.n	8006544 <_printf_float+0x1d8>
 800661c:	2301      	movs	r3, #1
 800661e:	465a      	mov	r2, fp
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f aefb 	beq.w	8006422 <_printf_float+0xb6>
 800662c:	f10a 0a01 	add.w	sl, sl, #1
 8006630:	e7ee      	b.n	8006610 <_printf_float+0x2a4>
 8006632:	bf00      	nop
 8006634:	7fefffff 	.word	0x7fefffff
 8006638:	08008b98 	.word	0x08008b98
 800663c:	08008b9c 	.word	0x08008b9c
 8006640:	08008ba0 	.word	0x08008ba0
 8006644:	08008ba4 	.word	0x08008ba4
 8006648:	08008ba8 	.word	0x08008ba8
 800664c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800664e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006652:	4553      	cmp	r3, sl
 8006654:	bfa8      	it	ge
 8006656:	4653      	movge	r3, sl
 8006658:	2b00      	cmp	r3, #0
 800665a:	4699      	mov	r9, r3
 800665c:	dc36      	bgt.n	80066cc <_printf_float+0x360>
 800665e:	f04f 0b00 	mov.w	fp, #0
 8006662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006666:	f104 021a 	add.w	r2, r4, #26
 800666a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800666c:	9306      	str	r3, [sp, #24]
 800666e:	eba3 0309 	sub.w	r3, r3, r9
 8006672:	455b      	cmp	r3, fp
 8006674:	dc31      	bgt.n	80066da <_printf_float+0x36e>
 8006676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006678:	459a      	cmp	sl, r3
 800667a:	dc3a      	bgt.n	80066f2 <_printf_float+0x386>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	07da      	lsls	r2, r3, #31
 8006680:	d437      	bmi.n	80066f2 <_printf_float+0x386>
 8006682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006684:	ebaa 0903 	sub.w	r9, sl, r3
 8006688:	9b06      	ldr	r3, [sp, #24]
 800668a:	ebaa 0303 	sub.w	r3, sl, r3
 800668e:	4599      	cmp	r9, r3
 8006690:	bfa8      	it	ge
 8006692:	4699      	movge	r9, r3
 8006694:	f1b9 0f00 	cmp.w	r9, #0
 8006698:	dc33      	bgt.n	8006702 <_printf_float+0x396>
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066a2:	f104 0b1a 	add.w	fp, r4, #26
 80066a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a8:	ebaa 0303 	sub.w	r3, sl, r3
 80066ac:	eba3 0309 	sub.w	r3, r3, r9
 80066b0:	4543      	cmp	r3, r8
 80066b2:	f77f af79 	ble.w	80065a8 <_printf_float+0x23c>
 80066b6:	2301      	movs	r3, #1
 80066b8:	465a      	mov	r2, fp
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	47b8      	blx	r7
 80066c0:	3001      	adds	r0, #1
 80066c2:	f43f aeae 	beq.w	8006422 <_printf_float+0xb6>
 80066c6:	f108 0801 	add.w	r8, r8, #1
 80066ca:	e7ec      	b.n	80066a6 <_printf_float+0x33a>
 80066cc:	4642      	mov	r2, r8
 80066ce:	4631      	mov	r1, r6
 80066d0:	4628      	mov	r0, r5
 80066d2:	47b8      	blx	r7
 80066d4:	3001      	adds	r0, #1
 80066d6:	d1c2      	bne.n	800665e <_printf_float+0x2f2>
 80066d8:	e6a3      	b.n	8006422 <_printf_float+0xb6>
 80066da:	2301      	movs	r3, #1
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	9206      	str	r2, [sp, #24]
 80066e2:	47b8      	blx	r7
 80066e4:	3001      	adds	r0, #1
 80066e6:	f43f ae9c 	beq.w	8006422 <_printf_float+0xb6>
 80066ea:	9a06      	ldr	r2, [sp, #24]
 80066ec:	f10b 0b01 	add.w	fp, fp, #1
 80066f0:	e7bb      	b.n	800666a <_printf_float+0x2fe>
 80066f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	d1c0      	bne.n	8006682 <_printf_float+0x316>
 8006700:	e68f      	b.n	8006422 <_printf_float+0xb6>
 8006702:	9a06      	ldr	r2, [sp, #24]
 8006704:	464b      	mov	r3, r9
 8006706:	4442      	add	r2, r8
 8006708:	4631      	mov	r1, r6
 800670a:	4628      	mov	r0, r5
 800670c:	47b8      	blx	r7
 800670e:	3001      	adds	r0, #1
 8006710:	d1c3      	bne.n	800669a <_printf_float+0x32e>
 8006712:	e686      	b.n	8006422 <_printf_float+0xb6>
 8006714:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006718:	f1ba 0f01 	cmp.w	sl, #1
 800671c:	dc01      	bgt.n	8006722 <_printf_float+0x3b6>
 800671e:	07db      	lsls	r3, r3, #31
 8006720:	d536      	bpl.n	8006790 <_printf_float+0x424>
 8006722:	2301      	movs	r3, #1
 8006724:	4642      	mov	r2, r8
 8006726:	4631      	mov	r1, r6
 8006728:	4628      	mov	r0, r5
 800672a:	47b8      	blx	r7
 800672c:	3001      	adds	r0, #1
 800672e:	f43f ae78 	beq.w	8006422 <_printf_float+0xb6>
 8006732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	f43f ae70 	beq.w	8006422 <_printf_float+0xb6>
 8006742:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006746:	2200      	movs	r2, #0
 8006748:	2300      	movs	r3, #0
 800674a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800674e:	f7fa f9db 	bl	8000b08 <__aeabi_dcmpeq>
 8006752:	b9c0      	cbnz	r0, 8006786 <_printf_float+0x41a>
 8006754:	4653      	mov	r3, sl
 8006756:	f108 0201 	add.w	r2, r8, #1
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	47b8      	blx	r7
 8006760:	3001      	adds	r0, #1
 8006762:	d10c      	bne.n	800677e <_printf_float+0x412>
 8006764:	e65d      	b.n	8006422 <_printf_float+0xb6>
 8006766:	2301      	movs	r3, #1
 8006768:	465a      	mov	r2, fp
 800676a:	4631      	mov	r1, r6
 800676c:	4628      	mov	r0, r5
 800676e:	47b8      	blx	r7
 8006770:	3001      	adds	r0, #1
 8006772:	f43f ae56 	beq.w	8006422 <_printf_float+0xb6>
 8006776:	f108 0801 	add.w	r8, r8, #1
 800677a:	45d0      	cmp	r8, sl
 800677c:	dbf3      	blt.n	8006766 <_printf_float+0x3fa>
 800677e:	464b      	mov	r3, r9
 8006780:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006784:	e6df      	b.n	8006546 <_printf_float+0x1da>
 8006786:	f04f 0800 	mov.w	r8, #0
 800678a:	f104 0b1a 	add.w	fp, r4, #26
 800678e:	e7f4      	b.n	800677a <_printf_float+0x40e>
 8006790:	2301      	movs	r3, #1
 8006792:	4642      	mov	r2, r8
 8006794:	e7e1      	b.n	800675a <_printf_float+0x3ee>
 8006796:	2301      	movs	r3, #1
 8006798:	464a      	mov	r2, r9
 800679a:	4631      	mov	r1, r6
 800679c:	4628      	mov	r0, r5
 800679e:	47b8      	blx	r7
 80067a0:	3001      	adds	r0, #1
 80067a2:	f43f ae3e 	beq.w	8006422 <_printf_float+0xb6>
 80067a6:	f108 0801 	add.w	r8, r8, #1
 80067aa:	68e3      	ldr	r3, [r4, #12]
 80067ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067ae:	1a5b      	subs	r3, r3, r1
 80067b0:	4543      	cmp	r3, r8
 80067b2:	dcf0      	bgt.n	8006796 <_printf_float+0x42a>
 80067b4:	e6fc      	b.n	80065b0 <_printf_float+0x244>
 80067b6:	f04f 0800 	mov.w	r8, #0
 80067ba:	f104 0919 	add.w	r9, r4, #25
 80067be:	e7f4      	b.n	80067aa <_printf_float+0x43e>

080067c0 <_printf_common>:
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	4616      	mov	r6, r2
 80067c6:	4698      	mov	r8, r3
 80067c8:	688a      	ldr	r2, [r1, #8]
 80067ca:	690b      	ldr	r3, [r1, #16]
 80067cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	bfb8      	it	lt
 80067d4:	4613      	movlt	r3, r2
 80067d6:	6033      	str	r3, [r6, #0]
 80067d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067dc:	4607      	mov	r7, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	b10a      	cbz	r2, 80067e6 <_printf_common+0x26>
 80067e2:	3301      	adds	r3, #1
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	0699      	lsls	r1, r3, #26
 80067ea:	bf42      	ittt	mi
 80067ec:	6833      	ldrmi	r3, [r6, #0]
 80067ee:	3302      	addmi	r3, #2
 80067f0:	6033      	strmi	r3, [r6, #0]
 80067f2:	6825      	ldr	r5, [r4, #0]
 80067f4:	f015 0506 	ands.w	r5, r5, #6
 80067f8:	d106      	bne.n	8006808 <_printf_common+0x48>
 80067fa:	f104 0a19 	add.w	sl, r4, #25
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	6832      	ldr	r2, [r6, #0]
 8006802:	1a9b      	subs	r3, r3, r2
 8006804:	42ab      	cmp	r3, r5
 8006806:	dc26      	bgt.n	8006856 <_printf_common+0x96>
 8006808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800680c:	6822      	ldr	r2, [r4, #0]
 800680e:	3b00      	subs	r3, #0
 8006810:	bf18      	it	ne
 8006812:	2301      	movne	r3, #1
 8006814:	0692      	lsls	r2, r2, #26
 8006816:	d42b      	bmi.n	8006870 <_printf_common+0xb0>
 8006818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800681c:	4641      	mov	r1, r8
 800681e:	4638      	mov	r0, r7
 8006820:	47c8      	blx	r9
 8006822:	3001      	adds	r0, #1
 8006824:	d01e      	beq.n	8006864 <_printf_common+0xa4>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	6922      	ldr	r2, [r4, #16]
 800682a:	f003 0306 	and.w	r3, r3, #6
 800682e:	2b04      	cmp	r3, #4
 8006830:	bf02      	ittt	eq
 8006832:	68e5      	ldreq	r5, [r4, #12]
 8006834:	6833      	ldreq	r3, [r6, #0]
 8006836:	1aed      	subeq	r5, r5, r3
 8006838:	68a3      	ldr	r3, [r4, #8]
 800683a:	bf0c      	ite	eq
 800683c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006840:	2500      	movne	r5, #0
 8006842:	4293      	cmp	r3, r2
 8006844:	bfc4      	itt	gt
 8006846:	1a9b      	subgt	r3, r3, r2
 8006848:	18ed      	addgt	r5, r5, r3
 800684a:	2600      	movs	r6, #0
 800684c:	341a      	adds	r4, #26
 800684e:	42b5      	cmp	r5, r6
 8006850:	d11a      	bne.n	8006888 <_printf_common+0xc8>
 8006852:	2000      	movs	r0, #0
 8006854:	e008      	b.n	8006868 <_printf_common+0xa8>
 8006856:	2301      	movs	r3, #1
 8006858:	4652      	mov	r2, sl
 800685a:	4641      	mov	r1, r8
 800685c:	4638      	mov	r0, r7
 800685e:	47c8      	blx	r9
 8006860:	3001      	adds	r0, #1
 8006862:	d103      	bne.n	800686c <_printf_common+0xac>
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686c:	3501      	adds	r5, #1
 800686e:	e7c6      	b.n	80067fe <_printf_common+0x3e>
 8006870:	18e1      	adds	r1, r4, r3
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	2030      	movs	r0, #48	@ 0x30
 8006876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800687a:	4422      	add	r2, r4
 800687c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006884:	3302      	adds	r3, #2
 8006886:	e7c7      	b.n	8006818 <_printf_common+0x58>
 8006888:	2301      	movs	r3, #1
 800688a:	4622      	mov	r2, r4
 800688c:	4641      	mov	r1, r8
 800688e:	4638      	mov	r0, r7
 8006890:	47c8      	blx	r9
 8006892:	3001      	adds	r0, #1
 8006894:	d0e6      	beq.n	8006864 <_printf_common+0xa4>
 8006896:	3601      	adds	r6, #1
 8006898:	e7d9      	b.n	800684e <_printf_common+0x8e>
	...

0800689c <_printf_i>:
 800689c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	7e0f      	ldrb	r7, [r1, #24]
 80068a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068a4:	2f78      	cmp	r7, #120	@ 0x78
 80068a6:	4691      	mov	r9, r2
 80068a8:	4680      	mov	r8, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	469a      	mov	sl, r3
 80068ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068b2:	d807      	bhi.n	80068c4 <_printf_i+0x28>
 80068b4:	2f62      	cmp	r7, #98	@ 0x62
 80068b6:	d80a      	bhi.n	80068ce <_printf_i+0x32>
 80068b8:	2f00      	cmp	r7, #0
 80068ba:	f000 80d2 	beq.w	8006a62 <_printf_i+0x1c6>
 80068be:	2f58      	cmp	r7, #88	@ 0x58
 80068c0:	f000 80b9 	beq.w	8006a36 <_printf_i+0x19a>
 80068c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068cc:	e03a      	b.n	8006944 <_printf_i+0xa8>
 80068ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068d2:	2b15      	cmp	r3, #21
 80068d4:	d8f6      	bhi.n	80068c4 <_printf_i+0x28>
 80068d6:	a101      	add	r1, pc, #4	@ (adr r1, 80068dc <_printf_i+0x40>)
 80068d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068dc:	08006935 	.word	0x08006935
 80068e0:	08006949 	.word	0x08006949
 80068e4:	080068c5 	.word	0x080068c5
 80068e8:	080068c5 	.word	0x080068c5
 80068ec:	080068c5 	.word	0x080068c5
 80068f0:	080068c5 	.word	0x080068c5
 80068f4:	08006949 	.word	0x08006949
 80068f8:	080068c5 	.word	0x080068c5
 80068fc:	080068c5 	.word	0x080068c5
 8006900:	080068c5 	.word	0x080068c5
 8006904:	080068c5 	.word	0x080068c5
 8006908:	08006a49 	.word	0x08006a49
 800690c:	08006973 	.word	0x08006973
 8006910:	08006a03 	.word	0x08006a03
 8006914:	080068c5 	.word	0x080068c5
 8006918:	080068c5 	.word	0x080068c5
 800691c:	08006a6b 	.word	0x08006a6b
 8006920:	080068c5 	.word	0x080068c5
 8006924:	08006973 	.word	0x08006973
 8006928:	080068c5 	.word	0x080068c5
 800692c:	080068c5 	.word	0x080068c5
 8006930:	08006a0b 	.word	0x08006a0b
 8006934:	6833      	ldr	r3, [r6, #0]
 8006936:	1d1a      	adds	r2, r3, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6032      	str	r2, [r6, #0]
 800693c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006944:	2301      	movs	r3, #1
 8006946:	e09d      	b.n	8006a84 <_printf_i+0x1e8>
 8006948:	6833      	ldr	r3, [r6, #0]
 800694a:	6820      	ldr	r0, [r4, #0]
 800694c:	1d19      	adds	r1, r3, #4
 800694e:	6031      	str	r1, [r6, #0]
 8006950:	0606      	lsls	r6, r0, #24
 8006952:	d501      	bpl.n	8006958 <_printf_i+0xbc>
 8006954:	681d      	ldr	r5, [r3, #0]
 8006956:	e003      	b.n	8006960 <_printf_i+0xc4>
 8006958:	0645      	lsls	r5, r0, #25
 800695a:	d5fb      	bpl.n	8006954 <_printf_i+0xb8>
 800695c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006960:	2d00      	cmp	r5, #0
 8006962:	da03      	bge.n	800696c <_printf_i+0xd0>
 8006964:	232d      	movs	r3, #45	@ 0x2d
 8006966:	426d      	negs	r5, r5
 8006968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800696c:	4859      	ldr	r0, [pc, #356]	@ (8006ad4 <_printf_i+0x238>)
 800696e:	230a      	movs	r3, #10
 8006970:	e011      	b.n	8006996 <_printf_i+0xfa>
 8006972:	6821      	ldr	r1, [r4, #0]
 8006974:	6833      	ldr	r3, [r6, #0]
 8006976:	0608      	lsls	r0, r1, #24
 8006978:	f853 5b04 	ldr.w	r5, [r3], #4
 800697c:	d402      	bmi.n	8006984 <_printf_i+0xe8>
 800697e:	0649      	lsls	r1, r1, #25
 8006980:	bf48      	it	mi
 8006982:	b2ad      	uxthmi	r5, r5
 8006984:	2f6f      	cmp	r7, #111	@ 0x6f
 8006986:	4853      	ldr	r0, [pc, #332]	@ (8006ad4 <_printf_i+0x238>)
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	bf14      	ite	ne
 800698c:	230a      	movne	r3, #10
 800698e:	2308      	moveq	r3, #8
 8006990:	2100      	movs	r1, #0
 8006992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006996:	6866      	ldr	r6, [r4, #4]
 8006998:	60a6      	str	r6, [r4, #8]
 800699a:	2e00      	cmp	r6, #0
 800699c:	bfa2      	ittt	ge
 800699e:	6821      	ldrge	r1, [r4, #0]
 80069a0:	f021 0104 	bicge.w	r1, r1, #4
 80069a4:	6021      	strge	r1, [r4, #0]
 80069a6:	b90d      	cbnz	r5, 80069ac <_printf_i+0x110>
 80069a8:	2e00      	cmp	r6, #0
 80069aa:	d04b      	beq.n	8006a44 <_printf_i+0x1a8>
 80069ac:	4616      	mov	r6, r2
 80069ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80069b2:	fb03 5711 	mls	r7, r3, r1, r5
 80069b6:	5dc7      	ldrb	r7, [r0, r7]
 80069b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069bc:	462f      	mov	r7, r5
 80069be:	42bb      	cmp	r3, r7
 80069c0:	460d      	mov	r5, r1
 80069c2:	d9f4      	bls.n	80069ae <_printf_i+0x112>
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d10b      	bne.n	80069e0 <_printf_i+0x144>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	07df      	lsls	r7, r3, #31
 80069cc:	d508      	bpl.n	80069e0 <_printf_i+0x144>
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	6861      	ldr	r1, [r4, #4]
 80069d2:	4299      	cmp	r1, r3
 80069d4:	bfde      	ittt	le
 80069d6:	2330      	movle	r3, #48	@ 0x30
 80069d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069e0:	1b92      	subs	r2, r2, r6
 80069e2:	6122      	str	r2, [r4, #16]
 80069e4:	f8cd a000 	str.w	sl, [sp]
 80069e8:	464b      	mov	r3, r9
 80069ea:	aa03      	add	r2, sp, #12
 80069ec:	4621      	mov	r1, r4
 80069ee:	4640      	mov	r0, r8
 80069f0:	f7ff fee6 	bl	80067c0 <_printf_common>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d14a      	bne.n	8006a8e <_printf_i+0x1f2>
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	b004      	add	sp, #16
 80069fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	f043 0320 	orr.w	r3, r3, #32
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	4833      	ldr	r0, [pc, #204]	@ (8006ad8 <_printf_i+0x23c>)
 8006a0c:	2778      	movs	r7, #120	@ 0x78
 8006a0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	6831      	ldr	r1, [r6, #0]
 8006a16:	061f      	lsls	r7, r3, #24
 8006a18:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a1c:	d402      	bmi.n	8006a24 <_printf_i+0x188>
 8006a1e:	065f      	lsls	r7, r3, #25
 8006a20:	bf48      	it	mi
 8006a22:	b2ad      	uxthmi	r5, r5
 8006a24:	6031      	str	r1, [r6, #0]
 8006a26:	07d9      	lsls	r1, r3, #31
 8006a28:	bf44      	itt	mi
 8006a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a2e:	6023      	strmi	r3, [r4, #0]
 8006a30:	b11d      	cbz	r5, 8006a3a <_printf_i+0x19e>
 8006a32:	2310      	movs	r3, #16
 8006a34:	e7ac      	b.n	8006990 <_printf_i+0xf4>
 8006a36:	4827      	ldr	r0, [pc, #156]	@ (8006ad4 <_printf_i+0x238>)
 8006a38:	e7e9      	b.n	8006a0e <_printf_i+0x172>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	f023 0320 	bic.w	r3, r3, #32
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	e7f6      	b.n	8006a32 <_printf_i+0x196>
 8006a44:	4616      	mov	r6, r2
 8006a46:	e7bd      	b.n	80069c4 <_printf_i+0x128>
 8006a48:	6833      	ldr	r3, [r6, #0]
 8006a4a:	6825      	ldr	r5, [r4, #0]
 8006a4c:	6961      	ldr	r1, [r4, #20]
 8006a4e:	1d18      	adds	r0, r3, #4
 8006a50:	6030      	str	r0, [r6, #0]
 8006a52:	062e      	lsls	r6, r5, #24
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	d501      	bpl.n	8006a5c <_printf_i+0x1c0>
 8006a58:	6019      	str	r1, [r3, #0]
 8006a5a:	e002      	b.n	8006a62 <_printf_i+0x1c6>
 8006a5c:	0668      	lsls	r0, r5, #25
 8006a5e:	d5fb      	bpl.n	8006a58 <_printf_i+0x1bc>
 8006a60:	8019      	strh	r1, [r3, #0]
 8006a62:	2300      	movs	r3, #0
 8006a64:	6123      	str	r3, [r4, #16]
 8006a66:	4616      	mov	r6, r2
 8006a68:	e7bc      	b.n	80069e4 <_printf_i+0x148>
 8006a6a:	6833      	ldr	r3, [r6, #0]
 8006a6c:	1d1a      	adds	r2, r3, #4
 8006a6e:	6032      	str	r2, [r6, #0]
 8006a70:	681e      	ldr	r6, [r3, #0]
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	2100      	movs	r1, #0
 8006a76:	4630      	mov	r0, r6
 8006a78:	f7f9 fbca 	bl	8000210 <memchr>
 8006a7c:	b108      	cbz	r0, 8006a82 <_printf_i+0x1e6>
 8006a7e:	1b80      	subs	r0, r0, r6
 8006a80:	6060      	str	r0, [r4, #4]
 8006a82:	6863      	ldr	r3, [r4, #4]
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	2300      	movs	r3, #0
 8006a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a8c:	e7aa      	b.n	80069e4 <_printf_i+0x148>
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	4632      	mov	r2, r6
 8006a92:	4649      	mov	r1, r9
 8006a94:	4640      	mov	r0, r8
 8006a96:	47d0      	blx	sl
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d0ad      	beq.n	80069f8 <_printf_i+0x15c>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	079b      	lsls	r3, r3, #30
 8006aa0:	d413      	bmi.n	8006aca <_printf_i+0x22e>
 8006aa2:	68e0      	ldr	r0, [r4, #12]
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	4298      	cmp	r0, r3
 8006aa8:	bfb8      	it	lt
 8006aaa:	4618      	movlt	r0, r3
 8006aac:	e7a6      	b.n	80069fc <_printf_i+0x160>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	47d0      	blx	sl
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d09d      	beq.n	80069f8 <_printf_i+0x15c>
 8006abc:	3501      	adds	r5, #1
 8006abe:	68e3      	ldr	r3, [r4, #12]
 8006ac0:	9903      	ldr	r1, [sp, #12]
 8006ac2:	1a5b      	subs	r3, r3, r1
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	dcf2      	bgt.n	8006aae <_printf_i+0x212>
 8006ac8:	e7eb      	b.n	8006aa2 <_printf_i+0x206>
 8006aca:	2500      	movs	r5, #0
 8006acc:	f104 0619 	add.w	r6, r4, #25
 8006ad0:	e7f5      	b.n	8006abe <_printf_i+0x222>
 8006ad2:	bf00      	nop
 8006ad4:	08008baa 	.word	0x08008baa
 8006ad8:	08008bbb 	.word	0x08008bbb

08006adc <std>:
 8006adc:	2300      	movs	r3, #0
 8006ade:	b510      	push	{r4, lr}
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aea:	6083      	str	r3, [r0, #8]
 8006aec:	8181      	strh	r1, [r0, #12]
 8006aee:	6643      	str	r3, [r0, #100]	@ 0x64
 8006af0:	81c2      	strh	r2, [r0, #14]
 8006af2:	6183      	str	r3, [r0, #24]
 8006af4:	4619      	mov	r1, r3
 8006af6:	2208      	movs	r2, #8
 8006af8:	305c      	adds	r0, #92	@ 0x5c
 8006afa:	f000 f906 	bl	8006d0a <memset>
 8006afe:	4b0d      	ldr	r3, [pc, #52]	@ (8006b34 <std+0x58>)
 8006b00:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b02:	4b0d      	ldr	r3, [pc, #52]	@ (8006b38 <std+0x5c>)
 8006b04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b06:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <std+0x60>)
 8006b08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b40 <std+0x64>)
 8006b0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b44 <std+0x68>)
 8006b10:	6224      	str	r4, [r4, #32]
 8006b12:	429c      	cmp	r4, r3
 8006b14:	d006      	beq.n	8006b24 <std+0x48>
 8006b16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b1a:	4294      	cmp	r4, r2
 8006b1c:	d002      	beq.n	8006b24 <std+0x48>
 8006b1e:	33d0      	adds	r3, #208	@ 0xd0
 8006b20:	429c      	cmp	r4, r3
 8006b22:	d105      	bne.n	8006b30 <std+0x54>
 8006b24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b2c:	f000 b96a 	b.w	8006e04 <__retarget_lock_init_recursive>
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	bf00      	nop
 8006b34:	08006c85 	.word	0x08006c85
 8006b38:	08006ca7 	.word	0x08006ca7
 8006b3c:	08006cdf 	.word	0x08006cdf
 8006b40:	08006d03 	.word	0x08006d03
 8006b44:	20001104 	.word	0x20001104

08006b48 <stdio_exit_handler>:
 8006b48:	4a02      	ldr	r2, [pc, #8]	@ (8006b54 <stdio_exit_handler+0xc>)
 8006b4a:	4903      	ldr	r1, [pc, #12]	@ (8006b58 <stdio_exit_handler+0x10>)
 8006b4c:	4803      	ldr	r0, [pc, #12]	@ (8006b5c <stdio_exit_handler+0x14>)
 8006b4e:	f000 b869 	b.w	8006c24 <_fwalk_sglue>
 8006b52:	bf00      	nop
 8006b54:	20000078 	.word	0x20000078
 8006b58:	08008739 	.word	0x08008739
 8006b5c:	20000088 	.word	0x20000088

08006b60 <cleanup_stdio>:
 8006b60:	6841      	ldr	r1, [r0, #4]
 8006b62:	4b0c      	ldr	r3, [pc, #48]	@ (8006b94 <cleanup_stdio+0x34>)
 8006b64:	4299      	cmp	r1, r3
 8006b66:	b510      	push	{r4, lr}
 8006b68:	4604      	mov	r4, r0
 8006b6a:	d001      	beq.n	8006b70 <cleanup_stdio+0x10>
 8006b6c:	f001 fde4 	bl	8008738 <_fflush_r>
 8006b70:	68a1      	ldr	r1, [r4, #8]
 8006b72:	4b09      	ldr	r3, [pc, #36]	@ (8006b98 <cleanup_stdio+0x38>)
 8006b74:	4299      	cmp	r1, r3
 8006b76:	d002      	beq.n	8006b7e <cleanup_stdio+0x1e>
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f001 fddd 	bl	8008738 <_fflush_r>
 8006b7e:	68e1      	ldr	r1, [r4, #12]
 8006b80:	4b06      	ldr	r3, [pc, #24]	@ (8006b9c <cleanup_stdio+0x3c>)
 8006b82:	4299      	cmp	r1, r3
 8006b84:	d004      	beq.n	8006b90 <cleanup_stdio+0x30>
 8006b86:	4620      	mov	r0, r4
 8006b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b8c:	f001 bdd4 	b.w	8008738 <_fflush_r>
 8006b90:	bd10      	pop	{r4, pc}
 8006b92:	bf00      	nop
 8006b94:	20001104 	.word	0x20001104
 8006b98:	2000116c 	.word	0x2000116c
 8006b9c:	200011d4 	.word	0x200011d4

08006ba0 <global_stdio_init.part.0>:
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd0 <global_stdio_init.part.0+0x30>)
 8006ba4:	4c0b      	ldr	r4, [pc, #44]	@ (8006bd4 <global_stdio_init.part.0+0x34>)
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8006bd8 <global_stdio_init.part.0+0x38>)
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	4620      	mov	r0, r4
 8006bac:	2200      	movs	r2, #0
 8006bae:	2104      	movs	r1, #4
 8006bb0:	f7ff ff94 	bl	8006adc <std>
 8006bb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bb8:	2201      	movs	r2, #1
 8006bba:	2109      	movs	r1, #9
 8006bbc:	f7ff ff8e 	bl	8006adc <std>
 8006bc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bca:	2112      	movs	r1, #18
 8006bcc:	f7ff bf86 	b.w	8006adc <std>
 8006bd0:	2000123c 	.word	0x2000123c
 8006bd4:	20001104 	.word	0x20001104
 8006bd8:	08006b49 	.word	0x08006b49

08006bdc <__sfp_lock_acquire>:
 8006bdc:	4801      	ldr	r0, [pc, #4]	@ (8006be4 <__sfp_lock_acquire+0x8>)
 8006bde:	f000 b912 	b.w	8006e06 <__retarget_lock_acquire_recursive>
 8006be2:	bf00      	nop
 8006be4:	20001245 	.word	0x20001245

08006be8 <__sfp_lock_release>:
 8006be8:	4801      	ldr	r0, [pc, #4]	@ (8006bf0 <__sfp_lock_release+0x8>)
 8006bea:	f000 b90d 	b.w	8006e08 <__retarget_lock_release_recursive>
 8006bee:	bf00      	nop
 8006bf0:	20001245 	.word	0x20001245

08006bf4 <__sinit>:
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	f7ff fff0 	bl	8006bdc <__sfp_lock_acquire>
 8006bfc:	6a23      	ldr	r3, [r4, #32]
 8006bfe:	b11b      	cbz	r3, 8006c08 <__sinit+0x14>
 8006c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c04:	f7ff bff0 	b.w	8006be8 <__sfp_lock_release>
 8006c08:	4b04      	ldr	r3, [pc, #16]	@ (8006c1c <__sinit+0x28>)
 8006c0a:	6223      	str	r3, [r4, #32]
 8006c0c:	4b04      	ldr	r3, [pc, #16]	@ (8006c20 <__sinit+0x2c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1f5      	bne.n	8006c00 <__sinit+0xc>
 8006c14:	f7ff ffc4 	bl	8006ba0 <global_stdio_init.part.0>
 8006c18:	e7f2      	b.n	8006c00 <__sinit+0xc>
 8006c1a:	bf00      	nop
 8006c1c:	08006b61 	.word	0x08006b61
 8006c20:	2000123c 	.word	0x2000123c

08006c24 <_fwalk_sglue>:
 8006c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c28:	4607      	mov	r7, r0
 8006c2a:	4688      	mov	r8, r1
 8006c2c:	4614      	mov	r4, r2
 8006c2e:	2600      	movs	r6, #0
 8006c30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c34:	f1b9 0901 	subs.w	r9, r9, #1
 8006c38:	d505      	bpl.n	8006c46 <_fwalk_sglue+0x22>
 8006c3a:	6824      	ldr	r4, [r4, #0]
 8006c3c:	2c00      	cmp	r4, #0
 8006c3e:	d1f7      	bne.n	8006c30 <_fwalk_sglue+0xc>
 8006c40:	4630      	mov	r0, r6
 8006c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c46:	89ab      	ldrh	r3, [r5, #12]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d907      	bls.n	8006c5c <_fwalk_sglue+0x38>
 8006c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c50:	3301      	adds	r3, #1
 8006c52:	d003      	beq.n	8006c5c <_fwalk_sglue+0x38>
 8006c54:	4629      	mov	r1, r5
 8006c56:	4638      	mov	r0, r7
 8006c58:	47c0      	blx	r8
 8006c5a:	4306      	orrs	r6, r0
 8006c5c:	3568      	adds	r5, #104	@ 0x68
 8006c5e:	e7e9      	b.n	8006c34 <_fwalk_sglue+0x10>

08006c60 <iprintf>:
 8006c60:	b40f      	push	{r0, r1, r2, r3}
 8006c62:	b507      	push	{r0, r1, r2, lr}
 8006c64:	4906      	ldr	r1, [pc, #24]	@ (8006c80 <iprintf+0x20>)
 8006c66:	ab04      	add	r3, sp, #16
 8006c68:	6808      	ldr	r0, [r1, #0]
 8006c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c6e:	6881      	ldr	r1, [r0, #8]
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	f001 fbc5 	bl	8008400 <_vfiprintf_r>
 8006c76:	b003      	add	sp, #12
 8006c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c7c:	b004      	add	sp, #16
 8006c7e:	4770      	bx	lr
 8006c80:	20000084 	.word	0x20000084

08006c84 <__sread>:
 8006c84:	b510      	push	{r4, lr}
 8006c86:	460c      	mov	r4, r1
 8006c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c8c:	f000 f86c 	bl	8006d68 <_read_r>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	bfab      	itete	ge
 8006c94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c96:	89a3      	ldrhlt	r3, [r4, #12]
 8006c98:	181b      	addge	r3, r3, r0
 8006c9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c9e:	bfac      	ite	ge
 8006ca0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ca2:	81a3      	strhlt	r3, [r4, #12]
 8006ca4:	bd10      	pop	{r4, pc}

08006ca6 <__swrite>:
 8006ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006caa:	461f      	mov	r7, r3
 8006cac:	898b      	ldrh	r3, [r1, #12]
 8006cae:	05db      	lsls	r3, r3, #23
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	d505      	bpl.n	8006cc4 <__swrite+0x1e>
 8006cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f000 f840 	bl	8006d44 <_lseek_r>
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	4632      	mov	r2, r6
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cda:	f000 b857 	b.w	8006d8c <_write_r>

08006cde <__sseek>:
 8006cde:	b510      	push	{r4, lr}
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce6:	f000 f82d 	bl	8006d44 <_lseek_r>
 8006cea:	1c43      	adds	r3, r0, #1
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	bf15      	itete	ne
 8006cf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cfa:	81a3      	strheq	r3, [r4, #12]
 8006cfc:	bf18      	it	ne
 8006cfe:	81a3      	strhne	r3, [r4, #12]
 8006d00:	bd10      	pop	{r4, pc}

08006d02 <__sclose>:
 8006d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d06:	f000 b80d 	b.w	8006d24 <_close_r>

08006d0a <memset>:
 8006d0a:	4402      	add	r2, r0
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d100      	bne.n	8006d14 <memset+0xa>
 8006d12:	4770      	bx	lr
 8006d14:	f803 1b01 	strb.w	r1, [r3], #1
 8006d18:	e7f9      	b.n	8006d0e <memset+0x4>
	...

08006d1c <_localeconv_r>:
 8006d1c:	4800      	ldr	r0, [pc, #0]	@ (8006d20 <_localeconv_r+0x4>)
 8006d1e:	4770      	bx	lr
 8006d20:	200001c4 	.word	0x200001c4

08006d24 <_close_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4d06      	ldr	r5, [pc, #24]	@ (8006d40 <_close_r+0x1c>)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	602b      	str	r3, [r5, #0]
 8006d30:	f7fb f9e6 	bl	8002100 <_close>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	d102      	bne.n	8006d3e <_close_r+0x1a>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	b103      	cbz	r3, 8006d3e <_close_r+0x1a>
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	20001240 	.word	0x20001240

08006d44 <_lseek_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	4d07      	ldr	r5, [pc, #28]	@ (8006d64 <_lseek_r+0x20>)
 8006d48:	4604      	mov	r4, r0
 8006d4a:	4608      	mov	r0, r1
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	2200      	movs	r2, #0
 8006d50:	602a      	str	r2, [r5, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	f7fb f9fb 	bl	800214e <_lseek>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d102      	bne.n	8006d62 <_lseek_r+0x1e>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	b103      	cbz	r3, 8006d62 <_lseek_r+0x1e>
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	20001240 	.word	0x20001240

08006d68 <_read_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d07      	ldr	r5, [pc, #28]	@ (8006d88 <_read_r+0x20>)
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	4608      	mov	r0, r1
 8006d70:	4611      	mov	r1, r2
 8006d72:	2200      	movs	r2, #0
 8006d74:	602a      	str	r2, [r5, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	f7fb f9a5 	bl	80020c6 <_read>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_read_r+0x1e>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_read_r+0x1e>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	20001240 	.word	0x20001240

08006d8c <_write_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d07      	ldr	r5, [pc, #28]	@ (8006dac <_write_r+0x20>)
 8006d90:	4604      	mov	r4, r0
 8006d92:	4608      	mov	r0, r1
 8006d94:	4611      	mov	r1, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	602a      	str	r2, [r5, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f7fa fec4 	bl	8001b28 <_write>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_write_r+0x1e>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_write_r+0x1e>
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	20001240 	.word	0x20001240

08006db0 <__errno>:
 8006db0:	4b01      	ldr	r3, [pc, #4]	@ (8006db8 <__errno+0x8>)
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20000084 	.word	0x20000084

08006dbc <__libc_init_array>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	4d0d      	ldr	r5, [pc, #52]	@ (8006df4 <__libc_init_array+0x38>)
 8006dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8006df8 <__libc_init_array+0x3c>)
 8006dc2:	1b64      	subs	r4, r4, r5
 8006dc4:	10a4      	asrs	r4, r4, #2
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	42a6      	cmp	r6, r4
 8006dca:	d109      	bne.n	8006de0 <__libc_init_array+0x24>
 8006dcc:	4d0b      	ldr	r5, [pc, #44]	@ (8006dfc <__libc_init_array+0x40>)
 8006dce:	4c0c      	ldr	r4, [pc, #48]	@ (8006e00 <__libc_init_array+0x44>)
 8006dd0:	f001 fec0 	bl	8008b54 <_init>
 8006dd4:	1b64      	subs	r4, r4, r5
 8006dd6:	10a4      	asrs	r4, r4, #2
 8006dd8:	2600      	movs	r6, #0
 8006dda:	42a6      	cmp	r6, r4
 8006ddc:	d105      	bne.n	8006dea <__libc_init_array+0x2e>
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de4:	4798      	blx	r3
 8006de6:	3601      	adds	r6, #1
 8006de8:	e7ee      	b.n	8006dc8 <__libc_init_array+0xc>
 8006dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dee:	4798      	blx	r3
 8006df0:	3601      	adds	r6, #1
 8006df2:	e7f2      	b.n	8006dda <__libc_init_array+0x1e>
 8006df4:	08008f10 	.word	0x08008f10
 8006df8:	08008f10 	.word	0x08008f10
 8006dfc:	08008f10 	.word	0x08008f10
 8006e00:	08008f14 	.word	0x08008f14

08006e04 <__retarget_lock_init_recursive>:
 8006e04:	4770      	bx	lr

08006e06 <__retarget_lock_acquire_recursive>:
 8006e06:	4770      	bx	lr

08006e08 <__retarget_lock_release_recursive>:
 8006e08:	4770      	bx	lr

08006e0a <quorem>:
 8006e0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0e:	6903      	ldr	r3, [r0, #16]
 8006e10:	690c      	ldr	r4, [r1, #16]
 8006e12:	42a3      	cmp	r3, r4
 8006e14:	4607      	mov	r7, r0
 8006e16:	db7e      	blt.n	8006f16 <quorem+0x10c>
 8006e18:	3c01      	subs	r4, #1
 8006e1a:	f101 0814 	add.w	r8, r1, #20
 8006e1e:	00a3      	lsls	r3, r4, #2
 8006e20:	f100 0514 	add.w	r5, r0, #20
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e34:	3301      	adds	r3, #1
 8006e36:	429a      	cmp	r2, r3
 8006e38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e40:	d32e      	bcc.n	8006ea0 <quorem+0x96>
 8006e42:	f04f 0a00 	mov.w	sl, #0
 8006e46:	46c4      	mov	ip, r8
 8006e48:	46ae      	mov	lr, r5
 8006e4a:	46d3      	mov	fp, sl
 8006e4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e50:	b298      	uxth	r0, r3
 8006e52:	fb06 a000 	mla	r0, r6, r0, sl
 8006e56:	0c02      	lsrs	r2, r0, #16
 8006e58:	0c1b      	lsrs	r3, r3, #16
 8006e5a:	fb06 2303 	mla	r3, r6, r3, r2
 8006e5e:	f8de 2000 	ldr.w	r2, [lr]
 8006e62:	b280      	uxth	r0, r0
 8006e64:	b292      	uxth	r2, r2
 8006e66:	1a12      	subs	r2, r2, r0
 8006e68:	445a      	add	r2, fp
 8006e6a:	f8de 0000 	ldr.w	r0, [lr]
 8006e6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e78:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e7c:	b292      	uxth	r2, r2
 8006e7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e82:	45e1      	cmp	r9, ip
 8006e84:	f84e 2b04 	str.w	r2, [lr], #4
 8006e88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e8c:	d2de      	bcs.n	8006e4c <quorem+0x42>
 8006e8e:	9b00      	ldr	r3, [sp, #0]
 8006e90:	58eb      	ldr	r3, [r5, r3]
 8006e92:	b92b      	cbnz	r3, 8006ea0 <quorem+0x96>
 8006e94:	9b01      	ldr	r3, [sp, #4]
 8006e96:	3b04      	subs	r3, #4
 8006e98:	429d      	cmp	r5, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	d32f      	bcc.n	8006efe <quorem+0xf4>
 8006e9e:	613c      	str	r4, [r7, #16]
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	f001 f97b 	bl	800819c <__mcmp>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	db25      	blt.n	8006ef6 <quorem+0xec>
 8006eaa:	4629      	mov	r1, r5
 8006eac:	2000      	movs	r0, #0
 8006eae:	f858 2b04 	ldr.w	r2, [r8], #4
 8006eb2:	f8d1 c000 	ldr.w	ip, [r1]
 8006eb6:	fa1f fe82 	uxth.w	lr, r2
 8006eba:	fa1f f38c 	uxth.w	r3, ip
 8006ebe:	eba3 030e 	sub.w	r3, r3, lr
 8006ec2:	4403      	add	r3, r0
 8006ec4:	0c12      	lsrs	r2, r2, #16
 8006ec6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006eca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ed4:	45c1      	cmp	r9, r8
 8006ed6:	f841 3b04 	str.w	r3, [r1], #4
 8006eda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ede:	d2e6      	bcs.n	8006eae <quorem+0xa4>
 8006ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ee4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ee8:	b922      	cbnz	r2, 8006ef4 <quorem+0xea>
 8006eea:	3b04      	subs	r3, #4
 8006eec:	429d      	cmp	r5, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	d30b      	bcc.n	8006f0a <quorem+0x100>
 8006ef2:	613c      	str	r4, [r7, #16]
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	b003      	add	sp, #12
 8006efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	3b04      	subs	r3, #4
 8006f02:	2a00      	cmp	r2, #0
 8006f04:	d1cb      	bne.n	8006e9e <quorem+0x94>
 8006f06:	3c01      	subs	r4, #1
 8006f08:	e7c6      	b.n	8006e98 <quorem+0x8e>
 8006f0a:	6812      	ldr	r2, [r2, #0]
 8006f0c:	3b04      	subs	r3, #4
 8006f0e:	2a00      	cmp	r2, #0
 8006f10:	d1ef      	bne.n	8006ef2 <quorem+0xe8>
 8006f12:	3c01      	subs	r4, #1
 8006f14:	e7ea      	b.n	8006eec <quorem+0xe2>
 8006f16:	2000      	movs	r0, #0
 8006f18:	e7ee      	b.n	8006ef8 <quorem+0xee>
 8006f1a:	0000      	movs	r0, r0
 8006f1c:	0000      	movs	r0, r0
	...

08006f20 <_dtoa_r>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	69c7      	ldr	r7, [r0, #28]
 8006f26:	b099      	sub	sp, #100	@ 0x64
 8006f28:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f2c:	ec55 4b10 	vmov	r4, r5, d0
 8006f30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006f32:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f34:	4683      	mov	fp, r0
 8006f36:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f3a:	b97f      	cbnz	r7, 8006f5c <_dtoa_r+0x3c>
 8006f3c:	2010      	movs	r0, #16
 8006f3e:	f000 fdfd 	bl	8007b3c <malloc>
 8006f42:	4602      	mov	r2, r0
 8006f44:	f8cb 001c 	str.w	r0, [fp, #28]
 8006f48:	b920      	cbnz	r0, 8006f54 <_dtoa_r+0x34>
 8006f4a:	4ba7      	ldr	r3, [pc, #668]	@ (80071e8 <_dtoa_r+0x2c8>)
 8006f4c:	21ef      	movs	r1, #239	@ 0xef
 8006f4e:	48a7      	ldr	r0, [pc, #668]	@ (80071ec <_dtoa_r+0x2cc>)
 8006f50:	f001 fccc 	bl	80088ec <__assert_func>
 8006f54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f58:	6007      	str	r7, [r0, #0]
 8006f5a:	60c7      	str	r7, [r0, #12]
 8006f5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f60:	6819      	ldr	r1, [r3, #0]
 8006f62:	b159      	cbz	r1, 8006f7c <_dtoa_r+0x5c>
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	604a      	str	r2, [r1, #4]
 8006f68:	2301      	movs	r3, #1
 8006f6a:	4093      	lsls	r3, r2
 8006f6c:	608b      	str	r3, [r1, #8]
 8006f6e:	4658      	mov	r0, fp
 8006f70:	f000 feda 	bl	8007d28 <_Bfree>
 8006f74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	1e2b      	subs	r3, r5, #0
 8006f7e:	bfb9      	ittee	lt
 8006f80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f84:	9303      	strlt	r3, [sp, #12]
 8006f86:	2300      	movge	r3, #0
 8006f88:	6033      	strge	r3, [r6, #0]
 8006f8a:	9f03      	ldr	r7, [sp, #12]
 8006f8c:	4b98      	ldr	r3, [pc, #608]	@ (80071f0 <_dtoa_r+0x2d0>)
 8006f8e:	bfbc      	itt	lt
 8006f90:	2201      	movlt	r2, #1
 8006f92:	6032      	strlt	r2, [r6, #0]
 8006f94:	43bb      	bics	r3, r7
 8006f96:	d112      	bne.n	8006fbe <_dtoa_r+0x9e>
 8006f98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fa4:	4323      	orrs	r3, r4
 8006fa6:	f000 854d 	beq.w	8007a44 <_dtoa_r+0xb24>
 8006faa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007204 <_dtoa_r+0x2e4>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 854f 	beq.w	8007a54 <_dtoa_r+0xb34>
 8006fb6:	f10a 0303 	add.w	r3, sl, #3
 8006fba:	f000 bd49 	b.w	8007a50 <_dtoa_r+0xb30>
 8006fbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	ec51 0b17 	vmov	r0, r1, d7
 8006fc8:	2300      	movs	r3, #0
 8006fca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006fce:	f7f9 fd9b 	bl	8000b08 <__aeabi_dcmpeq>
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	b158      	cbz	r0, 8006fee <_dtoa_r+0xce>
 8006fd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006fd8:	2301      	movs	r3, #1
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fde:	b113      	cbz	r3, 8006fe6 <_dtoa_r+0xc6>
 8006fe0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006fe2:	4b84      	ldr	r3, [pc, #528]	@ (80071f4 <_dtoa_r+0x2d4>)
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007208 <_dtoa_r+0x2e8>
 8006fea:	f000 bd33 	b.w	8007a54 <_dtoa_r+0xb34>
 8006fee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006ff2:	aa16      	add	r2, sp, #88	@ 0x58
 8006ff4:	a917      	add	r1, sp, #92	@ 0x5c
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	f001 f980 	bl	80082fc <__d2b>
 8006ffc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007000:	4681      	mov	r9, r0
 8007002:	2e00      	cmp	r6, #0
 8007004:	d077      	beq.n	80070f6 <_dtoa_r+0x1d6>
 8007006:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007008:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800700c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007014:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007018:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800701c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007020:	4619      	mov	r1, r3
 8007022:	2200      	movs	r2, #0
 8007024:	4b74      	ldr	r3, [pc, #464]	@ (80071f8 <_dtoa_r+0x2d8>)
 8007026:	f7f9 f94f 	bl	80002c8 <__aeabi_dsub>
 800702a:	a369      	add	r3, pc, #420	@ (adr r3, 80071d0 <_dtoa_r+0x2b0>)
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f7f9 fb02 	bl	8000638 <__aeabi_dmul>
 8007034:	a368      	add	r3, pc, #416	@ (adr r3, 80071d8 <_dtoa_r+0x2b8>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f7f9 f947 	bl	80002cc <__adddf3>
 800703e:	4604      	mov	r4, r0
 8007040:	4630      	mov	r0, r6
 8007042:	460d      	mov	r5, r1
 8007044:	f7f9 fa8e 	bl	8000564 <__aeabi_i2d>
 8007048:	a365      	add	r3, pc, #404	@ (adr r3, 80071e0 <_dtoa_r+0x2c0>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	f7f9 faf3 	bl	8000638 <__aeabi_dmul>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4620      	mov	r0, r4
 8007058:	4629      	mov	r1, r5
 800705a:	f7f9 f937 	bl	80002cc <__adddf3>
 800705e:	4604      	mov	r4, r0
 8007060:	460d      	mov	r5, r1
 8007062:	f7f9 fd99 	bl	8000b98 <__aeabi_d2iz>
 8007066:	2200      	movs	r2, #0
 8007068:	4607      	mov	r7, r0
 800706a:	2300      	movs	r3, #0
 800706c:	4620      	mov	r0, r4
 800706e:	4629      	mov	r1, r5
 8007070:	f7f9 fd54 	bl	8000b1c <__aeabi_dcmplt>
 8007074:	b140      	cbz	r0, 8007088 <_dtoa_r+0x168>
 8007076:	4638      	mov	r0, r7
 8007078:	f7f9 fa74 	bl	8000564 <__aeabi_i2d>
 800707c:	4622      	mov	r2, r4
 800707e:	462b      	mov	r3, r5
 8007080:	f7f9 fd42 	bl	8000b08 <__aeabi_dcmpeq>
 8007084:	b900      	cbnz	r0, 8007088 <_dtoa_r+0x168>
 8007086:	3f01      	subs	r7, #1
 8007088:	2f16      	cmp	r7, #22
 800708a:	d851      	bhi.n	8007130 <_dtoa_r+0x210>
 800708c:	4b5b      	ldr	r3, [pc, #364]	@ (80071fc <_dtoa_r+0x2dc>)
 800708e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800709a:	f7f9 fd3f 	bl	8000b1c <__aeabi_dcmplt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d048      	beq.n	8007134 <_dtoa_r+0x214>
 80070a2:	3f01      	subs	r7, #1
 80070a4:	2300      	movs	r3, #0
 80070a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80070a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80070aa:	1b9b      	subs	r3, r3, r6
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	bf44      	itt	mi
 80070b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80070b4:	2300      	movmi	r3, #0
 80070b6:	9208      	str	r2, [sp, #32]
 80070b8:	bf54      	ite	pl
 80070ba:	f04f 0800 	movpl.w	r8, #0
 80070be:	9308      	strmi	r3, [sp, #32]
 80070c0:	2f00      	cmp	r7, #0
 80070c2:	db39      	blt.n	8007138 <_dtoa_r+0x218>
 80070c4:	9b08      	ldr	r3, [sp, #32]
 80070c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80070c8:	443b      	add	r3, r7
 80070ca:	9308      	str	r3, [sp, #32]
 80070cc:	2300      	movs	r3, #0
 80070ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80070d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d2:	2b09      	cmp	r3, #9
 80070d4:	d864      	bhi.n	80071a0 <_dtoa_r+0x280>
 80070d6:	2b05      	cmp	r3, #5
 80070d8:	bfc4      	itt	gt
 80070da:	3b04      	subgt	r3, #4
 80070dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80070de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e0:	f1a3 0302 	sub.w	r3, r3, #2
 80070e4:	bfcc      	ite	gt
 80070e6:	2400      	movgt	r4, #0
 80070e8:	2401      	movle	r4, #1
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d863      	bhi.n	80071b6 <_dtoa_r+0x296>
 80070ee:	e8df f003 	tbb	[pc, r3]
 80070f2:	372a      	.short	0x372a
 80070f4:	5535      	.short	0x5535
 80070f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80070fa:	441e      	add	r6, r3
 80070fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007100:	2b20      	cmp	r3, #32
 8007102:	bfc1      	itttt	gt
 8007104:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007108:	409f      	lslgt	r7, r3
 800710a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800710e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007112:	bfd6      	itet	le
 8007114:	f1c3 0320 	rsble	r3, r3, #32
 8007118:	ea47 0003 	orrgt.w	r0, r7, r3
 800711c:	fa04 f003 	lslle.w	r0, r4, r3
 8007120:	f7f9 fa10 	bl	8000544 <__aeabi_ui2d>
 8007124:	2201      	movs	r2, #1
 8007126:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800712a:	3e01      	subs	r6, #1
 800712c:	9214      	str	r2, [sp, #80]	@ 0x50
 800712e:	e777      	b.n	8007020 <_dtoa_r+0x100>
 8007130:	2301      	movs	r3, #1
 8007132:	e7b8      	b.n	80070a6 <_dtoa_r+0x186>
 8007134:	9012      	str	r0, [sp, #72]	@ 0x48
 8007136:	e7b7      	b.n	80070a8 <_dtoa_r+0x188>
 8007138:	427b      	negs	r3, r7
 800713a:	930a      	str	r3, [sp, #40]	@ 0x28
 800713c:	2300      	movs	r3, #0
 800713e:	eba8 0807 	sub.w	r8, r8, r7
 8007142:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007144:	e7c4      	b.n	80070d0 <_dtoa_r+0x1b0>
 8007146:	2300      	movs	r3, #0
 8007148:	930b      	str	r3, [sp, #44]	@ 0x2c
 800714a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800714c:	2b00      	cmp	r3, #0
 800714e:	dc35      	bgt.n	80071bc <_dtoa_r+0x29c>
 8007150:	2301      	movs	r3, #1
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	9307      	str	r3, [sp, #28]
 8007156:	461a      	mov	r2, r3
 8007158:	920e      	str	r2, [sp, #56]	@ 0x38
 800715a:	e00b      	b.n	8007174 <_dtoa_r+0x254>
 800715c:	2301      	movs	r3, #1
 800715e:	e7f3      	b.n	8007148 <_dtoa_r+0x228>
 8007160:	2300      	movs	r3, #0
 8007162:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007164:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007166:	18fb      	adds	r3, r7, r3
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	2b01      	cmp	r3, #1
 800716e:	9307      	str	r3, [sp, #28]
 8007170:	bfb8      	it	lt
 8007172:	2301      	movlt	r3, #1
 8007174:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007178:	2100      	movs	r1, #0
 800717a:	2204      	movs	r2, #4
 800717c:	f102 0514 	add.w	r5, r2, #20
 8007180:	429d      	cmp	r5, r3
 8007182:	d91f      	bls.n	80071c4 <_dtoa_r+0x2a4>
 8007184:	6041      	str	r1, [r0, #4]
 8007186:	4658      	mov	r0, fp
 8007188:	f000 fd8e 	bl	8007ca8 <_Balloc>
 800718c:	4682      	mov	sl, r0
 800718e:	2800      	cmp	r0, #0
 8007190:	d13c      	bne.n	800720c <_dtoa_r+0x2ec>
 8007192:	4b1b      	ldr	r3, [pc, #108]	@ (8007200 <_dtoa_r+0x2e0>)
 8007194:	4602      	mov	r2, r0
 8007196:	f240 11af 	movw	r1, #431	@ 0x1af
 800719a:	e6d8      	b.n	8006f4e <_dtoa_r+0x2e>
 800719c:	2301      	movs	r3, #1
 800719e:	e7e0      	b.n	8007162 <_dtoa_r+0x242>
 80071a0:	2401      	movs	r4, #1
 80071a2:	2300      	movs	r3, #0
 80071a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80071a8:	f04f 33ff 	mov.w	r3, #4294967295
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	9307      	str	r3, [sp, #28]
 80071b0:	2200      	movs	r2, #0
 80071b2:	2312      	movs	r3, #18
 80071b4:	e7d0      	b.n	8007158 <_dtoa_r+0x238>
 80071b6:	2301      	movs	r3, #1
 80071b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ba:	e7f5      	b.n	80071a8 <_dtoa_r+0x288>
 80071bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	9307      	str	r3, [sp, #28]
 80071c2:	e7d7      	b.n	8007174 <_dtoa_r+0x254>
 80071c4:	3101      	adds	r1, #1
 80071c6:	0052      	lsls	r2, r2, #1
 80071c8:	e7d8      	b.n	800717c <_dtoa_r+0x25c>
 80071ca:	bf00      	nop
 80071cc:	f3af 8000 	nop.w
 80071d0:	636f4361 	.word	0x636f4361
 80071d4:	3fd287a7 	.word	0x3fd287a7
 80071d8:	8b60c8b3 	.word	0x8b60c8b3
 80071dc:	3fc68a28 	.word	0x3fc68a28
 80071e0:	509f79fb 	.word	0x509f79fb
 80071e4:	3fd34413 	.word	0x3fd34413
 80071e8:	08008bd9 	.word	0x08008bd9
 80071ec:	08008bf0 	.word	0x08008bf0
 80071f0:	7ff00000 	.word	0x7ff00000
 80071f4:	08008ba9 	.word	0x08008ba9
 80071f8:	3ff80000 	.word	0x3ff80000
 80071fc:	08008ce8 	.word	0x08008ce8
 8007200:	08008c48 	.word	0x08008c48
 8007204:	08008bd5 	.word	0x08008bd5
 8007208:	08008ba8 	.word	0x08008ba8
 800720c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007210:	6018      	str	r0, [r3, #0]
 8007212:	9b07      	ldr	r3, [sp, #28]
 8007214:	2b0e      	cmp	r3, #14
 8007216:	f200 80a4 	bhi.w	8007362 <_dtoa_r+0x442>
 800721a:	2c00      	cmp	r4, #0
 800721c:	f000 80a1 	beq.w	8007362 <_dtoa_r+0x442>
 8007220:	2f00      	cmp	r7, #0
 8007222:	dd33      	ble.n	800728c <_dtoa_r+0x36c>
 8007224:	4bad      	ldr	r3, [pc, #692]	@ (80074dc <_dtoa_r+0x5bc>)
 8007226:	f007 020f 	and.w	r2, r7, #15
 800722a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800722e:	ed93 7b00 	vldr	d7, [r3]
 8007232:	05f8      	lsls	r0, r7, #23
 8007234:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007238:	ea4f 1427 	mov.w	r4, r7, asr #4
 800723c:	d516      	bpl.n	800726c <_dtoa_r+0x34c>
 800723e:	4ba8      	ldr	r3, [pc, #672]	@ (80074e0 <_dtoa_r+0x5c0>)
 8007240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007244:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007248:	f7f9 fb20 	bl	800088c <__aeabi_ddiv>
 800724c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007250:	f004 040f 	and.w	r4, r4, #15
 8007254:	2603      	movs	r6, #3
 8007256:	4da2      	ldr	r5, [pc, #648]	@ (80074e0 <_dtoa_r+0x5c0>)
 8007258:	b954      	cbnz	r4, 8007270 <_dtoa_r+0x350>
 800725a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800725e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007262:	f7f9 fb13 	bl	800088c <__aeabi_ddiv>
 8007266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800726a:	e028      	b.n	80072be <_dtoa_r+0x39e>
 800726c:	2602      	movs	r6, #2
 800726e:	e7f2      	b.n	8007256 <_dtoa_r+0x336>
 8007270:	07e1      	lsls	r1, r4, #31
 8007272:	d508      	bpl.n	8007286 <_dtoa_r+0x366>
 8007274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007278:	e9d5 2300 	ldrd	r2, r3, [r5]
 800727c:	f7f9 f9dc 	bl	8000638 <__aeabi_dmul>
 8007280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007284:	3601      	adds	r6, #1
 8007286:	1064      	asrs	r4, r4, #1
 8007288:	3508      	adds	r5, #8
 800728a:	e7e5      	b.n	8007258 <_dtoa_r+0x338>
 800728c:	f000 80d2 	beq.w	8007434 <_dtoa_r+0x514>
 8007290:	427c      	negs	r4, r7
 8007292:	4b92      	ldr	r3, [pc, #584]	@ (80074dc <_dtoa_r+0x5bc>)
 8007294:	4d92      	ldr	r5, [pc, #584]	@ (80074e0 <_dtoa_r+0x5c0>)
 8007296:	f004 020f 	and.w	r2, r4, #15
 800729a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072a6:	f7f9 f9c7 	bl	8000638 <__aeabi_dmul>
 80072aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ae:	1124      	asrs	r4, r4, #4
 80072b0:	2300      	movs	r3, #0
 80072b2:	2602      	movs	r6, #2
 80072b4:	2c00      	cmp	r4, #0
 80072b6:	f040 80b2 	bne.w	800741e <_dtoa_r+0x4fe>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1d3      	bne.n	8007266 <_dtoa_r+0x346>
 80072be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 80b7 	beq.w	8007438 <_dtoa_r+0x518>
 80072ca:	4b86      	ldr	r3, [pc, #536]	@ (80074e4 <_dtoa_r+0x5c4>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	4620      	mov	r0, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	f7f9 fc23 	bl	8000b1c <__aeabi_dcmplt>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f000 80ae 	beq.w	8007438 <_dtoa_r+0x518>
 80072dc:	9b07      	ldr	r3, [sp, #28]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 80aa 	beq.w	8007438 <_dtoa_r+0x518>
 80072e4:	9b00      	ldr	r3, [sp, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	dd37      	ble.n	800735a <_dtoa_r+0x43a>
 80072ea:	1e7b      	subs	r3, r7, #1
 80072ec:	9304      	str	r3, [sp, #16]
 80072ee:	4620      	mov	r0, r4
 80072f0:	4b7d      	ldr	r3, [pc, #500]	@ (80074e8 <_dtoa_r+0x5c8>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	4629      	mov	r1, r5
 80072f6:	f7f9 f99f 	bl	8000638 <__aeabi_dmul>
 80072fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072fe:	9c00      	ldr	r4, [sp, #0]
 8007300:	3601      	adds	r6, #1
 8007302:	4630      	mov	r0, r6
 8007304:	f7f9 f92e 	bl	8000564 <__aeabi_i2d>
 8007308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800730c:	f7f9 f994 	bl	8000638 <__aeabi_dmul>
 8007310:	4b76      	ldr	r3, [pc, #472]	@ (80074ec <_dtoa_r+0x5cc>)
 8007312:	2200      	movs	r2, #0
 8007314:	f7f8 ffda 	bl	80002cc <__adddf3>
 8007318:	4605      	mov	r5, r0
 800731a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800731e:	2c00      	cmp	r4, #0
 8007320:	f040 808d 	bne.w	800743e <_dtoa_r+0x51e>
 8007324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007328:	4b71      	ldr	r3, [pc, #452]	@ (80074f0 <_dtoa_r+0x5d0>)
 800732a:	2200      	movs	r2, #0
 800732c:	f7f8 ffcc 	bl	80002c8 <__aeabi_dsub>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007338:	462a      	mov	r2, r5
 800733a:	4633      	mov	r3, r6
 800733c:	f7f9 fc0c 	bl	8000b58 <__aeabi_dcmpgt>
 8007340:	2800      	cmp	r0, #0
 8007342:	f040 828b 	bne.w	800785c <_dtoa_r+0x93c>
 8007346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800734a:	462a      	mov	r2, r5
 800734c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007350:	f7f9 fbe4 	bl	8000b1c <__aeabi_dcmplt>
 8007354:	2800      	cmp	r0, #0
 8007356:	f040 8128 	bne.w	80075aa <_dtoa_r+0x68a>
 800735a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800735e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007362:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007364:	2b00      	cmp	r3, #0
 8007366:	f2c0 815a 	blt.w	800761e <_dtoa_r+0x6fe>
 800736a:	2f0e      	cmp	r7, #14
 800736c:	f300 8157 	bgt.w	800761e <_dtoa_r+0x6fe>
 8007370:	4b5a      	ldr	r3, [pc, #360]	@ (80074dc <_dtoa_r+0x5bc>)
 8007372:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007376:	ed93 7b00 	vldr	d7, [r3]
 800737a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800737c:	2b00      	cmp	r3, #0
 800737e:	ed8d 7b00 	vstr	d7, [sp]
 8007382:	da03      	bge.n	800738c <_dtoa_r+0x46c>
 8007384:	9b07      	ldr	r3, [sp, #28]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f340 8101 	ble.w	800758e <_dtoa_r+0x66e>
 800738c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007390:	4656      	mov	r6, sl
 8007392:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f9 fa77 	bl	800088c <__aeabi_ddiv>
 800739e:	f7f9 fbfb 	bl	8000b98 <__aeabi_d2iz>
 80073a2:	4680      	mov	r8, r0
 80073a4:	f7f9 f8de 	bl	8000564 <__aeabi_i2d>
 80073a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073ac:	f7f9 f944 	bl	8000638 <__aeabi_dmul>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4620      	mov	r0, r4
 80073b6:	4629      	mov	r1, r5
 80073b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073bc:	f7f8 ff84 	bl	80002c8 <__aeabi_dsub>
 80073c0:	f806 4b01 	strb.w	r4, [r6], #1
 80073c4:	9d07      	ldr	r5, [sp, #28]
 80073c6:	eba6 040a 	sub.w	r4, r6, sl
 80073ca:	42a5      	cmp	r5, r4
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	f040 8117 	bne.w	8007602 <_dtoa_r+0x6e2>
 80073d4:	f7f8 ff7a 	bl	80002cc <__adddf3>
 80073d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073dc:	4604      	mov	r4, r0
 80073de:	460d      	mov	r5, r1
 80073e0:	f7f9 fbba 	bl	8000b58 <__aeabi_dcmpgt>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	f040 80f9 	bne.w	80075dc <_dtoa_r+0x6bc>
 80073ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073ee:	4620      	mov	r0, r4
 80073f0:	4629      	mov	r1, r5
 80073f2:	f7f9 fb89 	bl	8000b08 <__aeabi_dcmpeq>
 80073f6:	b118      	cbz	r0, 8007400 <_dtoa_r+0x4e0>
 80073f8:	f018 0f01 	tst.w	r8, #1
 80073fc:	f040 80ee 	bne.w	80075dc <_dtoa_r+0x6bc>
 8007400:	4649      	mov	r1, r9
 8007402:	4658      	mov	r0, fp
 8007404:	f000 fc90 	bl	8007d28 <_Bfree>
 8007408:	2300      	movs	r3, #0
 800740a:	7033      	strb	r3, [r6, #0]
 800740c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800740e:	3701      	adds	r7, #1
 8007410:	601f      	str	r7, [r3, #0]
 8007412:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 831d 	beq.w	8007a54 <_dtoa_r+0xb34>
 800741a:	601e      	str	r6, [r3, #0]
 800741c:	e31a      	b.n	8007a54 <_dtoa_r+0xb34>
 800741e:	07e2      	lsls	r2, r4, #31
 8007420:	d505      	bpl.n	800742e <_dtoa_r+0x50e>
 8007422:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007426:	f7f9 f907 	bl	8000638 <__aeabi_dmul>
 800742a:	3601      	adds	r6, #1
 800742c:	2301      	movs	r3, #1
 800742e:	1064      	asrs	r4, r4, #1
 8007430:	3508      	adds	r5, #8
 8007432:	e73f      	b.n	80072b4 <_dtoa_r+0x394>
 8007434:	2602      	movs	r6, #2
 8007436:	e742      	b.n	80072be <_dtoa_r+0x39e>
 8007438:	9c07      	ldr	r4, [sp, #28]
 800743a:	9704      	str	r7, [sp, #16]
 800743c:	e761      	b.n	8007302 <_dtoa_r+0x3e2>
 800743e:	4b27      	ldr	r3, [pc, #156]	@ (80074dc <_dtoa_r+0x5bc>)
 8007440:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007442:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007446:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800744a:	4454      	add	r4, sl
 800744c:	2900      	cmp	r1, #0
 800744e:	d053      	beq.n	80074f8 <_dtoa_r+0x5d8>
 8007450:	4928      	ldr	r1, [pc, #160]	@ (80074f4 <_dtoa_r+0x5d4>)
 8007452:	2000      	movs	r0, #0
 8007454:	f7f9 fa1a 	bl	800088c <__aeabi_ddiv>
 8007458:	4633      	mov	r3, r6
 800745a:	462a      	mov	r2, r5
 800745c:	f7f8 ff34 	bl	80002c8 <__aeabi_dsub>
 8007460:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007464:	4656      	mov	r6, sl
 8007466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800746a:	f7f9 fb95 	bl	8000b98 <__aeabi_d2iz>
 800746e:	4605      	mov	r5, r0
 8007470:	f7f9 f878 	bl	8000564 <__aeabi_i2d>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800747c:	f7f8 ff24 	bl	80002c8 <__aeabi_dsub>
 8007480:	3530      	adds	r5, #48	@ 0x30
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800748a:	f806 5b01 	strb.w	r5, [r6], #1
 800748e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007492:	f7f9 fb43 	bl	8000b1c <__aeabi_dcmplt>
 8007496:	2800      	cmp	r0, #0
 8007498:	d171      	bne.n	800757e <_dtoa_r+0x65e>
 800749a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800749e:	4911      	ldr	r1, [pc, #68]	@ (80074e4 <_dtoa_r+0x5c4>)
 80074a0:	2000      	movs	r0, #0
 80074a2:	f7f8 ff11 	bl	80002c8 <__aeabi_dsub>
 80074a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074aa:	f7f9 fb37 	bl	8000b1c <__aeabi_dcmplt>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f040 8095 	bne.w	80075de <_dtoa_r+0x6be>
 80074b4:	42a6      	cmp	r6, r4
 80074b6:	f43f af50 	beq.w	800735a <_dtoa_r+0x43a>
 80074ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074be:	4b0a      	ldr	r3, [pc, #40]	@ (80074e8 <_dtoa_r+0x5c8>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	f7f9 f8b9 	bl	8000638 <__aeabi_dmul>
 80074c6:	4b08      	ldr	r3, [pc, #32]	@ (80074e8 <_dtoa_r+0x5c8>)
 80074c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074cc:	2200      	movs	r2, #0
 80074ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d2:	f7f9 f8b1 	bl	8000638 <__aeabi_dmul>
 80074d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074da:	e7c4      	b.n	8007466 <_dtoa_r+0x546>
 80074dc:	08008ce8 	.word	0x08008ce8
 80074e0:	08008cc0 	.word	0x08008cc0
 80074e4:	3ff00000 	.word	0x3ff00000
 80074e8:	40240000 	.word	0x40240000
 80074ec:	401c0000 	.word	0x401c0000
 80074f0:	40140000 	.word	0x40140000
 80074f4:	3fe00000 	.word	0x3fe00000
 80074f8:	4631      	mov	r1, r6
 80074fa:	4628      	mov	r0, r5
 80074fc:	f7f9 f89c 	bl	8000638 <__aeabi_dmul>
 8007500:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007504:	9415      	str	r4, [sp, #84]	@ 0x54
 8007506:	4656      	mov	r6, sl
 8007508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800750c:	f7f9 fb44 	bl	8000b98 <__aeabi_d2iz>
 8007510:	4605      	mov	r5, r0
 8007512:	f7f9 f827 	bl	8000564 <__aeabi_i2d>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800751e:	f7f8 fed3 	bl	80002c8 <__aeabi_dsub>
 8007522:	3530      	adds	r5, #48	@ 0x30
 8007524:	f806 5b01 	strb.w	r5, [r6], #1
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	42a6      	cmp	r6, r4
 800752e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	d124      	bne.n	8007582 <_dtoa_r+0x662>
 8007538:	4bac      	ldr	r3, [pc, #688]	@ (80077ec <_dtoa_r+0x8cc>)
 800753a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800753e:	f7f8 fec5 	bl	80002cc <__adddf3>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800754a:	f7f9 fb05 	bl	8000b58 <__aeabi_dcmpgt>
 800754e:	2800      	cmp	r0, #0
 8007550:	d145      	bne.n	80075de <_dtoa_r+0x6be>
 8007552:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007556:	49a5      	ldr	r1, [pc, #660]	@ (80077ec <_dtoa_r+0x8cc>)
 8007558:	2000      	movs	r0, #0
 800755a:	f7f8 feb5 	bl	80002c8 <__aeabi_dsub>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007566:	f7f9 fad9 	bl	8000b1c <__aeabi_dcmplt>
 800756a:	2800      	cmp	r0, #0
 800756c:	f43f aef5 	beq.w	800735a <_dtoa_r+0x43a>
 8007570:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007572:	1e73      	subs	r3, r6, #1
 8007574:	9315      	str	r3, [sp, #84]	@ 0x54
 8007576:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800757a:	2b30      	cmp	r3, #48	@ 0x30
 800757c:	d0f8      	beq.n	8007570 <_dtoa_r+0x650>
 800757e:	9f04      	ldr	r7, [sp, #16]
 8007580:	e73e      	b.n	8007400 <_dtoa_r+0x4e0>
 8007582:	4b9b      	ldr	r3, [pc, #620]	@ (80077f0 <_dtoa_r+0x8d0>)
 8007584:	f7f9 f858 	bl	8000638 <__aeabi_dmul>
 8007588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800758c:	e7bc      	b.n	8007508 <_dtoa_r+0x5e8>
 800758e:	d10c      	bne.n	80075aa <_dtoa_r+0x68a>
 8007590:	4b98      	ldr	r3, [pc, #608]	@ (80077f4 <_dtoa_r+0x8d4>)
 8007592:	2200      	movs	r2, #0
 8007594:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007598:	f7f9 f84e 	bl	8000638 <__aeabi_dmul>
 800759c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a0:	f7f9 fad0 	bl	8000b44 <__aeabi_dcmpge>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	f000 8157 	beq.w	8007858 <_dtoa_r+0x938>
 80075aa:	2400      	movs	r4, #0
 80075ac:	4625      	mov	r5, r4
 80075ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075b0:	43db      	mvns	r3, r3
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	4656      	mov	r6, sl
 80075b6:	2700      	movs	r7, #0
 80075b8:	4621      	mov	r1, r4
 80075ba:	4658      	mov	r0, fp
 80075bc:	f000 fbb4 	bl	8007d28 <_Bfree>
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	d0dc      	beq.n	800757e <_dtoa_r+0x65e>
 80075c4:	b12f      	cbz	r7, 80075d2 <_dtoa_r+0x6b2>
 80075c6:	42af      	cmp	r7, r5
 80075c8:	d003      	beq.n	80075d2 <_dtoa_r+0x6b2>
 80075ca:	4639      	mov	r1, r7
 80075cc:	4658      	mov	r0, fp
 80075ce:	f000 fbab 	bl	8007d28 <_Bfree>
 80075d2:	4629      	mov	r1, r5
 80075d4:	4658      	mov	r0, fp
 80075d6:	f000 fba7 	bl	8007d28 <_Bfree>
 80075da:	e7d0      	b.n	800757e <_dtoa_r+0x65e>
 80075dc:	9704      	str	r7, [sp, #16]
 80075de:	4633      	mov	r3, r6
 80075e0:	461e      	mov	r6, r3
 80075e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075e6:	2a39      	cmp	r2, #57	@ 0x39
 80075e8:	d107      	bne.n	80075fa <_dtoa_r+0x6da>
 80075ea:	459a      	cmp	sl, r3
 80075ec:	d1f8      	bne.n	80075e0 <_dtoa_r+0x6c0>
 80075ee:	9a04      	ldr	r2, [sp, #16]
 80075f0:	3201      	adds	r2, #1
 80075f2:	9204      	str	r2, [sp, #16]
 80075f4:	2230      	movs	r2, #48	@ 0x30
 80075f6:	f88a 2000 	strb.w	r2, [sl]
 80075fa:	781a      	ldrb	r2, [r3, #0]
 80075fc:	3201      	adds	r2, #1
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	e7bd      	b.n	800757e <_dtoa_r+0x65e>
 8007602:	4b7b      	ldr	r3, [pc, #492]	@ (80077f0 <_dtoa_r+0x8d0>)
 8007604:	2200      	movs	r2, #0
 8007606:	f7f9 f817 	bl	8000638 <__aeabi_dmul>
 800760a:	2200      	movs	r2, #0
 800760c:	2300      	movs	r3, #0
 800760e:	4604      	mov	r4, r0
 8007610:	460d      	mov	r5, r1
 8007612:	f7f9 fa79 	bl	8000b08 <__aeabi_dcmpeq>
 8007616:	2800      	cmp	r0, #0
 8007618:	f43f aebb 	beq.w	8007392 <_dtoa_r+0x472>
 800761c:	e6f0      	b.n	8007400 <_dtoa_r+0x4e0>
 800761e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007620:	2a00      	cmp	r2, #0
 8007622:	f000 80db 	beq.w	80077dc <_dtoa_r+0x8bc>
 8007626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007628:	2a01      	cmp	r2, #1
 800762a:	f300 80bf 	bgt.w	80077ac <_dtoa_r+0x88c>
 800762e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007630:	2a00      	cmp	r2, #0
 8007632:	f000 80b7 	beq.w	80077a4 <_dtoa_r+0x884>
 8007636:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800763a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800763c:	4646      	mov	r6, r8
 800763e:	9a08      	ldr	r2, [sp, #32]
 8007640:	2101      	movs	r1, #1
 8007642:	441a      	add	r2, r3
 8007644:	4658      	mov	r0, fp
 8007646:	4498      	add	r8, r3
 8007648:	9208      	str	r2, [sp, #32]
 800764a:	f000 fc21 	bl	8007e90 <__i2b>
 800764e:	4605      	mov	r5, r0
 8007650:	b15e      	cbz	r6, 800766a <_dtoa_r+0x74a>
 8007652:	9b08      	ldr	r3, [sp, #32]
 8007654:	2b00      	cmp	r3, #0
 8007656:	dd08      	ble.n	800766a <_dtoa_r+0x74a>
 8007658:	42b3      	cmp	r3, r6
 800765a:	9a08      	ldr	r2, [sp, #32]
 800765c:	bfa8      	it	ge
 800765e:	4633      	movge	r3, r6
 8007660:	eba8 0803 	sub.w	r8, r8, r3
 8007664:	1af6      	subs	r6, r6, r3
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	9308      	str	r3, [sp, #32]
 800766a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800766c:	b1f3      	cbz	r3, 80076ac <_dtoa_r+0x78c>
 800766e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 80b7 	beq.w	80077e4 <_dtoa_r+0x8c4>
 8007676:	b18c      	cbz	r4, 800769c <_dtoa_r+0x77c>
 8007678:	4629      	mov	r1, r5
 800767a:	4622      	mov	r2, r4
 800767c:	4658      	mov	r0, fp
 800767e:	f000 fcc7 	bl	8008010 <__pow5mult>
 8007682:	464a      	mov	r2, r9
 8007684:	4601      	mov	r1, r0
 8007686:	4605      	mov	r5, r0
 8007688:	4658      	mov	r0, fp
 800768a:	f000 fc17 	bl	8007ebc <__multiply>
 800768e:	4649      	mov	r1, r9
 8007690:	9004      	str	r0, [sp, #16]
 8007692:	4658      	mov	r0, fp
 8007694:	f000 fb48 	bl	8007d28 <_Bfree>
 8007698:	9b04      	ldr	r3, [sp, #16]
 800769a:	4699      	mov	r9, r3
 800769c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800769e:	1b1a      	subs	r2, r3, r4
 80076a0:	d004      	beq.n	80076ac <_dtoa_r+0x78c>
 80076a2:	4649      	mov	r1, r9
 80076a4:	4658      	mov	r0, fp
 80076a6:	f000 fcb3 	bl	8008010 <__pow5mult>
 80076aa:	4681      	mov	r9, r0
 80076ac:	2101      	movs	r1, #1
 80076ae:	4658      	mov	r0, fp
 80076b0:	f000 fbee 	bl	8007e90 <__i2b>
 80076b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076b6:	4604      	mov	r4, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 81cf 	beq.w	8007a5c <_dtoa_r+0xb3c>
 80076be:	461a      	mov	r2, r3
 80076c0:	4601      	mov	r1, r0
 80076c2:	4658      	mov	r0, fp
 80076c4:	f000 fca4 	bl	8008010 <__pow5mult>
 80076c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	4604      	mov	r4, r0
 80076ce:	f300 8095 	bgt.w	80077fc <_dtoa_r+0x8dc>
 80076d2:	9b02      	ldr	r3, [sp, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f040 8087 	bne.w	80077e8 <_dtoa_r+0x8c8>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f040 8089 	bne.w	80077f8 <_dtoa_r+0x8d8>
 80076e6:	9b03      	ldr	r3, [sp, #12]
 80076e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076ec:	0d1b      	lsrs	r3, r3, #20
 80076ee:	051b      	lsls	r3, r3, #20
 80076f0:	b12b      	cbz	r3, 80076fe <_dtoa_r+0x7de>
 80076f2:	9b08      	ldr	r3, [sp, #32]
 80076f4:	3301      	adds	r3, #1
 80076f6:	9308      	str	r3, [sp, #32]
 80076f8:	f108 0801 	add.w	r8, r8, #1
 80076fc:	2301      	movs	r3, #1
 80076fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 81b0 	beq.w	8007a68 <_dtoa_r+0xb48>
 8007708:	6923      	ldr	r3, [r4, #16]
 800770a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800770e:	6918      	ldr	r0, [r3, #16]
 8007710:	f000 fb72 	bl	8007df8 <__hi0bits>
 8007714:	f1c0 0020 	rsb	r0, r0, #32
 8007718:	9b08      	ldr	r3, [sp, #32]
 800771a:	4418      	add	r0, r3
 800771c:	f010 001f 	ands.w	r0, r0, #31
 8007720:	d077      	beq.n	8007812 <_dtoa_r+0x8f2>
 8007722:	f1c0 0320 	rsb	r3, r0, #32
 8007726:	2b04      	cmp	r3, #4
 8007728:	dd6b      	ble.n	8007802 <_dtoa_r+0x8e2>
 800772a:	9b08      	ldr	r3, [sp, #32]
 800772c:	f1c0 001c 	rsb	r0, r0, #28
 8007730:	4403      	add	r3, r0
 8007732:	4480      	add	r8, r0
 8007734:	4406      	add	r6, r0
 8007736:	9308      	str	r3, [sp, #32]
 8007738:	f1b8 0f00 	cmp.w	r8, #0
 800773c:	dd05      	ble.n	800774a <_dtoa_r+0x82a>
 800773e:	4649      	mov	r1, r9
 8007740:	4642      	mov	r2, r8
 8007742:	4658      	mov	r0, fp
 8007744:	f000 fcbe 	bl	80080c4 <__lshift>
 8007748:	4681      	mov	r9, r0
 800774a:	9b08      	ldr	r3, [sp, #32]
 800774c:	2b00      	cmp	r3, #0
 800774e:	dd05      	ble.n	800775c <_dtoa_r+0x83c>
 8007750:	4621      	mov	r1, r4
 8007752:	461a      	mov	r2, r3
 8007754:	4658      	mov	r0, fp
 8007756:	f000 fcb5 	bl	80080c4 <__lshift>
 800775a:	4604      	mov	r4, r0
 800775c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800775e:	2b00      	cmp	r3, #0
 8007760:	d059      	beq.n	8007816 <_dtoa_r+0x8f6>
 8007762:	4621      	mov	r1, r4
 8007764:	4648      	mov	r0, r9
 8007766:	f000 fd19 	bl	800819c <__mcmp>
 800776a:	2800      	cmp	r0, #0
 800776c:	da53      	bge.n	8007816 <_dtoa_r+0x8f6>
 800776e:	1e7b      	subs	r3, r7, #1
 8007770:	9304      	str	r3, [sp, #16]
 8007772:	4649      	mov	r1, r9
 8007774:	2300      	movs	r3, #0
 8007776:	220a      	movs	r2, #10
 8007778:	4658      	mov	r0, fp
 800777a:	f000 faf7 	bl	8007d6c <__multadd>
 800777e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007780:	4681      	mov	r9, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 8172 	beq.w	8007a6c <_dtoa_r+0xb4c>
 8007788:	2300      	movs	r3, #0
 800778a:	4629      	mov	r1, r5
 800778c:	220a      	movs	r2, #10
 800778e:	4658      	mov	r0, fp
 8007790:	f000 faec 	bl	8007d6c <__multadd>
 8007794:	9b00      	ldr	r3, [sp, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	4605      	mov	r5, r0
 800779a:	dc67      	bgt.n	800786c <_dtoa_r+0x94c>
 800779c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779e:	2b02      	cmp	r3, #2
 80077a0:	dc41      	bgt.n	8007826 <_dtoa_r+0x906>
 80077a2:	e063      	b.n	800786c <_dtoa_r+0x94c>
 80077a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80077a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077aa:	e746      	b.n	800763a <_dtoa_r+0x71a>
 80077ac:	9b07      	ldr	r3, [sp, #28]
 80077ae:	1e5c      	subs	r4, r3, #1
 80077b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077b2:	42a3      	cmp	r3, r4
 80077b4:	bfbf      	itttt	lt
 80077b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80077b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80077ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80077bc:	1ae3      	sublt	r3, r4, r3
 80077be:	bfb4      	ite	lt
 80077c0:	18d2      	addlt	r2, r2, r3
 80077c2:	1b1c      	subge	r4, r3, r4
 80077c4:	9b07      	ldr	r3, [sp, #28]
 80077c6:	bfbc      	itt	lt
 80077c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80077ca:	2400      	movlt	r4, #0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	bfb5      	itete	lt
 80077d0:	eba8 0603 	sublt.w	r6, r8, r3
 80077d4:	9b07      	ldrge	r3, [sp, #28]
 80077d6:	2300      	movlt	r3, #0
 80077d8:	4646      	movge	r6, r8
 80077da:	e730      	b.n	800763e <_dtoa_r+0x71e>
 80077dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80077e0:	4646      	mov	r6, r8
 80077e2:	e735      	b.n	8007650 <_dtoa_r+0x730>
 80077e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077e6:	e75c      	b.n	80076a2 <_dtoa_r+0x782>
 80077e8:	2300      	movs	r3, #0
 80077ea:	e788      	b.n	80076fe <_dtoa_r+0x7de>
 80077ec:	3fe00000 	.word	0x3fe00000
 80077f0:	40240000 	.word	0x40240000
 80077f4:	40140000 	.word	0x40140000
 80077f8:	9b02      	ldr	r3, [sp, #8]
 80077fa:	e780      	b.n	80076fe <_dtoa_r+0x7de>
 80077fc:	2300      	movs	r3, #0
 80077fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007800:	e782      	b.n	8007708 <_dtoa_r+0x7e8>
 8007802:	d099      	beq.n	8007738 <_dtoa_r+0x818>
 8007804:	9a08      	ldr	r2, [sp, #32]
 8007806:	331c      	adds	r3, #28
 8007808:	441a      	add	r2, r3
 800780a:	4498      	add	r8, r3
 800780c:	441e      	add	r6, r3
 800780e:	9208      	str	r2, [sp, #32]
 8007810:	e792      	b.n	8007738 <_dtoa_r+0x818>
 8007812:	4603      	mov	r3, r0
 8007814:	e7f6      	b.n	8007804 <_dtoa_r+0x8e4>
 8007816:	9b07      	ldr	r3, [sp, #28]
 8007818:	9704      	str	r7, [sp, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	dc20      	bgt.n	8007860 <_dtoa_r+0x940>
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007822:	2b02      	cmp	r3, #2
 8007824:	dd1e      	ble.n	8007864 <_dtoa_r+0x944>
 8007826:	9b00      	ldr	r3, [sp, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	f47f aec0 	bne.w	80075ae <_dtoa_r+0x68e>
 800782e:	4621      	mov	r1, r4
 8007830:	2205      	movs	r2, #5
 8007832:	4658      	mov	r0, fp
 8007834:	f000 fa9a 	bl	8007d6c <__multadd>
 8007838:	4601      	mov	r1, r0
 800783a:	4604      	mov	r4, r0
 800783c:	4648      	mov	r0, r9
 800783e:	f000 fcad 	bl	800819c <__mcmp>
 8007842:	2800      	cmp	r0, #0
 8007844:	f77f aeb3 	ble.w	80075ae <_dtoa_r+0x68e>
 8007848:	4656      	mov	r6, sl
 800784a:	2331      	movs	r3, #49	@ 0x31
 800784c:	f806 3b01 	strb.w	r3, [r6], #1
 8007850:	9b04      	ldr	r3, [sp, #16]
 8007852:	3301      	adds	r3, #1
 8007854:	9304      	str	r3, [sp, #16]
 8007856:	e6ae      	b.n	80075b6 <_dtoa_r+0x696>
 8007858:	9c07      	ldr	r4, [sp, #28]
 800785a:	9704      	str	r7, [sp, #16]
 800785c:	4625      	mov	r5, r4
 800785e:	e7f3      	b.n	8007848 <_dtoa_r+0x928>
 8007860:	9b07      	ldr	r3, [sp, #28]
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 8104 	beq.w	8007a74 <_dtoa_r+0xb54>
 800786c:	2e00      	cmp	r6, #0
 800786e:	dd05      	ble.n	800787c <_dtoa_r+0x95c>
 8007870:	4629      	mov	r1, r5
 8007872:	4632      	mov	r2, r6
 8007874:	4658      	mov	r0, fp
 8007876:	f000 fc25 	bl	80080c4 <__lshift>
 800787a:	4605      	mov	r5, r0
 800787c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800787e:	2b00      	cmp	r3, #0
 8007880:	d05a      	beq.n	8007938 <_dtoa_r+0xa18>
 8007882:	6869      	ldr	r1, [r5, #4]
 8007884:	4658      	mov	r0, fp
 8007886:	f000 fa0f 	bl	8007ca8 <_Balloc>
 800788a:	4606      	mov	r6, r0
 800788c:	b928      	cbnz	r0, 800789a <_dtoa_r+0x97a>
 800788e:	4b84      	ldr	r3, [pc, #528]	@ (8007aa0 <_dtoa_r+0xb80>)
 8007890:	4602      	mov	r2, r0
 8007892:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007896:	f7ff bb5a 	b.w	8006f4e <_dtoa_r+0x2e>
 800789a:	692a      	ldr	r2, [r5, #16]
 800789c:	3202      	adds	r2, #2
 800789e:	0092      	lsls	r2, r2, #2
 80078a0:	f105 010c 	add.w	r1, r5, #12
 80078a4:	300c      	adds	r0, #12
 80078a6:	f001 f813 	bl	80088d0 <memcpy>
 80078aa:	2201      	movs	r2, #1
 80078ac:	4631      	mov	r1, r6
 80078ae:	4658      	mov	r0, fp
 80078b0:	f000 fc08 	bl	80080c4 <__lshift>
 80078b4:	f10a 0301 	add.w	r3, sl, #1
 80078b8:	9307      	str	r3, [sp, #28]
 80078ba:	9b00      	ldr	r3, [sp, #0]
 80078bc:	4453      	add	r3, sl
 80078be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078c0:	9b02      	ldr	r3, [sp, #8]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	462f      	mov	r7, r5
 80078c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80078ca:	4605      	mov	r5, r0
 80078cc:	9b07      	ldr	r3, [sp, #28]
 80078ce:	4621      	mov	r1, r4
 80078d0:	3b01      	subs	r3, #1
 80078d2:	4648      	mov	r0, r9
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	f7ff fa98 	bl	8006e0a <quorem>
 80078da:	4639      	mov	r1, r7
 80078dc:	9002      	str	r0, [sp, #8]
 80078de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80078e2:	4648      	mov	r0, r9
 80078e4:	f000 fc5a 	bl	800819c <__mcmp>
 80078e8:	462a      	mov	r2, r5
 80078ea:	9008      	str	r0, [sp, #32]
 80078ec:	4621      	mov	r1, r4
 80078ee:	4658      	mov	r0, fp
 80078f0:	f000 fc70 	bl	80081d4 <__mdiff>
 80078f4:	68c2      	ldr	r2, [r0, #12]
 80078f6:	4606      	mov	r6, r0
 80078f8:	bb02      	cbnz	r2, 800793c <_dtoa_r+0xa1c>
 80078fa:	4601      	mov	r1, r0
 80078fc:	4648      	mov	r0, r9
 80078fe:	f000 fc4d 	bl	800819c <__mcmp>
 8007902:	4602      	mov	r2, r0
 8007904:	4631      	mov	r1, r6
 8007906:	4658      	mov	r0, fp
 8007908:	920e      	str	r2, [sp, #56]	@ 0x38
 800790a:	f000 fa0d 	bl	8007d28 <_Bfree>
 800790e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007910:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007912:	9e07      	ldr	r6, [sp, #28]
 8007914:	ea43 0102 	orr.w	r1, r3, r2
 8007918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800791a:	4319      	orrs	r1, r3
 800791c:	d110      	bne.n	8007940 <_dtoa_r+0xa20>
 800791e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007922:	d029      	beq.n	8007978 <_dtoa_r+0xa58>
 8007924:	9b08      	ldr	r3, [sp, #32]
 8007926:	2b00      	cmp	r3, #0
 8007928:	dd02      	ble.n	8007930 <_dtoa_r+0xa10>
 800792a:	9b02      	ldr	r3, [sp, #8]
 800792c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007930:	9b00      	ldr	r3, [sp, #0]
 8007932:	f883 8000 	strb.w	r8, [r3]
 8007936:	e63f      	b.n	80075b8 <_dtoa_r+0x698>
 8007938:	4628      	mov	r0, r5
 800793a:	e7bb      	b.n	80078b4 <_dtoa_r+0x994>
 800793c:	2201      	movs	r2, #1
 800793e:	e7e1      	b.n	8007904 <_dtoa_r+0x9e4>
 8007940:	9b08      	ldr	r3, [sp, #32]
 8007942:	2b00      	cmp	r3, #0
 8007944:	db04      	blt.n	8007950 <_dtoa_r+0xa30>
 8007946:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007948:	430b      	orrs	r3, r1
 800794a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800794c:	430b      	orrs	r3, r1
 800794e:	d120      	bne.n	8007992 <_dtoa_r+0xa72>
 8007950:	2a00      	cmp	r2, #0
 8007952:	dded      	ble.n	8007930 <_dtoa_r+0xa10>
 8007954:	4649      	mov	r1, r9
 8007956:	2201      	movs	r2, #1
 8007958:	4658      	mov	r0, fp
 800795a:	f000 fbb3 	bl	80080c4 <__lshift>
 800795e:	4621      	mov	r1, r4
 8007960:	4681      	mov	r9, r0
 8007962:	f000 fc1b 	bl	800819c <__mcmp>
 8007966:	2800      	cmp	r0, #0
 8007968:	dc03      	bgt.n	8007972 <_dtoa_r+0xa52>
 800796a:	d1e1      	bne.n	8007930 <_dtoa_r+0xa10>
 800796c:	f018 0f01 	tst.w	r8, #1
 8007970:	d0de      	beq.n	8007930 <_dtoa_r+0xa10>
 8007972:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007976:	d1d8      	bne.n	800792a <_dtoa_r+0xa0a>
 8007978:	9a00      	ldr	r2, [sp, #0]
 800797a:	2339      	movs	r3, #57	@ 0x39
 800797c:	7013      	strb	r3, [r2, #0]
 800797e:	4633      	mov	r3, r6
 8007980:	461e      	mov	r6, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007988:	2a39      	cmp	r2, #57	@ 0x39
 800798a:	d052      	beq.n	8007a32 <_dtoa_r+0xb12>
 800798c:	3201      	adds	r2, #1
 800798e:	701a      	strb	r2, [r3, #0]
 8007990:	e612      	b.n	80075b8 <_dtoa_r+0x698>
 8007992:	2a00      	cmp	r2, #0
 8007994:	dd07      	ble.n	80079a6 <_dtoa_r+0xa86>
 8007996:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800799a:	d0ed      	beq.n	8007978 <_dtoa_r+0xa58>
 800799c:	9a00      	ldr	r2, [sp, #0]
 800799e:	f108 0301 	add.w	r3, r8, #1
 80079a2:	7013      	strb	r3, [r2, #0]
 80079a4:	e608      	b.n	80075b8 <_dtoa_r+0x698>
 80079a6:	9b07      	ldr	r3, [sp, #28]
 80079a8:	9a07      	ldr	r2, [sp, #28]
 80079aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80079ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d028      	beq.n	8007a06 <_dtoa_r+0xae6>
 80079b4:	4649      	mov	r1, r9
 80079b6:	2300      	movs	r3, #0
 80079b8:	220a      	movs	r2, #10
 80079ba:	4658      	mov	r0, fp
 80079bc:	f000 f9d6 	bl	8007d6c <__multadd>
 80079c0:	42af      	cmp	r7, r5
 80079c2:	4681      	mov	r9, r0
 80079c4:	f04f 0300 	mov.w	r3, #0
 80079c8:	f04f 020a 	mov.w	r2, #10
 80079cc:	4639      	mov	r1, r7
 80079ce:	4658      	mov	r0, fp
 80079d0:	d107      	bne.n	80079e2 <_dtoa_r+0xac2>
 80079d2:	f000 f9cb 	bl	8007d6c <__multadd>
 80079d6:	4607      	mov	r7, r0
 80079d8:	4605      	mov	r5, r0
 80079da:	9b07      	ldr	r3, [sp, #28]
 80079dc:	3301      	adds	r3, #1
 80079de:	9307      	str	r3, [sp, #28]
 80079e0:	e774      	b.n	80078cc <_dtoa_r+0x9ac>
 80079e2:	f000 f9c3 	bl	8007d6c <__multadd>
 80079e6:	4629      	mov	r1, r5
 80079e8:	4607      	mov	r7, r0
 80079ea:	2300      	movs	r3, #0
 80079ec:	220a      	movs	r2, #10
 80079ee:	4658      	mov	r0, fp
 80079f0:	f000 f9bc 	bl	8007d6c <__multadd>
 80079f4:	4605      	mov	r5, r0
 80079f6:	e7f0      	b.n	80079da <_dtoa_r+0xaba>
 80079f8:	9b00      	ldr	r3, [sp, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bfcc      	ite	gt
 80079fe:	461e      	movgt	r6, r3
 8007a00:	2601      	movle	r6, #1
 8007a02:	4456      	add	r6, sl
 8007a04:	2700      	movs	r7, #0
 8007a06:	4649      	mov	r1, r9
 8007a08:	2201      	movs	r2, #1
 8007a0a:	4658      	mov	r0, fp
 8007a0c:	f000 fb5a 	bl	80080c4 <__lshift>
 8007a10:	4621      	mov	r1, r4
 8007a12:	4681      	mov	r9, r0
 8007a14:	f000 fbc2 	bl	800819c <__mcmp>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	dcb0      	bgt.n	800797e <_dtoa_r+0xa5e>
 8007a1c:	d102      	bne.n	8007a24 <_dtoa_r+0xb04>
 8007a1e:	f018 0f01 	tst.w	r8, #1
 8007a22:	d1ac      	bne.n	800797e <_dtoa_r+0xa5e>
 8007a24:	4633      	mov	r3, r6
 8007a26:	461e      	mov	r6, r3
 8007a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a2c:	2a30      	cmp	r2, #48	@ 0x30
 8007a2e:	d0fa      	beq.n	8007a26 <_dtoa_r+0xb06>
 8007a30:	e5c2      	b.n	80075b8 <_dtoa_r+0x698>
 8007a32:	459a      	cmp	sl, r3
 8007a34:	d1a4      	bne.n	8007980 <_dtoa_r+0xa60>
 8007a36:	9b04      	ldr	r3, [sp, #16]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	9304      	str	r3, [sp, #16]
 8007a3c:	2331      	movs	r3, #49	@ 0x31
 8007a3e:	f88a 3000 	strb.w	r3, [sl]
 8007a42:	e5b9      	b.n	80075b8 <_dtoa_r+0x698>
 8007a44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007aa4 <_dtoa_r+0xb84>
 8007a4a:	b11b      	cbz	r3, 8007a54 <_dtoa_r+0xb34>
 8007a4c:	f10a 0308 	add.w	r3, sl, #8
 8007a50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	4650      	mov	r0, sl
 8007a56:	b019      	add	sp, #100	@ 0x64
 8007a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	f77f ae37 	ble.w	80076d2 <_dtoa_r+0x7b2>
 8007a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a68:	2001      	movs	r0, #1
 8007a6a:	e655      	b.n	8007718 <_dtoa_r+0x7f8>
 8007a6c:	9b00      	ldr	r3, [sp, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f77f aed6 	ble.w	8007820 <_dtoa_r+0x900>
 8007a74:	4656      	mov	r6, sl
 8007a76:	4621      	mov	r1, r4
 8007a78:	4648      	mov	r0, r9
 8007a7a:	f7ff f9c6 	bl	8006e0a <quorem>
 8007a7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a82:	f806 8b01 	strb.w	r8, [r6], #1
 8007a86:	9b00      	ldr	r3, [sp, #0]
 8007a88:	eba6 020a 	sub.w	r2, r6, sl
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	ddb3      	ble.n	80079f8 <_dtoa_r+0xad8>
 8007a90:	4649      	mov	r1, r9
 8007a92:	2300      	movs	r3, #0
 8007a94:	220a      	movs	r2, #10
 8007a96:	4658      	mov	r0, fp
 8007a98:	f000 f968 	bl	8007d6c <__multadd>
 8007a9c:	4681      	mov	r9, r0
 8007a9e:	e7ea      	b.n	8007a76 <_dtoa_r+0xb56>
 8007aa0:	08008c48 	.word	0x08008c48
 8007aa4:	08008bcc 	.word	0x08008bcc

08007aa8 <_free_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4605      	mov	r5, r0
 8007aac:	2900      	cmp	r1, #0
 8007aae:	d041      	beq.n	8007b34 <_free_r+0x8c>
 8007ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab4:	1f0c      	subs	r4, r1, #4
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	bfb8      	it	lt
 8007aba:	18e4      	addlt	r4, r4, r3
 8007abc:	f000 f8e8 	bl	8007c90 <__malloc_lock>
 8007ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b38 <_free_r+0x90>)
 8007ac2:	6813      	ldr	r3, [r2, #0]
 8007ac4:	b933      	cbnz	r3, 8007ad4 <_free_r+0x2c>
 8007ac6:	6063      	str	r3, [r4, #4]
 8007ac8:	6014      	str	r4, [r2, #0]
 8007aca:	4628      	mov	r0, r5
 8007acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ad0:	f000 b8e4 	b.w	8007c9c <__malloc_unlock>
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	d908      	bls.n	8007aea <_free_r+0x42>
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	1821      	adds	r1, r4, r0
 8007adc:	428b      	cmp	r3, r1
 8007ade:	bf01      	itttt	eq
 8007ae0:	6819      	ldreq	r1, [r3, #0]
 8007ae2:	685b      	ldreq	r3, [r3, #4]
 8007ae4:	1809      	addeq	r1, r1, r0
 8007ae6:	6021      	streq	r1, [r4, #0]
 8007ae8:	e7ed      	b.n	8007ac6 <_free_r+0x1e>
 8007aea:	461a      	mov	r2, r3
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	b10b      	cbz	r3, 8007af4 <_free_r+0x4c>
 8007af0:	42a3      	cmp	r3, r4
 8007af2:	d9fa      	bls.n	8007aea <_free_r+0x42>
 8007af4:	6811      	ldr	r1, [r2, #0]
 8007af6:	1850      	adds	r0, r2, r1
 8007af8:	42a0      	cmp	r0, r4
 8007afa:	d10b      	bne.n	8007b14 <_free_r+0x6c>
 8007afc:	6820      	ldr	r0, [r4, #0]
 8007afe:	4401      	add	r1, r0
 8007b00:	1850      	adds	r0, r2, r1
 8007b02:	4283      	cmp	r3, r0
 8007b04:	6011      	str	r1, [r2, #0]
 8007b06:	d1e0      	bne.n	8007aca <_free_r+0x22>
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	6053      	str	r3, [r2, #4]
 8007b0e:	4408      	add	r0, r1
 8007b10:	6010      	str	r0, [r2, #0]
 8007b12:	e7da      	b.n	8007aca <_free_r+0x22>
 8007b14:	d902      	bls.n	8007b1c <_free_r+0x74>
 8007b16:	230c      	movs	r3, #12
 8007b18:	602b      	str	r3, [r5, #0]
 8007b1a:	e7d6      	b.n	8007aca <_free_r+0x22>
 8007b1c:	6820      	ldr	r0, [r4, #0]
 8007b1e:	1821      	adds	r1, r4, r0
 8007b20:	428b      	cmp	r3, r1
 8007b22:	bf04      	itt	eq
 8007b24:	6819      	ldreq	r1, [r3, #0]
 8007b26:	685b      	ldreq	r3, [r3, #4]
 8007b28:	6063      	str	r3, [r4, #4]
 8007b2a:	bf04      	itt	eq
 8007b2c:	1809      	addeq	r1, r1, r0
 8007b2e:	6021      	streq	r1, [r4, #0]
 8007b30:	6054      	str	r4, [r2, #4]
 8007b32:	e7ca      	b.n	8007aca <_free_r+0x22>
 8007b34:	bd38      	pop	{r3, r4, r5, pc}
 8007b36:	bf00      	nop
 8007b38:	2000124c 	.word	0x2000124c

08007b3c <malloc>:
 8007b3c:	4b02      	ldr	r3, [pc, #8]	@ (8007b48 <malloc+0xc>)
 8007b3e:	4601      	mov	r1, r0
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	f000 b825 	b.w	8007b90 <_malloc_r>
 8007b46:	bf00      	nop
 8007b48:	20000084 	.word	0x20000084

08007b4c <sbrk_aligned>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	4e0f      	ldr	r6, [pc, #60]	@ (8007b8c <sbrk_aligned+0x40>)
 8007b50:	460c      	mov	r4, r1
 8007b52:	6831      	ldr	r1, [r6, #0]
 8007b54:	4605      	mov	r5, r0
 8007b56:	b911      	cbnz	r1, 8007b5e <sbrk_aligned+0x12>
 8007b58:	f000 feaa 	bl	80088b0 <_sbrk_r>
 8007b5c:	6030      	str	r0, [r6, #0]
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4628      	mov	r0, r5
 8007b62:	f000 fea5 	bl	80088b0 <_sbrk_r>
 8007b66:	1c43      	adds	r3, r0, #1
 8007b68:	d103      	bne.n	8007b72 <sbrk_aligned+0x26>
 8007b6a:	f04f 34ff 	mov.w	r4, #4294967295
 8007b6e:	4620      	mov	r0, r4
 8007b70:	bd70      	pop	{r4, r5, r6, pc}
 8007b72:	1cc4      	adds	r4, r0, #3
 8007b74:	f024 0403 	bic.w	r4, r4, #3
 8007b78:	42a0      	cmp	r0, r4
 8007b7a:	d0f8      	beq.n	8007b6e <sbrk_aligned+0x22>
 8007b7c:	1a21      	subs	r1, r4, r0
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f000 fe96 	bl	80088b0 <_sbrk_r>
 8007b84:	3001      	adds	r0, #1
 8007b86:	d1f2      	bne.n	8007b6e <sbrk_aligned+0x22>
 8007b88:	e7ef      	b.n	8007b6a <sbrk_aligned+0x1e>
 8007b8a:	bf00      	nop
 8007b8c:	20001248 	.word	0x20001248

08007b90 <_malloc_r>:
 8007b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b94:	1ccd      	adds	r5, r1, #3
 8007b96:	f025 0503 	bic.w	r5, r5, #3
 8007b9a:	3508      	adds	r5, #8
 8007b9c:	2d0c      	cmp	r5, #12
 8007b9e:	bf38      	it	cc
 8007ba0:	250c      	movcc	r5, #12
 8007ba2:	2d00      	cmp	r5, #0
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	db01      	blt.n	8007bac <_malloc_r+0x1c>
 8007ba8:	42a9      	cmp	r1, r5
 8007baa:	d904      	bls.n	8007bb6 <_malloc_r+0x26>
 8007bac:	230c      	movs	r3, #12
 8007bae:	6033      	str	r3, [r6, #0]
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c8c <_malloc_r+0xfc>
 8007bba:	f000 f869 	bl	8007c90 <__malloc_lock>
 8007bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8007bc2:	461c      	mov	r4, r3
 8007bc4:	bb44      	cbnz	r4, 8007c18 <_malloc_r+0x88>
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f7ff ffbf 	bl	8007b4c <sbrk_aligned>
 8007bce:	1c43      	adds	r3, r0, #1
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	d158      	bne.n	8007c86 <_malloc_r+0xf6>
 8007bd4:	f8d8 4000 	ldr.w	r4, [r8]
 8007bd8:	4627      	mov	r7, r4
 8007bda:	2f00      	cmp	r7, #0
 8007bdc:	d143      	bne.n	8007c66 <_malloc_r+0xd6>
 8007bde:	2c00      	cmp	r4, #0
 8007be0:	d04b      	beq.n	8007c7a <_malloc_r+0xea>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	4639      	mov	r1, r7
 8007be6:	4630      	mov	r0, r6
 8007be8:	eb04 0903 	add.w	r9, r4, r3
 8007bec:	f000 fe60 	bl	80088b0 <_sbrk_r>
 8007bf0:	4581      	cmp	r9, r0
 8007bf2:	d142      	bne.n	8007c7a <_malloc_r+0xea>
 8007bf4:	6821      	ldr	r1, [r4, #0]
 8007bf6:	1a6d      	subs	r5, r5, r1
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f7ff ffa6 	bl	8007b4c <sbrk_aligned>
 8007c00:	3001      	adds	r0, #1
 8007c02:	d03a      	beq.n	8007c7a <_malloc_r+0xea>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	442b      	add	r3, r5
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	bb62      	cbnz	r2, 8007c6c <_malloc_r+0xdc>
 8007c12:	f8c8 7000 	str.w	r7, [r8]
 8007c16:	e00f      	b.n	8007c38 <_malloc_r+0xa8>
 8007c18:	6822      	ldr	r2, [r4, #0]
 8007c1a:	1b52      	subs	r2, r2, r5
 8007c1c:	d420      	bmi.n	8007c60 <_malloc_r+0xd0>
 8007c1e:	2a0b      	cmp	r2, #11
 8007c20:	d917      	bls.n	8007c52 <_malloc_r+0xc2>
 8007c22:	1961      	adds	r1, r4, r5
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	6025      	str	r5, [r4, #0]
 8007c28:	bf18      	it	ne
 8007c2a:	6059      	strne	r1, [r3, #4]
 8007c2c:	6863      	ldr	r3, [r4, #4]
 8007c2e:	bf08      	it	eq
 8007c30:	f8c8 1000 	streq.w	r1, [r8]
 8007c34:	5162      	str	r2, [r4, r5]
 8007c36:	604b      	str	r3, [r1, #4]
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f000 f82f 	bl	8007c9c <__malloc_unlock>
 8007c3e:	f104 000b 	add.w	r0, r4, #11
 8007c42:	1d23      	adds	r3, r4, #4
 8007c44:	f020 0007 	bic.w	r0, r0, #7
 8007c48:	1ac2      	subs	r2, r0, r3
 8007c4a:	bf1c      	itt	ne
 8007c4c:	1a1b      	subne	r3, r3, r0
 8007c4e:	50a3      	strne	r3, [r4, r2]
 8007c50:	e7af      	b.n	8007bb2 <_malloc_r+0x22>
 8007c52:	6862      	ldr	r2, [r4, #4]
 8007c54:	42a3      	cmp	r3, r4
 8007c56:	bf0c      	ite	eq
 8007c58:	f8c8 2000 	streq.w	r2, [r8]
 8007c5c:	605a      	strne	r2, [r3, #4]
 8007c5e:	e7eb      	b.n	8007c38 <_malloc_r+0xa8>
 8007c60:	4623      	mov	r3, r4
 8007c62:	6864      	ldr	r4, [r4, #4]
 8007c64:	e7ae      	b.n	8007bc4 <_malloc_r+0x34>
 8007c66:	463c      	mov	r4, r7
 8007c68:	687f      	ldr	r7, [r7, #4]
 8007c6a:	e7b6      	b.n	8007bda <_malloc_r+0x4a>
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	d1fb      	bne.n	8007c6c <_malloc_r+0xdc>
 8007c74:	2300      	movs	r3, #0
 8007c76:	6053      	str	r3, [r2, #4]
 8007c78:	e7de      	b.n	8007c38 <_malloc_r+0xa8>
 8007c7a:	230c      	movs	r3, #12
 8007c7c:	6033      	str	r3, [r6, #0]
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f000 f80c 	bl	8007c9c <__malloc_unlock>
 8007c84:	e794      	b.n	8007bb0 <_malloc_r+0x20>
 8007c86:	6005      	str	r5, [r0, #0]
 8007c88:	e7d6      	b.n	8007c38 <_malloc_r+0xa8>
 8007c8a:	bf00      	nop
 8007c8c:	2000124c 	.word	0x2000124c

08007c90 <__malloc_lock>:
 8007c90:	4801      	ldr	r0, [pc, #4]	@ (8007c98 <__malloc_lock+0x8>)
 8007c92:	f7ff b8b8 	b.w	8006e06 <__retarget_lock_acquire_recursive>
 8007c96:	bf00      	nop
 8007c98:	20001244 	.word	0x20001244

08007c9c <__malloc_unlock>:
 8007c9c:	4801      	ldr	r0, [pc, #4]	@ (8007ca4 <__malloc_unlock+0x8>)
 8007c9e:	f7ff b8b3 	b.w	8006e08 <__retarget_lock_release_recursive>
 8007ca2:	bf00      	nop
 8007ca4:	20001244 	.word	0x20001244

08007ca8 <_Balloc>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	69c6      	ldr	r6, [r0, #28]
 8007cac:	4604      	mov	r4, r0
 8007cae:	460d      	mov	r5, r1
 8007cb0:	b976      	cbnz	r6, 8007cd0 <_Balloc+0x28>
 8007cb2:	2010      	movs	r0, #16
 8007cb4:	f7ff ff42 	bl	8007b3c <malloc>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	61e0      	str	r0, [r4, #28]
 8007cbc:	b920      	cbnz	r0, 8007cc8 <_Balloc+0x20>
 8007cbe:	4b18      	ldr	r3, [pc, #96]	@ (8007d20 <_Balloc+0x78>)
 8007cc0:	4818      	ldr	r0, [pc, #96]	@ (8007d24 <_Balloc+0x7c>)
 8007cc2:	216b      	movs	r1, #107	@ 0x6b
 8007cc4:	f000 fe12 	bl	80088ec <__assert_func>
 8007cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ccc:	6006      	str	r6, [r0, #0]
 8007cce:	60c6      	str	r6, [r0, #12]
 8007cd0:	69e6      	ldr	r6, [r4, #28]
 8007cd2:	68f3      	ldr	r3, [r6, #12]
 8007cd4:	b183      	cbz	r3, 8007cf8 <_Balloc+0x50>
 8007cd6:	69e3      	ldr	r3, [r4, #28]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cde:	b9b8      	cbnz	r0, 8007d10 <_Balloc+0x68>
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ce6:	1d72      	adds	r2, r6, #5
 8007ce8:	0092      	lsls	r2, r2, #2
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 fe1c 	bl	8008928 <_calloc_r>
 8007cf0:	b160      	cbz	r0, 8007d0c <_Balloc+0x64>
 8007cf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cf6:	e00e      	b.n	8007d16 <_Balloc+0x6e>
 8007cf8:	2221      	movs	r2, #33	@ 0x21
 8007cfa:	2104      	movs	r1, #4
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f000 fe13 	bl	8008928 <_calloc_r>
 8007d02:	69e3      	ldr	r3, [r4, #28]
 8007d04:	60f0      	str	r0, [r6, #12]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e4      	bne.n	8007cd6 <_Balloc+0x2e>
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	6802      	ldr	r2, [r0, #0]
 8007d12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d16:	2300      	movs	r3, #0
 8007d18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d1c:	e7f7      	b.n	8007d0e <_Balloc+0x66>
 8007d1e:	bf00      	nop
 8007d20:	08008bd9 	.word	0x08008bd9
 8007d24:	08008c59 	.word	0x08008c59

08007d28 <_Bfree>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	69c6      	ldr	r6, [r0, #28]
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	b976      	cbnz	r6, 8007d50 <_Bfree+0x28>
 8007d32:	2010      	movs	r0, #16
 8007d34:	f7ff ff02 	bl	8007b3c <malloc>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	61e8      	str	r0, [r5, #28]
 8007d3c:	b920      	cbnz	r0, 8007d48 <_Bfree+0x20>
 8007d3e:	4b09      	ldr	r3, [pc, #36]	@ (8007d64 <_Bfree+0x3c>)
 8007d40:	4809      	ldr	r0, [pc, #36]	@ (8007d68 <_Bfree+0x40>)
 8007d42:	218f      	movs	r1, #143	@ 0x8f
 8007d44:	f000 fdd2 	bl	80088ec <__assert_func>
 8007d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d4c:	6006      	str	r6, [r0, #0]
 8007d4e:	60c6      	str	r6, [r0, #12]
 8007d50:	b13c      	cbz	r4, 8007d62 <_Bfree+0x3a>
 8007d52:	69eb      	ldr	r3, [r5, #28]
 8007d54:	6862      	ldr	r2, [r4, #4]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d5c:	6021      	str	r1, [r4, #0]
 8007d5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	08008bd9 	.word	0x08008bd9
 8007d68:	08008c59 	.word	0x08008c59

08007d6c <__multadd>:
 8007d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d70:	690d      	ldr	r5, [r1, #16]
 8007d72:	4607      	mov	r7, r0
 8007d74:	460c      	mov	r4, r1
 8007d76:	461e      	mov	r6, r3
 8007d78:	f101 0c14 	add.w	ip, r1, #20
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	f8dc 3000 	ldr.w	r3, [ip]
 8007d82:	b299      	uxth	r1, r3
 8007d84:	fb02 6101 	mla	r1, r2, r1, r6
 8007d88:	0c1e      	lsrs	r6, r3, #16
 8007d8a:	0c0b      	lsrs	r3, r1, #16
 8007d8c:	fb02 3306 	mla	r3, r2, r6, r3
 8007d90:	b289      	uxth	r1, r1
 8007d92:	3001      	adds	r0, #1
 8007d94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d98:	4285      	cmp	r5, r0
 8007d9a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007da2:	dcec      	bgt.n	8007d7e <__multadd+0x12>
 8007da4:	b30e      	cbz	r6, 8007dea <__multadd+0x7e>
 8007da6:	68a3      	ldr	r3, [r4, #8]
 8007da8:	42ab      	cmp	r3, r5
 8007daa:	dc19      	bgt.n	8007de0 <__multadd+0x74>
 8007dac:	6861      	ldr	r1, [r4, #4]
 8007dae:	4638      	mov	r0, r7
 8007db0:	3101      	adds	r1, #1
 8007db2:	f7ff ff79 	bl	8007ca8 <_Balloc>
 8007db6:	4680      	mov	r8, r0
 8007db8:	b928      	cbnz	r0, 8007dc6 <__multadd+0x5a>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007df0 <__multadd+0x84>)
 8007dbe:	480d      	ldr	r0, [pc, #52]	@ (8007df4 <__multadd+0x88>)
 8007dc0:	21ba      	movs	r1, #186	@ 0xba
 8007dc2:	f000 fd93 	bl	80088ec <__assert_func>
 8007dc6:	6922      	ldr	r2, [r4, #16]
 8007dc8:	3202      	adds	r2, #2
 8007dca:	f104 010c 	add.w	r1, r4, #12
 8007dce:	0092      	lsls	r2, r2, #2
 8007dd0:	300c      	adds	r0, #12
 8007dd2:	f000 fd7d 	bl	80088d0 <memcpy>
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7ff ffa5 	bl	8007d28 <_Bfree>
 8007dde:	4644      	mov	r4, r8
 8007de0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007de4:	3501      	adds	r5, #1
 8007de6:	615e      	str	r6, [r3, #20]
 8007de8:	6125      	str	r5, [r4, #16]
 8007dea:	4620      	mov	r0, r4
 8007dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df0:	08008c48 	.word	0x08008c48
 8007df4:	08008c59 	.word	0x08008c59

08007df8 <__hi0bits>:
 8007df8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	bf36      	itet	cc
 8007e00:	0403      	lslcc	r3, r0, #16
 8007e02:	2000      	movcs	r0, #0
 8007e04:	2010      	movcc	r0, #16
 8007e06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e0a:	bf3c      	itt	cc
 8007e0c:	021b      	lslcc	r3, r3, #8
 8007e0e:	3008      	addcc	r0, #8
 8007e10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e14:	bf3c      	itt	cc
 8007e16:	011b      	lslcc	r3, r3, #4
 8007e18:	3004      	addcc	r0, #4
 8007e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e1e:	bf3c      	itt	cc
 8007e20:	009b      	lslcc	r3, r3, #2
 8007e22:	3002      	addcc	r0, #2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	db05      	blt.n	8007e34 <__hi0bits+0x3c>
 8007e28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e2c:	f100 0001 	add.w	r0, r0, #1
 8007e30:	bf08      	it	eq
 8007e32:	2020      	moveq	r0, #32
 8007e34:	4770      	bx	lr

08007e36 <__lo0bits>:
 8007e36:	6803      	ldr	r3, [r0, #0]
 8007e38:	4602      	mov	r2, r0
 8007e3a:	f013 0007 	ands.w	r0, r3, #7
 8007e3e:	d00b      	beq.n	8007e58 <__lo0bits+0x22>
 8007e40:	07d9      	lsls	r1, r3, #31
 8007e42:	d421      	bmi.n	8007e88 <__lo0bits+0x52>
 8007e44:	0798      	lsls	r0, r3, #30
 8007e46:	bf49      	itett	mi
 8007e48:	085b      	lsrmi	r3, r3, #1
 8007e4a:	089b      	lsrpl	r3, r3, #2
 8007e4c:	2001      	movmi	r0, #1
 8007e4e:	6013      	strmi	r3, [r2, #0]
 8007e50:	bf5c      	itt	pl
 8007e52:	6013      	strpl	r3, [r2, #0]
 8007e54:	2002      	movpl	r0, #2
 8007e56:	4770      	bx	lr
 8007e58:	b299      	uxth	r1, r3
 8007e5a:	b909      	cbnz	r1, 8007e60 <__lo0bits+0x2a>
 8007e5c:	0c1b      	lsrs	r3, r3, #16
 8007e5e:	2010      	movs	r0, #16
 8007e60:	b2d9      	uxtb	r1, r3
 8007e62:	b909      	cbnz	r1, 8007e68 <__lo0bits+0x32>
 8007e64:	3008      	adds	r0, #8
 8007e66:	0a1b      	lsrs	r3, r3, #8
 8007e68:	0719      	lsls	r1, r3, #28
 8007e6a:	bf04      	itt	eq
 8007e6c:	091b      	lsreq	r3, r3, #4
 8007e6e:	3004      	addeq	r0, #4
 8007e70:	0799      	lsls	r1, r3, #30
 8007e72:	bf04      	itt	eq
 8007e74:	089b      	lsreq	r3, r3, #2
 8007e76:	3002      	addeq	r0, #2
 8007e78:	07d9      	lsls	r1, r3, #31
 8007e7a:	d403      	bmi.n	8007e84 <__lo0bits+0x4e>
 8007e7c:	085b      	lsrs	r3, r3, #1
 8007e7e:	f100 0001 	add.w	r0, r0, #1
 8007e82:	d003      	beq.n	8007e8c <__lo0bits+0x56>
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	4770      	bx	lr
 8007e88:	2000      	movs	r0, #0
 8007e8a:	4770      	bx	lr
 8007e8c:	2020      	movs	r0, #32
 8007e8e:	4770      	bx	lr

08007e90 <__i2b>:
 8007e90:	b510      	push	{r4, lr}
 8007e92:	460c      	mov	r4, r1
 8007e94:	2101      	movs	r1, #1
 8007e96:	f7ff ff07 	bl	8007ca8 <_Balloc>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	b928      	cbnz	r0, 8007eaa <__i2b+0x1a>
 8007e9e:	4b05      	ldr	r3, [pc, #20]	@ (8007eb4 <__i2b+0x24>)
 8007ea0:	4805      	ldr	r0, [pc, #20]	@ (8007eb8 <__i2b+0x28>)
 8007ea2:	f240 1145 	movw	r1, #325	@ 0x145
 8007ea6:	f000 fd21 	bl	80088ec <__assert_func>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	6144      	str	r4, [r0, #20]
 8007eae:	6103      	str	r3, [r0, #16]
 8007eb0:	bd10      	pop	{r4, pc}
 8007eb2:	bf00      	nop
 8007eb4:	08008c48 	.word	0x08008c48
 8007eb8:	08008c59 	.word	0x08008c59

08007ebc <__multiply>:
 8007ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	4614      	mov	r4, r2
 8007ec2:	690a      	ldr	r2, [r1, #16]
 8007ec4:	6923      	ldr	r3, [r4, #16]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	bfa8      	it	ge
 8007eca:	4623      	movge	r3, r4
 8007ecc:	460f      	mov	r7, r1
 8007ece:	bfa4      	itt	ge
 8007ed0:	460c      	movge	r4, r1
 8007ed2:	461f      	movge	r7, r3
 8007ed4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ed8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007edc:	68a3      	ldr	r3, [r4, #8]
 8007ede:	6861      	ldr	r1, [r4, #4]
 8007ee0:	eb0a 0609 	add.w	r6, sl, r9
 8007ee4:	42b3      	cmp	r3, r6
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	bfb8      	it	lt
 8007eea:	3101      	addlt	r1, #1
 8007eec:	f7ff fedc 	bl	8007ca8 <_Balloc>
 8007ef0:	b930      	cbnz	r0, 8007f00 <__multiply+0x44>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	4b44      	ldr	r3, [pc, #272]	@ (8008008 <__multiply+0x14c>)
 8007ef6:	4845      	ldr	r0, [pc, #276]	@ (800800c <__multiply+0x150>)
 8007ef8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007efc:	f000 fcf6 	bl	80088ec <__assert_func>
 8007f00:	f100 0514 	add.w	r5, r0, #20
 8007f04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f08:	462b      	mov	r3, r5
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	4543      	cmp	r3, r8
 8007f0e:	d321      	bcc.n	8007f54 <__multiply+0x98>
 8007f10:	f107 0114 	add.w	r1, r7, #20
 8007f14:	f104 0214 	add.w	r2, r4, #20
 8007f18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f20:	9302      	str	r3, [sp, #8]
 8007f22:	1b13      	subs	r3, r2, r4
 8007f24:	3b15      	subs	r3, #21
 8007f26:	f023 0303 	bic.w	r3, r3, #3
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	f104 0715 	add.w	r7, r4, #21
 8007f30:	42ba      	cmp	r2, r7
 8007f32:	bf38      	it	cc
 8007f34:	2304      	movcc	r3, #4
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	9b02      	ldr	r3, [sp, #8]
 8007f3a:	9103      	str	r1, [sp, #12]
 8007f3c:	428b      	cmp	r3, r1
 8007f3e:	d80c      	bhi.n	8007f5a <__multiply+0x9e>
 8007f40:	2e00      	cmp	r6, #0
 8007f42:	dd03      	ble.n	8007f4c <__multiply+0x90>
 8007f44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d05b      	beq.n	8008004 <__multiply+0x148>
 8007f4c:	6106      	str	r6, [r0, #16]
 8007f4e:	b005      	add	sp, #20
 8007f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f54:	f843 2b04 	str.w	r2, [r3], #4
 8007f58:	e7d8      	b.n	8007f0c <__multiply+0x50>
 8007f5a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f5e:	f1ba 0f00 	cmp.w	sl, #0
 8007f62:	d024      	beq.n	8007fae <__multiply+0xf2>
 8007f64:	f104 0e14 	add.w	lr, r4, #20
 8007f68:	46a9      	mov	r9, r5
 8007f6a:	f04f 0c00 	mov.w	ip, #0
 8007f6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f72:	f8d9 3000 	ldr.w	r3, [r9]
 8007f76:	fa1f fb87 	uxth.w	fp, r7
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f84:	f8d9 7000 	ldr.w	r7, [r9]
 8007f88:	4463      	add	r3, ip
 8007f8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f8e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f9c:	4572      	cmp	r2, lr
 8007f9e:	f849 3b04 	str.w	r3, [r9], #4
 8007fa2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fa6:	d8e2      	bhi.n	8007f6e <__multiply+0xb2>
 8007fa8:	9b01      	ldr	r3, [sp, #4]
 8007faa:	f845 c003 	str.w	ip, [r5, r3]
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fb4:	3104      	adds	r1, #4
 8007fb6:	f1b9 0f00 	cmp.w	r9, #0
 8007fba:	d021      	beq.n	8008000 <__multiply+0x144>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	f104 0c14 	add.w	ip, r4, #20
 8007fc2:	46ae      	mov	lr, r5
 8007fc4:	f04f 0a00 	mov.w	sl, #0
 8007fc8:	f8bc b000 	ldrh.w	fp, [ip]
 8007fcc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007fd0:	fb09 770b 	mla	r7, r9, fp, r7
 8007fd4:	4457      	add	r7, sl
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fdc:	f84e 3b04 	str.w	r3, [lr], #4
 8007fe0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fe4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fe8:	f8be 3000 	ldrh.w	r3, [lr]
 8007fec:	fb09 330a 	mla	r3, r9, sl, r3
 8007ff0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ff4:	4562      	cmp	r2, ip
 8007ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ffa:	d8e5      	bhi.n	8007fc8 <__multiply+0x10c>
 8007ffc:	9f01      	ldr	r7, [sp, #4]
 8007ffe:	51eb      	str	r3, [r5, r7]
 8008000:	3504      	adds	r5, #4
 8008002:	e799      	b.n	8007f38 <__multiply+0x7c>
 8008004:	3e01      	subs	r6, #1
 8008006:	e79b      	b.n	8007f40 <__multiply+0x84>
 8008008:	08008c48 	.word	0x08008c48
 800800c:	08008c59 	.word	0x08008c59

08008010 <__pow5mult>:
 8008010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008014:	4615      	mov	r5, r2
 8008016:	f012 0203 	ands.w	r2, r2, #3
 800801a:	4607      	mov	r7, r0
 800801c:	460e      	mov	r6, r1
 800801e:	d007      	beq.n	8008030 <__pow5mult+0x20>
 8008020:	4c25      	ldr	r4, [pc, #148]	@ (80080b8 <__pow5mult+0xa8>)
 8008022:	3a01      	subs	r2, #1
 8008024:	2300      	movs	r3, #0
 8008026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800802a:	f7ff fe9f 	bl	8007d6c <__multadd>
 800802e:	4606      	mov	r6, r0
 8008030:	10ad      	asrs	r5, r5, #2
 8008032:	d03d      	beq.n	80080b0 <__pow5mult+0xa0>
 8008034:	69fc      	ldr	r4, [r7, #28]
 8008036:	b97c      	cbnz	r4, 8008058 <__pow5mult+0x48>
 8008038:	2010      	movs	r0, #16
 800803a:	f7ff fd7f 	bl	8007b3c <malloc>
 800803e:	4602      	mov	r2, r0
 8008040:	61f8      	str	r0, [r7, #28]
 8008042:	b928      	cbnz	r0, 8008050 <__pow5mult+0x40>
 8008044:	4b1d      	ldr	r3, [pc, #116]	@ (80080bc <__pow5mult+0xac>)
 8008046:	481e      	ldr	r0, [pc, #120]	@ (80080c0 <__pow5mult+0xb0>)
 8008048:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800804c:	f000 fc4e 	bl	80088ec <__assert_func>
 8008050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008054:	6004      	str	r4, [r0, #0]
 8008056:	60c4      	str	r4, [r0, #12]
 8008058:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800805c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008060:	b94c      	cbnz	r4, 8008076 <__pow5mult+0x66>
 8008062:	f240 2171 	movw	r1, #625	@ 0x271
 8008066:	4638      	mov	r0, r7
 8008068:	f7ff ff12 	bl	8007e90 <__i2b>
 800806c:	2300      	movs	r3, #0
 800806e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008072:	4604      	mov	r4, r0
 8008074:	6003      	str	r3, [r0, #0]
 8008076:	f04f 0900 	mov.w	r9, #0
 800807a:	07eb      	lsls	r3, r5, #31
 800807c:	d50a      	bpl.n	8008094 <__pow5mult+0x84>
 800807e:	4631      	mov	r1, r6
 8008080:	4622      	mov	r2, r4
 8008082:	4638      	mov	r0, r7
 8008084:	f7ff ff1a 	bl	8007ebc <__multiply>
 8008088:	4631      	mov	r1, r6
 800808a:	4680      	mov	r8, r0
 800808c:	4638      	mov	r0, r7
 800808e:	f7ff fe4b 	bl	8007d28 <_Bfree>
 8008092:	4646      	mov	r6, r8
 8008094:	106d      	asrs	r5, r5, #1
 8008096:	d00b      	beq.n	80080b0 <__pow5mult+0xa0>
 8008098:	6820      	ldr	r0, [r4, #0]
 800809a:	b938      	cbnz	r0, 80080ac <__pow5mult+0x9c>
 800809c:	4622      	mov	r2, r4
 800809e:	4621      	mov	r1, r4
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff ff0b 	bl	8007ebc <__multiply>
 80080a6:	6020      	str	r0, [r4, #0]
 80080a8:	f8c0 9000 	str.w	r9, [r0]
 80080ac:	4604      	mov	r4, r0
 80080ae:	e7e4      	b.n	800807a <__pow5mult+0x6a>
 80080b0:	4630      	mov	r0, r6
 80080b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b6:	bf00      	nop
 80080b8:	08008cb4 	.word	0x08008cb4
 80080bc:	08008bd9 	.word	0x08008bd9
 80080c0:	08008c59 	.word	0x08008c59

080080c4 <__lshift>:
 80080c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c8:	460c      	mov	r4, r1
 80080ca:	6849      	ldr	r1, [r1, #4]
 80080cc:	6923      	ldr	r3, [r4, #16]
 80080ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	4607      	mov	r7, r0
 80080d6:	4691      	mov	r9, r2
 80080d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080dc:	f108 0601 	add.w	r6, r8, #1
 80080e0:	42b3      	cmp	r3, r6
 80080e2:	db0b      	blt.n	80080fc <__lshift+0x38>
 80080e4:	4638      	mov	r0, r7
 80080e6:	f7ff fddf 	bl	8007ca8 <_Balloc>
 80080ea:	4605      	mov	r5, r0
 80080ec:	b948      	cbnz	r0, 8008102 <__lshift+0x3e>
 80080ee:	4602      	mov	r2, r0
 80080f0:	4b28      	ldr	r3, [pc, #160]	@ (8008194 <__lshift+0xd0>)
 80080f2:	4829      	ldr	r0, [pc, #164]	@ (8008198 <__lshift+0xd4>)
 80080f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080f8:	f000 fbf8 	bl	80088ec <__assert_func>
 80080fc:	3101      	adds	r1, #1
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	e7ee      	b.n	80080e0 <__lshift+0x1c>
 8008102:	2300      	movs	r3, #0
 8008104:	f100 0114 	add.w	r1, r0, #20
 8008108:	f100 0210 	add.w	r2, r0, #16
 800810c:	4618      	mov	r0, r3
 800810e:	4553      	cmp	r3, sl
 8008110:	db33      	blt.n	800817a <__lshift+0xb6>
 8008112:	6920      	ldr	r0, [r4, #16]
 8008114:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008118:	f104 0314 	add.w	r3, r4, #20
 800811c:	f019 091f 	ands.w	r9, r9, #31
 8008120:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008124:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008128:	d02b      	beq.n	8008182 <__lshift+0xbe>
 800812a:	f1c9 0e20 	rsb	lr, r9, #32
 800812e:	468a      	mov	sl, r1
 8008130:	2200      	movs	r2, #0
 8008132:	6818      	ldr	r0, [r3, #0]
 8008134:	fa00 f009 	lsl.w	r0, r0, r9
 8008138:	4310      	orrs	r0, r2
 800813a:	f84a 0b04 	str.w	r0, [sl], #4
 800813e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008142:	459c      	cmp	ip, r3
 8008144:	fa22 f20e 	lsr.w	r2, r2, lr
 8008148:	d8f3      	bhi.n	8008132 <__lshift+0x6e>
 800814a:	ebac 0304 	sub.w	r3, ip, r4
 800814e:	3b15      	subs	r3, #21
 8008150:	f023 0303 	bic.w	r3, r3, #3
 8008154:	3304      	adds	r3, #4
 8008156:	f104 0015 	add.w	r0, r4, #21
 800815a:	4584      	cmp	ip, r0
 800815c:	bf38      	it	cc
 800815e:	2304      	movcc	r3, #4
 8008160:	50ca      	str	r2, [r1, r3]
 8008162:	b10a      	cbz	r2, 8008168 <__lshift+0xa4>
 8008164:	f108 0602 	add.w	r6, r8, #2
 8008168:	3e01      	subs	r6, #1
 800816a:	4638      	mov	r0, r7
 800816c:	612e      	str	r6, [r5, #16]
 800816e:	4621      	mov	r1, r4
 8008170:	f7ff fdda 	bl	8007d28 <_Bfree>
 8008174:	4628      	mov	r0, r5
 8008176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800817a:	f842 0f04 	str.w	r0, [r2, #4]!
 800817e:	3301      	adds	r3, #1
 8008180:	e7c5      	b.n	800810e <__lshift+0x4a>
 8008182:	3904      	subs	r1, #4
 8008184:	f853 2b04 	ldr.w	r2, [r3], #4
 8008188:	f841 2f04 	str.w	r2, [r1, #4]!
 800818c:	459c      	cmp	ip, r3
 800818e:	d8f9      	bhi.n	8008184 <__lshift+0xc0>
 8008190:	e7ea      	b.n	8008168 <__lshift+0xa4>
 8008192:	bf00      	nop
 8008194:	08008c48 	.word	0x08008c48
 8008198:	08008c59 	.word	0x08008c59

0800819c <__mcmp>:
 800819c:	690a      	ldr	r2, [r1, #16]
 800819e:	4603      	mov	r3, r0
 80081a0:	6900      	ldr	r0, [r0, #16]
 80081a2:	1a80      	subs	r0, r0, r2
 80081a4:	b530      	push	{r4, r5, lr}
 80081a6:	d10e      	bne.n	80081c6 <__mcmp+0x2a>
 80081a8:	3314      	adds	r3, #20
 80081aa:	3114      	adds	r1, #20
 80081ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081bc:	4295      	cmp	r5, r2
 80081be:	d003      	beq.n	80081c8 <__mcmp+0x2c>
 80081c0:	d205      	bcs.n	80081ce <__mcmp+0x32>
 80081c2:	f04f 30ff 	mov.w	r0, #4294967295
 80081c6:	bd30      	pop	{r4, r5, pc}
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	d3f3      	bcc.n	80081b4 <__mcmp+0x18>
 80081cc:	e7fb      	b.n	80081c6 <__mcmp+0x2a>
 80081ce:	2001      	movs	r0, #1
 80081d0:	e7f9      	b.n	80081c6 <__mcmp+0x2a>
	...

080081d4 <__mdiff>:
 80081d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	4689      	mov	r9, r1
 80081da:	4606      	mov	r6, r0
 80081dc:	4611      	mov	r1, r2
 80081de:	4648      	mov	r0, r9
 80081e0:	4614      	mov	r4, r2
 80081e2:	f7ff ffdb 	bl	800819c <__mcmp>
 80081e6:	1e05      	subs	r5, r0, #0
 80081e8:	d112      	bne.n	8008210 <__mdiff+0x3c>
 80081ea:	4629      	mov	r1, r5
 80081ec:	4630      	mov	r0, r6
 80081ee:	f7ff fd5b 	bl	8007ca8 <_Balloc>
 80081f2:	4602      	mov	r2, r0
 80081f4:	b928      	cbnz	r0, 8008202 <__mdiff+0x2e>
 80081f6:	4b3f      	ldr	r3, [pc, #252]	@ (80082f4 <__mdiff+0x120>)
 80081f8:	f240 2137 	movw	r1, #567	@ 0x237
 80081fc:	483e      	ldr	r0, [pc, #248]	@ (80082f8 <__mdiff+0x124>)
 80081fe:	f000 fb75 	bl	80088ec <__assert_func>
 8008202:	2301      	movs	r3, #1
 8008204:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008208:	4610      	mov	r0, r2
 800820a:	b003      	add	sp, #12
 800820c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008210:	bfbc      	itt	lt
 8008212:	464b      	movlt	r3, r9
 8008214:	46a1      	movlt	r9, r4
 8008216:	4630      	mov	r0, r6
 8008218:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800821c:	bfba      	itte	lt
 800821e:	461c      	movlt	r4, r3
 8008220:	2501      	movlt	r5, #1
 8008222:	2500      	movge	r5, #0
 8008224:	f7ff fd40 	bl	8007ca8 <_Balloc>
 8008228:	4602      	mov	r2, r0
 800822a:	b918      	cbnz	r0, 8008234 <__mdiff+0x60>
 800822c:	4b31      	ldr	r3, [pc, #196]	@ (80082f4 <__mdiff+0x120>)
 800822e:	f240 2145 	movw	r1, #581	@ 0x245
 8008232:	e7e3      	b.n	80081fc <__mdiff+0x28>
 8008234:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008238:	6926      	ldr	r6, [r4, #16]
 800823a:	60c5      	str	r5, [r0, #12]
 800823c:	f109 0310 	add.w	r3, r9, #16
 8008240:	f109 0514 	add.w	r5, r9, #20
 8008244:	f104 0e14 	add.w	lr, r4, #20
 8008248:	f100 0b14 	add.w	fp, r0, #20
 800824c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008250:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	46d9      	mov	r9, fp
 8008258:	f04f 0c00 	mov.w	ip, #0
 800825c:	9b01      	ldr	r3, [sp, #4]
 800825e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008262:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	fa1f f38a 	uxth.w	r3, sl
 800826c:	4619      	mov	r1, r3
 800826e:	b283      	uxth	r3, r0
 8008270:	1acb      	subs	r3, r1, r3
 8008272:	0c00      	lsrs	r0, r0, #16
 8008274:	4463      	add	r3, ip
 8008276:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800827a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800827e:	b29b      	uxth	r3, r3
 8008280:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008284:	4576      	cmp	r6, lr
 8008286:	f849 3b04 	str.w	r3, [r9], #4
 800828a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800828e:	d8e5      	bhi.n	800825c <__mdiff+0x88>
 8008290:	1b33      	subs	r3, r6, r4
 8008292:	3b15      	subs	r3, #21
 8008294:	f023 0303 	bic.w	r3, r3, #3
 8008298:	3415      	adds	r4, #21
 800829a:	3304      	adds	r3, #4
 800829c:	42a6      	cmp	r6, r4
 800829e:	bf38      	it	cc
 80082a0:	2304      	movcc	r3, #4
 80082a2:	441d      	add	r5, r3
 80082a4:	445b      	add	r3, fp
 80082a6:	461e      	mov	r6, r3
 80082a8:	462c      	mov	r4, r5
 80082aa:	4544      	cmp	r4, r8
 80082ac:	d30e      	bcc.n	80082cc <__mdiff+0xf8>
 80082ae:	f108 0103 	add.w	r1, r8, #3
 80082b2:	1b49      	subs	r1, r1, r5
 80082b4:	f021 0103 	bic.w	r1, r1, #3
 80082b8:	3d03      	subs	r5, #3
 80082ba:	45a8      	cmp	r8, r5
 80082bc:	bf38      	it	cc
 80082be:	2100      	movcc	r1, #0
 80082c0:	440b      	add	r3, r1
 80082c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082c6:	b191      	cbz	r1, 80082ee <__mdiff+0x11a>
 80082c8:	6117      	str	r7, [r2, #16]
 80082ca:	e79d      	b.n	8008208 <__mdiff+0x34>
 80082cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80082d0:	46e6      	mov	lr, ip
 80082d2:	0c08      	lsrs	r0, r1, #16
 80082d4:	fa1c fc81 	uxtah	ip, ip, r1
 80082d8:	4471      	add	r1, lr
 80082da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082de:	b289      	uxth	r1, r1
 80082e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082e4:	f846 1b04 	str.w	r1, [r6], #4
 80082e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082ec:	e7dd      	b.n	80082aa <__mdiff+0xd6>
 80082ee:	3f01      	subs	r7, #1
 80082f0:	e7e7      	b.n	80082c2 <__mdiff+0xee>
 80082f2:	bf00      	nop
 80082f4:	08008c48 	.word	0x08008c48
 80082f8:	08008c59 	.word	0x08008c59

080082fc <__d2b>:
 80082fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008300:	460f      	mov	r7, r1
 8008302:	2101      	movs	r1, #1
 8008304:	ec59 8b10 	vmov	r8, r9, d0
 8008308:	4616      	mov	r6, r2
 800830a:	f7ff fccd 	bl	8007ca8 <_Balloc>
 800830e:	4604      	mov	r4, r0
 8008310:	b930      	cbnz	r0, 8008320 <__d2b+0x24>
 8008312:	4602      	mov	r2, r0
 8008314:	4b23      	ldr	r3, [pc, #140]	@ (80083a4 <__d2b+0xa8>)
 8008316:	4824      	ldr	r0, [pc, #144]	@ (80083a8 <__d2b+0xac>)
 8008318:	f240 310f 	movw	r1, #783	@ 0x30f
 800831c:	f000 fae6 	bl	80088ec <__assert_func>
 8008320:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008324:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008328:	b10d      	cbz	r5, 800832e <__d2b+0x32>
 800832a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	f1b8 0300 	subs.w	r3, r8, #0
 8008334:	d023      	beq.n	800837e <__d2b+0x82>
 8008336:	4668      	mov	r0, sp
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	f7ff fd7c 	bl	8007e36 <__lo0bits>
 800833e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008342:	b1d0      	cbz	r0, 800837a <__d2b+0x7e>
 8008344:	f1c0 0320 	rsb	r3, r0, #32
 8008348:	fa02 f303 	lsl.w	r3, r2, r3
 800834c:	430b      	orrs	r3, r1
 800834e:	40c2      	lsrs	r2, r0
 8008350:	6163      	str	r3, [r4, #20]
 8008352:	9201      	str	r2, [sp, #4]
 8008354:	9b01      	ldr	r3, [sp, #4]
 8008356:	61a3      	str	r3, [r4, #24]
 8008358:	2b00      	cmp	r3, #0
 800835a:	bf0c      	ite	eq
 800835c:	2201      	moveq	r2, #1
 800835e:	2202      	movne	r2, #2
 8008360:	6122      	str	r2, [r4, #16]
 8008362:	b1a5      	cbz	r5, 800838e <__d2b+0x92>
 8008364:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008368:	4405      	add	r5, r0
 800836a:	603d      	str	r5, [r7, #0]
 800836c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008370:	6030      	str	r0, [r6, #0]
 8008372:	4620      	mov	r0, r4
 8008374:	b003      	add	sp, #12
 8008376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800837a:	6161      	str	r1, [r4, #20]
 800837c:	e7ea      	b.n	8008354 <__d2b+0x58>
 800837e:	a801      	add	r0, sp, #4
 8008380:	f7ff fd59 	bl	8007e36 <__lo0bits>
 8008384:	9b01      	ldr	r3, [sp, #4]
 8008386:	6163      	str	r3, [r4, #20]
 8008388:	3020      	adds	r0, #32
 800838a:	2201      	movs	r2, #1
 800838c:	e7e8      	b.n	8008360 <__d2b+0x64>
 800838e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008392:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008396:	6038      	str	r0, [r7, #0]
 8008398:	6918      	ldr	r0, [r3, #16]
 800839a:	f7ff fd2d 	bl	8007df8 <__hi0bits>
 800839e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083a2:	e7e5      	b.n	8008370 <__d2b+0x74>
 80083a4:	08008c48 	.word	0x08008c48
 80083a8:	08008c59 	.word	0x08008c59

080083ac <__sfputc_r>:
 80083ac:	6893      	ldr	r3, [r2, #8]
 80083ae:	3b01      	subs	r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	b410      	push	{r4}
 80083b4:	6093      	str	r3, [r2, #8]
 80083b6:	da08      	bge.n	80083ca <__sfputc_r+0x1e>
 80083b8:	6994      	ldr	r4, [r2, #24]
 80083ba:	42a3      	cmp	r3, r4
 80083bc:	db01      	blt.n	80083c2 <__sfputc_r+0x16>
 80083be:	290a      	cmp	r1, #10
 80083c0:	d103      	bne.n	80083ca <__sfputc_r+0x1e>
 80083c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083c6:	f000 b9df 	b.w	8008788 <__swbuf_r>
 80083ca:	6813      	ldr	r3, [r2, #0]
 80083cc:	1c58      	adds	r0, r3, #1
 80083ce:	6010      	str	r0, [r2, #0]
 80083d0:	7019      	strb	r1, [r3, #0]
 80083d2:	4608      	mov	r0, r1
 80083d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d8:	4770      	bx	lr

080083da <__sfputs_r>:
 80083da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083dc:	4606      	mov	r6, r0
 80083de:	460f      	mov	r7, r1
 80083e0:	4614      	mov	r4, r2
 80083e2:	18d5      	adds	r5, r2, r3
 80083e4:	42ac      	cmp	r4, r5
 80083e6:	d101      	bne.n	80083ec <__sfputs_r+0x12>
 80083e8:	2000      	movs	r0, #0
 80083ea:	e007      	b.n	80083fc <__sfputs_r+0x22>
 80083ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f0:	463a      	mov	r2, r7
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff ffda 	bl	80083ac <__sfputc_r>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d1f3      	bne.n	80083e4 <__sfputs_r+0xa>
 80083fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008400 <_vfiprintf_r>:
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	460d      	mov	r5, r1
 8008406:	b09d      	sub	sp, #116	@ 0x74
 8008408:	4614      	mov	r4, r2
 800840a:	4698      	mov	r8, r3
 800840c:	4606      	mov	r6, r0
 800840e:	b118      	cbz	r0, 8008418 <_vfiprintf_r+0x18>
 8008410:	6a03      	ldr	r3, [r0, #32]
 8008412:	b90b      	cbnz	r3, 8008418 <_vfiprintf_r+0x18>
 8008414:	f7fe fbee 	bl	8006bf4 <__sinit>
 8008418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800841a:	07d9      	lsls	r1, r3, #31
 800841c:	d405      	bmi.n	800842a <_vfiprintf_r+0x2a>
 800841e:	89ab      	ldrh	r3, [r5, #12]
 8008420:	059a      	lsls	r2, r3, #22
 8008422:	d402      	bmi.n	800842a <_vfiprintf_r+0x2a>
 8008424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008426:	f7fe fcee 	bl	8006e06 <__retarget_lock_acquire_recursive>
 800842a:	89ab      	ldrh	r3, [r5, #12]
 800842c:	071b      	lsls	r3, r3, #28
 800842e:	d501      	bpl.n	8008434 <_vfiprintf_r+0x34>
 8008430:	692b      	ldr	r3, [r5, #16]
 8008432:	b99b      	cbnz	r3, 800845c <_vfiprintf_r+0x5c>
 8008434:	4629      	mov	r1, r5
 8008436:	4630      	mov	r0, r6
 8008438:	f000 f9e4 	bl	8008804 <__swsetup_r>
 800843c:	b170      	cbz	r0, 800845c <_vfiprintf_r+0x5c>
 800843e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008440:	07dc      	lsls	r4, r3, #31
 8008442:	d504      	bpl.n	800844e <_vfiprintf_r+0x4e>
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
 8008448:	b01d      	add	sp, #116	@ 0x74
 800844a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844e:	89ab      	ldrh	r3, [r5, #12]
 8008450:	0598      	lsls	r0, r3, #22
 8008452:	d4f7      	bmi.n	8008444 <_vfiprintf_r+0x44>
 8008454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008456:	f7fe fcd7 	bl	8006e08 <__retarget_lock_release_recursive>
 800845a:	e7f3      	b.n	8008444 <_vfiprintf_r+0x44>
 800845c:	2300      	movs	r3, #0
 800845e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008460:	2320      	movs	r3, #32
 8008462:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008466:	f8cd 800c 	str.w	r8, [sp, #12]
 800846a:	2330      	movs	r3, #48	@ 0x30
 800846c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800861c <_vfiprintf_r+0x21c>
 8008470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008474:	f04f 0901 	mov.w	r9, #1
 8008478:	4623      	mov	r3, r4
 800847a:	469a      	mov	sl, r3
 800847c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008480:	b10a      	cbz	r2, 8008486 <_vfiprintf_r+0x86>
 8008482:	2a25      	cmp	r2, #37	@ 0x25
 8008484:	d1f9      	bne.n	800847a <_vfiprintf_r+0x7a>
 8008486:	ebba 0b04 	subs.w	fp, sl, r4
 800848a:	d00b      	beq.n	80084a4 <_vfiprintf_r+0xa4>
 800848c:	465b      	mov	r3, fp
 800848e:	4622      	mov	r2, r4
 8008490:	4629      	mov	r1, r5
 8008492:	4630      	mov	r0, r6
 8008494:	f7ff ffa1 	bl	80083da <__sfputs_r>
 8008498:	3001      	adds	r0, #1
 800849a:	f000 80a7 	beq.w	80085ec <_vfiprintf_r+0x1ec>
 800849e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084a0:	445a      	add	r2, fp
 80084a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80084a4:	f89a 3000 	ldrb.w	r3, [sl]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 809f 	beq.w	80085ec <_vfiprintf_r+0x1ec>
 80084ae:	2300      	movs	r3, #0
 80084b0:	f04f 32ff 	mov.w	r2, #4294967295
 80084b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084b8:	f10a 0a01 	add.w	sl, sl, #1
 80084bc:	9304      	str	r3, [sp, #16]
 80084be:	9307      	str	r3, [sp, #28]
 80084c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80084c6:	4654      	mov	r4, sl
 80084c8:	2205      	movs	r2, #5
 80084ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ce:	4853      	ldr	r0, [pc, #332]	@ (800861c <_vfiprintf_r+0x21c>)
 80084d0:	f7f7 fe9e 	bl	8000210 <memchr>
 80084d4:	9a04      	ldr	r2, [sp, #16]
 80084d6:	b9d8      	cbnz	r0, 8008510 <_vfiprintf_r+0x110>
 80084d8:	06d1      	lsls	r1, r2, #27
 80084da:	bf44      	itt	mi
 80084dc:	2320      	movmi	r3, #32
 80084de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084e2:	0713      	lsls	r3, r2, #28
 80084e4:	bf44      	itt	mi
 80084e6:	232b      	movmi	r3, #43	@ 0x2b
 80084e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084ec:	f89a 3000 	ldrb.w	r3, [sl]
 80084f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80084f2:	d015      	beq.n	8008520 <_vfiprintf_r+0x120>
 80084f4:	9a07      	ldr	r2, [sp, #28]
 80084f6:	4654      	mov	r4, sl
 80084f8:	2000      	movs	r0, #0
 80084fa:	f04f 0c0a 	mov.w	ip, #10
 80084fe:	4621      	mov	r1, r4
 8008500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008504:	3b30      	subs	r3, #48	@ 0x30
 8008506:	2b09      	cmp	r3, #9
 8008508:	d94b      	bls.n	80085a2 <_vfiprintf_r+0x1a2>
 800850a:	b1b0      	cbz	r0, 800853a <_vfiprintf_r+0x13a>
 800850c:	9207      	str	r2, [sp, #28]
 800850e:	e014      	b.n	800853a <_vfiprintf_r+0x13a>
 8008510:	eba0 0308 	sub.w	r3, r0, r8
 8008514:	fa09 f303 	lsl.w	r3, r9, r3
 8008518:	4313      	orrs	r3, r2
 800851a:	9304      	str	r3, [sp, #16]
 800851c:	46a2      	mov	sl, r4
 800851e:	e7d2      	b.n	80084c6 <_vfiprintf_r+0xc6>
 8008520:	9b03      	ldr	r3, [sp, #12]
 8008522:	1d19      	adds	r1, r3, #4
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	9103      	str	r1, [sp, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	bfbb      	ittet	lt
 800852c:	425b      	neglt	r3, r3
 800852e:	f042 0202 	orrlt.w	r2, r2, #2
 8008532:	9307      	strge	r3, [sp, #28]
 8008534:	9307      	strlt	r3, [sp, #28]
 8008536:	bfb8      	it	lt
 8008538:	9204      	strlt	r2, [sp, #16]
 800853a:	7823      	ldrb	r3, [r4, #0]
 800853c:	2b2e      	cmp	r3, #46	@ 0x2e
 800853e:	d10a      	bne.n	8008556 <_vfiprintf_r+0x156>
 8008540:	7863      	ldrb	r3, [r4, #1]
 8008542:	2b2a      	cmp	r3, #42	@ 0x2a
 8008544:	d132      	bne.n	80085ac <_vfiprintf_r+0x1ac>
 8008546:	9b03      	ldr	r3, [sp, #12]
 8008548:	1d1a      	adds	r2, r3, #4
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	9203      	str	r2, [sp, #12]
 800854e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008552:	3402      	adds	r4, #2
 8008554:	9305      	str	r3, [sp, #20]
 8008556:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800862c <_vfiprintf_r+0x22c>
 800855a:	7821      	ldrb	r1, [r4, #0]
 800855c:	2203      	movs	r2, #3
 800855e:	4650      	mov	r0, sl
 8008560:	f7f7 fe56 	bl	8000210 <memchr>
 8008564:	b138      	cbz	r0, 8008576 <_vfiprintf_r+0x176>
 8008566:	9b04      	ldr	r3, [sp, #16]
 8008568:	eba0 000a 	sub.w	r0, r0, sl
 800856c:	2240      	movs	r2, #64	@ 0x40
 800856e:	4082      	lsls	r2, r0
 8008570:	4313      	orrs	r3, r2
 8008572:	3401      	adds	r4, #1
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857a:	4829      	ldr	r0, [pc, #164]	@ (8008620 <_vfiprintf_r+0x220>)
 800857c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008580:	2206      	movs	r2, #6
 8008582:	f7f7 fe45 	bl	8000210 <memchr>
 8008586:	2800      	cmp	r0, #0
 8008588:	d03f      	beq.n	800860a <_vfiprintf_r+0x20a>
 800858a:	4b26      	ldr	r3, [pc, #152]	@ (8008624 <_vfiprintf_r+0x224>)
 800858c:	bb1b      	cbnz	r3, 80085d6 <_vfiprintf_r+0x1d6>
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	3307      	adds	r3, #7
 8008592:	f023 0307 	bic.w	r3, r3, #7
 8008596:	3308      	adds	r3, #8
 8008598:	9303      	str	r3, [sp, #12]
 800859a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800859c:	443b      	add	r3, r7
 800859e:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a0:	e76a      	b.n	8008478 <_vfiprintf_r+0x78>
 80085a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085a6:	460c      	mov	r4, r1
 80085a8:	2001      	movs	r0, #1
 80085aa:	e7a8      	b.n	80084fe <_vfiprintf_r+0xfe>
 80085ac:	2300      	movs	r3, #0
 80085ae:	3401      	adds	r4, #1
 80085b0:	9305      	str	r3, [sp, #20]
 80085b2:	4619      	mov	r1, r3
 80085b4:	f04f 0c0a 	mov.w	ip, #10
 80085b8:	4620      	mov	r0, r4
 80085ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085be:	3a30      	subs	r2, #48	@ 0x30
 80085c0:	2a09      	cmp	r2, #9
 80085c2:	d903      	bls.n	80085cc <_vfiprintf_r+0x1cc>
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0c6      	beq.n	8008556 <_vfiprintf_r+0x156>
 80085c8:	9105      	str	r1, [sp, #20]
 80085ca:	e7c4      	b.n	8008556 <_vfiprintf_r+0x156>
 80085cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80085d0:	4604      	mov	r4, r0
 80085d2:	2301      	movs	r3, #1
 80085d4:	e7f0      	b.n	80085b8 <_vfiprintf_r+0x1b8>
 80085d6:	ab03      	add	r3, sp, #12
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	462a      	mov	r2, r5
 80085dc:	4b12      	ldr	r3, [pc, #72]	@ (8008628 <_vfiprintf_r+0x228>)
 80085de:	a904      	add	r1, sp, #16
 80085e0:	4630      	mov	r0, r6
 80085e2:	f7fd fec3 	bl	800636c <_printf_float>
 80085e6:	4607      	mov	r7, r0
 80085e8:	1c78      	adds	r0, r7, #1
 80085ea:	d1d6      	bne.n	800859a <_vfiprintf_r+0x19a>
 80085ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085ee:	07d9      	lsls	r1, r3, #31
 80085f0:	d405      	bmi.n	80085fe <_vfiprintf_r+0x1fe>
 80085f2:	89ab      	ldrh	r3, [r5, #12]
 80085f4:	059a      	lsls	r2, r3, #22
 80085f6:	d402      	bmi.n	80085fe <_vfiprintf_r+0x1fe>
 80085f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085fa:	f7fe fc05 	bl	8006e08 <__retarget_lock_release_recursive>
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	065b      	lsls	r3, r3, #25
 8008602:	f53f af1f 	bmi.w	8008444 <_vfiprintf_r+0x44>
 8008606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008608:	e71e      	b.n	8008448 <_vfiprintf_r+0x48>
 800860a:	ab03      	add	r3, sp, #12
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	462a      	mov	r2, r5
 8008610:	4b05      	ldr	r3, [pc, #20]	@ (8008628 <_vfiprintf_r+0x228>)
 8008612:	a904      	add	r1, sp, #16
 8008614:	4630      	mov	r0, r6
 8008616:	f7fe f941 	bl	800689c <_printf_i>
 800861a:	e7e4      	b.n	80085e6 <_vfiprintf_r+0x1e6>
 800861c:	08008db0 	.word	0x08008db0
 8008620:	08008dba 	.word	0x08008dba
 8008624:	0800636d 	.word	0x0800636d
 8008628:	080083db 	.word	0x080083db
 800862c:	08008db6 	.word	0x08008db6

08008630 <__sflush_r>:
 8008630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008638:	0716      	lsls	r6, r2, #28
 800863a:	4605      	mov	r5, r0
 800863c:	460c      	mov	r4, r1
 800863e:	d454      	bmi.n	80086ea <__sflush_r+0xba>
 8008640:	684b      	ldr	r3, [r1, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	dc02      	bgt.n	800864c <__sflush_r+0x1c>
 8008646:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008648:	2b00      	cmp	r3, #0
 800864a:	dd48      	ble.n	80086de <__sflush_r+0xae>
 800864c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800864e:	2e00      	cmp	r6, #0
 8008650:	d045      	beq.n	80086de <__sflush_r+0xae>
 8008652:	2300      	movs	r3, #0
 8008654:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008658:	682f      	ldr	r7, [r5, #0]
 800865a:	6a21      	ldr	r1, [r4, #32]
 800865c:	602b      	str	r3, [r5, #0]
 800865e:	d030      	beq.n	80086c2 <__sflush_r+0x92>
 8008660:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	0759      	lsls	r1, r3, #29
 8008666:	d505      	bpl.n	8008674 <__sflush_r+0x44>
 8008668:	6863      	ldr	r3, [r4, #4]
 800866a:	1ad2      	subs	r2, r2, r3
 800866c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800866e:	b10b      	cbz	r3, 8008674 <__sflush_r+0x44>
 8008670:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008672:	1ad2      	subs	r2, r2, r3
 8008674:	2300      	movs	r3, #0
 8008676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008678:	6a21      	ldr	r1, [r4, #32]
 800867a:	4628      	mov	r0, r5
 800867c:	47b0      	blx	r6
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	d106      	bne.n	8008692 <__sflush_r+0x62>
 8008684:	6829      	ldr	r1, [r5, #0]
 8008686:	291d      	cmp	r1, #29
 8008688:	d82b      	bhi.n	80086e2 <__sflush_r+0xb2>
 800868a:	4a2a      	ldr	r2, [pc, #168]	@ (8008734 <__sflush_r+0x104>)
 800868c:	410a      	asrs	r2, r1
 800868e:	07d6      	lsls	r6, r2, #31
 8008690:	d427      	bmi.n	80086e2 <__sflush_r+0xb2>
 8008692:	2200      	movs	r2, #0
 8008694:	6062      	str	r2, [r4, #4]
 8008696:	04d9      	lsls	r1, r3, #19
 8008698:	6922      	ldr	r2, [r4, #16]
 800869a:	6022      	str	r2, [r4, #0]
 800869c:	d504      	bpl.n	80086a8 <__sflush_r+0x78>
 800869e:	1c42      	adds	r2, r0, #1
 80086a0:	d101      	bne.n	80086a6 <__sflush_r+0x76>
 80086a2:	682b      	ldr	r3, [r5, #0]
 80086a4:	b903      	cbnz	r3, 80086a8 <__sflush_r+0x78>
 80086a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80086a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086aa:	602f      	str	r7, [r5, #0]
 80086ac:	b1b9      	cbz	r1, 80086de <__sflush_r+0xae>
 80086ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086b2:	4299      	cmp	r1, r3
 80086b4:	d002      	beq.n	80086bc <__sflush_r+0x8c>
 80086b6:	4628      	mov	r0, r5
 80086b8:	f7ff f9f6 	bl	8007aa8 <_free_r>
 80086bc:	2300      	movs	r3, #0
 80086be:	6363      	str	r3, [r4, #52]	@ 0x34
 80086c0:	e00d      	b.n	80086de <__sflush_r+0xae>
 80086c2:	2301      	movs	r3, #1
 80086c4:	4628      	mov	r0, r5
 80086c6:	47b0      	blx	r6
 80086c8:	4602      	mov	r2, r0
 80086ca:	1c50      	adds	r0, r2, #1
 80086cc:	d1c9      	bne.n	8008662 <__sflush_r+0x32>
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0c6      	beq.n	8008662 <__sflush_r+0x32>
 80086d4:	2b1d      	cmp	r3, #29
 80086d6:	d001      	beq.n	80086dc <__sflush_r+0xac>
 80086d8:	2b16      	cmp	r3, #22
 80086da:	d11e      	bne.n	800871a <__sflush_r+0xea>
 80086dc:	602f      	str	r7, [r5, #0]
 80086de:	2000      	movs	r0, #0
 80086e0:	e022      	b.n	8008728 <__sflush_r+0xf8>
 80086e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e6:	b21b      	sxth	r3, r3
 80086e8:	e01b      	b.n	8008722 <__sflush_r+0xf2>
 80086ea:	690f      	ldr	r7, [r1, #16]
 80086ec:	2f00      	cmp	r7, #0
 80086ee:	d0f6      	beq.n	80086de <__sflush_r+0xae>
 80086f0:	0793      	lsls	r3, r2, #30
 80086f2:	680e      	ldr	r6, [r1, #0]
 80086f4:	bf08      	it	eq
 80086f6:	694b      	ldreq	r3, [r1, #20]
 80086f8:	600f      	str	r7, [r1, #0]
 80086fa:	bf18      	it	ne
 80086fc:	2300      	movne	r3, #0
 80086fe:	eba6 0807 	sub.w	r8, r6, r7
 8008702:	608b      	str	r3, [r1, #8]
 8008704:	f1b8 0f00 	cmp.w	r8, #0
 8008708:	dde9      	ble.n	80086de <__sflush_r+0xae>
 800870a:	6a21      	ldr	r1, [r4, #32]
 800870c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800870e:	4643      	mov	r3, r8
 8008710:	463a      	mov	r2, r7
 8008712:	4628      	mov	r0, r5
 8008714:	47b0      	blx	r6
 8008716:	2800      	cmp	r0, #0
 8008718:	dc08      	bgt.n	800872c <__sflush_r+0xfc>
 800871a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800871e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008722:	81a3      	strh	r3, [r4, #12]
 8008724:	f04f 30ff 	mov.w	r0, #4294967295
 8008728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800872c:	4407      	add	r7, r0
 800872e:	eba8 0800 	sub.w	r8, r8, r0
 8008732:	e7e7      	b.n	8008704 <__sflush_r+0xd4>
 8008734:	dfbffffe 	.word	0xdfbffffe

08008738 <_fflush_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	690b      	ldr	r3, [r1, #16]
 800873c:	4605      	mov	r5, r0
 800873e:	460c      	mov	r4, r1
 8008740:	b913      	cbnz	r3, 8008748 <_fflush_r+0x10>
 8008742:	2500      	movs	r5, #0
 8008744:	4628      	mov	r0, r5
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	b118      	cbz	r0, 8008752 <_fflush_r+0x1a>
 800874a:	6a03      	ldr	r3, [r0, #32]
 800874c:	b90b      	cbnz	r3, 8008752 <_fflush_r+0x1a>
 800874e:	f7fe fa51 	bl	8006bf4 <__sinit>
 8008752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0f3      	beq.n	8008742 <_fflush_r+0xa>
 800875a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800875c:	07d0      	lsls	r0, r2, #31
 800875e:	d404      	bmi.n	800876a <_fflush_r+0x32>
 8008760:	0599      	lsls	r1, r3, #22
 8008762:	d402      	bmi.n	800876a <_fflush_r+0x32>
 8008764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008766:	f7fe fb4e 	bl	8006e06 <__retarget_lock_acquire_recursive>
 800876a:	4628      	mov	r0, r5
 800876c:	4621      	mov	r1, r4
 800876e:	f7ff ff5f 	bl	8008630 <__sflush_r>
 8008772:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008774:	07da      	lsls	r2, r3, #31
 8008776:	4605      	mov	r5, r0
 8008778:	d4e4      	bmi.n	8008744 <_fflush_r+0xc>
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	059b      	lsls	r3, r3, #22
 800877e:	d4e1      	bmi.n	8008744 <_fflush_r+0xc>
 8008780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008782:	f7fe fb41 	bl	8006e08 <__retarget_lock_release_recursive>
 8008786:	e7dd      	b.n	8008744 <_fflush_r+0xc>

08008788 <__swbuf_r>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	460e      	mov	r6, r1
 800878c:	4614      	mov	r4, r2
 800878e:	4605      	mov	r5, r0
 8008790:	b118      	cbz	r0, 800879a <__swbuf_r+0x12>
 8008792:	6a03      	ldr	r3, [r0, #32]
 8008794:	b90b      	cbnz	r3, 800879a <__swbuf_r+0x12>
 8008796:	f7fe fa2d 	bl	8006bf4 <__sinit>
 800879a:	69a3      	ldr	r3, [r4, #24]
 800879c:	60a3      	str	r3, [r4, #8]
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	071a      	lsls	r2, r3, #28
 80087a2:	d501      	bpl.n	80087a8 <__swbuf_r+0x20>
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	b943      	cbnz	r3, 80087ba <__swbuf_r+0x32>
 80087a8:	4621      	mov	r1, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f82a 	bl	8008804 <__swsetup_r>
 80087b0:	b118      	cbz	r0, 80087ba <__swbuf_r+0x32>
 80087b2:	f04f 37ff 	mov.w	r7, #4294967295
 80087b6:	4638      	mov	r0, r7
 80087b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	6922      	ldr	r2, [r4, #16]
 80087be:	1a98      	subs	r0, r3, r2
 80087c0:	6963      	ldr	r3, [r4, #20]
 80087c2:	b2f6      	uxtb	r6, r6
 80087c4:	4283      	cmp	r3, r0
 80087c6:	4637      	mov	r7, r6
 80087c8:	dc05      	bgt.n	80087d6 <__swbuf_r+0x4e>
 80087ca:	4621      	mov	r1, r4
 80087cc:	4628      	mov	r0, r5
 80087ce:	f7ff ffb3 	bl	8008738 <_fflush_r>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d1ed      	bne.n	80087b2 <__swbuf_r+0x2a>
 80087d6:	68a3      	ldr	r3, [r4, #8]
 80087d8:	3b01      	subs	r3, #1
 80087da:	60a3      	str	r3, [r4, #8]
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	6022      	str	r2, [r4, #0]
 80087e2:	701e      	strb	r6, [r3, #0]
 80087e4:	6962      	ldr	r2, [r4, #20]
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d004      	beq.n	80087f6 <__swbuf_r+0x6e>
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	07db      	lsls	r3, r3, #31
 80087f0:	d5e1      	bpl.n	80087b6 <__swbuf_r+0x2e>
 80087f2:	2e0a      	cmp	r6, #10
 80087f4:	d1df      	bne.n	80087b6 <__swbuf_r+0x2e>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f7ff ff9d 	bl	8008738 <_fflush_r>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d0d9      	beq.n	80087b6 <__swbuf_r+0x2e>
 8008802:	e7d6      	b.n	80087b2 <__swbuf_r+0x2a>

08008804 <__swsetup_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4b29      	ldr	r3, [pc, #164]	@ (80088ac <__swsetup_r+0xa8>)
 8008808:	4605      	mov	r5, r0
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	460c      	mov	r4, r1
 800880e:	b118      	cbz	r0, 8008818 <__swsetup_r+0x14>
 8008810:	6a03      	ldr	r3, [r0, #32]
 8008812:	b90b      	cbnz	r3, 8008818 <__swsetup_r+0x14>
 8008814:	f7fe f9ee 	bl	8006bf4 <__sinit>
 8008818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881c:	0719      	lsls	r1, r3, #28
 800881e:	d422      	bmi.n	8008866 <__swsetup_r+0x62>
 8008820:	06da      	lsls	r2, r3, #27
 8008822:	d407      	bmi.n	8008834 <__swsetup_r+0x30>
 8008824:	2209      	movs	r2, #9
 8008826:	602a      	str	r2, [r5, #0]
 8008828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	e033      	b.n	800889c <__swsetup_r+0x98>
 8008834:	0758      	lsls	r0, r3, #29
 8008836:	d512      	bpl.n	800885e <__swsetup_r+0x5a>
 8008838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800883a:	b141      	cbz	r1, 800884e <__swsetup_r+0x4a>
 800883c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008840:	4299      	cmp	r1, r3
 8008842:	d002      	beq.n	800884a <__swsetup_r+0x46>
 8008844:	4628      	mov	r0, r5
 8008846:	f7ff f92f 	bl	8007aa8 <_free_r>
 800884a:	2300      	movs	r3, #0
 800884c:	6363      	str	r3, [r4, #52]	@ 0x34
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	2300      	movs	r3, #0
 8008858:	6063      	str	r3, [r4, #4]
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	f043 0308 	orr.w	r3, r3, #8
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	b94b      	cbnz	r3, 800887e <__swsetup_r+0x7a>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008874:	d003      	beq.n	800887e <__swsetup_r+0x7a>
 8008876:	4621      	mov	r1, r4
 8008878:	4628      	mov	r0, r5
 800887a:	f000 f8c1 	bl	8008a00 <__smakebuf_r>
 800887e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008882:	f013 0201 	ands.w	r2, r3, #1
 8008886:	d00a      	beq.n	800889e <__swsetup_r+0x9a>
 8008888:	2200      	movs	r2, #0
 800888a:	60a2      	str	r2, [r4, #8]
 800888c:	6962      	ldr	r2, [r4, #20]
 800888e:	4252      	negs	r2, r2
 8008890:	61a2      	str	r2, [r4, #24]
 8008892:	6922      	ldr	r2, [r4, #16]
 8008894:	b942      	cbnz	r2, 80088a8 <__swsetup_r+0xa4>
 8008896:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800889a:	d1c5      	bne.n	8008828 <__swsetup_r+0x24>
 800889c:	bd38      	pop	{r3, r4, r5, pc}
 800889e:	0799      	lsls	r1, r3, #30
 80088a0:	bf58      	it	pl
 80088a2:	6962      	ldrpl	r2, [r4, #20]
 80088a4:	60a2      	str	r2, [r4, #8]
 80088a6:	e7f4      	b.n	8008892 <__swsetup_r+0x8e>
 80088a8:	2000      	movs	r0, #0
 80088aa:	e7f7      	b.n	800889c <__swsetup_r+0x98>
 80088ac:	20000084 	.word	0x20000084

080088b0 <_sbrk_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d06      	ldr	r5, [pc, #24]	@ (80088cc <_sbrk_r+0x1c>)
 80088b4:	2300      	movs	r3, #0
 80088b6:	4604      	mov	r4, r0
 80088b8:	4608      	mov	r0, r1
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	f7f9 fc54 	bl	8002168 <_sbrk>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	d102      	bne.n	80088ca <_sbrk_r+0x1a>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	b103      	cbz	r3, 80088ca <_sbrk_r+0x1a>
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	20001240 	.word	0x20001240

080088d0 <memcpy>:
 80088d0:	440a      	add	r2, r1
 80088d2:	4291      	cmp	r1, r2
 80088d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088d8:	d100      	bne.n	80088dc <memcpy+0xc>
 80088da:	4770      	bx	lr
 80088dc:	b510      	push	{r4, lr}
 80088de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088e6:	4291      	cmp	r1, r2
 80088e8:	d1f9      	bne.n	80088de <memcpy+0xe>
 80088ea:	bd10      	pop	{r4, pc}

080088ec <__assert_func>:
 80088ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088ee:	4614      	mov	r4, r2
 80088f0:	461a      	mov	r2, r3
 80088f2:	4b09      	ldr	r3, [pc, #36]	@ (8008918 <__assert_func+0x2c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4605      	mov	r5, r0
 80088f8:	68d8      	ldr	r0, [r3, #12]
 80088fa:	b954      	cbnz	r4, 8008912 <__assert_func+0x26>
 80088fc:	4b07      	ldr	r3, [pc, #28]	@ (800891c <__assert_func+0x30>)
 80088fe:	461c      	mov	r4, r3
 8008900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008904:	9100      	str	r1, [sp, #0]
 8008906:	462b      	mov	r3, r5
 8008908:	4905      	ldr	r1, [pc, #20]	@ (8008920 <__assert_func+0x34>)
 800890a:	f000 f841 	bl	8008990 <fiprintf>
 800890e:	f000 f8d5 	bl	8008abc <abort>
 8008912:	4b04      	ldr	r3, [pc, #16]	@ (8008924 <__assert_func+0x38>)
 8008914:	e7f4      	b.n	8008900 <__assert_func+0x14>
 8008916:	bf00      	nop
 8008918:	20000084 	.word	0x20000084
 800891c:	08008e06 	.word	0x08008e06
 8008920:	08008dd8 	.word	0x08008dd8
 8008924:	08008dcb 	.word	0x08008dcb

08008928 <_calloc_r>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	fba1 5402 	umull	r5, r4, r1, r2
 800892e:	b93c      	cbnz	r4, 8008940 <_calloc_r+0x18>
 8008930:	4629      	mov	r1, r5
 8008932:	f7ff f92d 	bl	8007b90 <_malloc_r>
 8008936:	4606      	mov	r6, r0
 8008938:	b928      	cbnz	r0, 8008946 <_calloc_r+0x1e>
 800893a:	2600      	movs	r6, #0
 800893c:	4630      	mov	r0, r6
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	220c      	movs	r2, #12
 8008942:	6002      	str	r2, [r0, #0]
 8008944:	e7f9      	b.n	800893a <_calloc_r+0x12>
 8008946:	462a      	mov	r2, r5
 8008948:	4621      	mov	r1, r4
 800894a:	f7fe f9de 	bl	8006d0a <memset>
 800894e:	e7f5      	b.n	800893c <_calloc_r+0x14>

08008950 <__ascii_mbtowc>:
 8008950:	b082      	sub	sp, #8
 8008952:	b901      	cbnz	r1, 8008956 <__ascii_mbtowc+0x6>
 8008954:	a901      	add	r1, sp, #4
 8008956:	b142      	cbz	r2, 800896a <__ascii_mbtowc+0x1a>
 8008958:	b14b      	cbz	r3, 800896e <__ascii_mbtowc+0x1e>
 800895a:	7813      	ldrb	r3, [r2, #0]
 800895c:	600b      	str	r3, [r1, #0]
 800895e:	7812      	ldrb	r2, [r2, #0]
 8008960:	1e10      	subs	r0, r2, #0
 8008962:	bf18      	it	ne
 8008964:	2001      	movne	r0, #1
 8008966:	b002      	add	sp, #8
 8008968:	4770      	bx	lr
 800896a:	4610      	mov	r0, r2
 800896c:	e7fb      	b.n	8008966 <__ascii_mbtowc+0x16>
 800896e:	f06f 0001 	mvn.w	r0, #1
 8008972:	e7f8      	b.n	8008966 <__ascii_mbtowc+0x16>

08008974 <__ascii_wctomb>:
 8008974:	4603      	mov	r3, r0
 8008976:	4608      	mov	r0, r1
 8008978:	b141      	cbz	r1, 800898c <__ascii_wctomb+0x18>
 800897a:	2aff      	cmp	r2, #255	@ 0xff
 800897c:	d904      	bls.n	8008988 <__ascii_wctomb+0x14>
 800897e:	228a      	movs	r2, #138	@ 0x8a
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	f04f 30ff 	mov.w	r0, #4294967295
 8008986:	4770      	bx	lr
 8008988:	700a      	strb	r2, [r1, #0]
 800898a:	2001      	movs	r0, #1
 800898c:	4770      	bx	lr
	...

08008990 <fiprintf>:
 8008990:	b40e      	push	{r1, r2, r3}
 8008992:	b503      	push	{r0, r1, lr}
 8008994:	4601      	mov	r1, r0
 8008996:	ab03      	add	r3, sp, #12
 8008998:	4805      	ldr	r0, [pc, #20]	@ (80089b0 <fiprintf+0x20>)
 800899a:	f853 2b04 	ldr.w	r2, [r3], #4
 800899e:	6800      	ldr	r0, [r0, #0]
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	f7ff fd2d 	bl	8008400 <_vfiprintf_r>
 80089a6:	b002      	add	sp, #8
 80089a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089ac:	b003      	add	sp, #12
 80089ae:	4770      	bx	lr
 80089b0:	20000084 	.word	0x20000084

080089b4 <__swhatbuf_r>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	460c      	mov	r4, r1
 80089b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089bc:	2900      	cmp	r1, #0
 80089be:	b096      	sub	sp, #88	@ 0x58
 80089c0:	4615      	mov	r5, r2
 80089c2:	461e      	mov	r6, r3
 80089c4:	da0d      	bge.n	80089e2 <__swhatbuf_r+0x2e>
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089cc:	f04f 0100 	mov.w	r1, #0
 80089d0:	bf14      	ite	ne
 80089d2:	2340      	movne	r3, #64	@ 0x40
 80089d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089d8:	2000      	movs	r0, #0
 80089da:	6031      	str	r1, [r6, #0]
 80089dc:	602b      	str	r3, [r5, #0]
 80089de:	b016      	add	sp, #88	@ 0x58
 80089e0:	bd70      	pop	{r4, r5, r6, pc}
 80089e2:	466a      	mov	r2, sp
 80089e4:	f000 f848 	bl	8008a78 <_fstat_r>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	dbec      	blt.n	80089c6 <__swhatbuf_r+0x12>
 80089ec:	9901      	ldr	r1, [sp, #4]
 80089ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089f6:	4259      	negs	r1, r3
 80089f8:	4159      	adcs	r1, r3
 80089fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089fe:	e7eb      	b.n	80089d8 <__swhatbuf_r+0x24>

08008a00 <__smakebuf_r>:
 8008a00:	898b      	ldrh	r3, [r1, #12]
 8008a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a04:	079d      	lsls	r5, r3, #30
 8008a06:	4606      	mov	r6, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	d507      	bpl.n	8008a1c <__smakebuf_r+0x1c>
 8008a0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	6123      	str	r3, [r4, #16]
 8008a14:	2301      	movs	r3, #1
 8008a16:	6163      	str	r3, [r4, #20]
 8008a18:	b003      	add	sp, #12
 8008a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a1c:	ab01      	add	r3, sp, #4
 8008a1e:	466a      	mov	r2, sp
 8008a20:	f7ff ffc8 	bl	80089b4 <__swhatbuf_r>
 8008a24:	9f00      	ldr	r7, [sp, #0]
 8008a26:	4605      	mov	r5, r0
 8008a28:	4639      	mov	r1, r7
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7ff f8b0 	bl	8007b90 <_malloc_r>
 8008a30:	b948      	cbnz	r0, 8008a46 <__smakebuf_r+0x46>
 8008a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a36:	059a      	lsls	r2, r3, #22
 8008a38:	d4ee      	bmi.n	8008a18 <__smakebuf_r+0x18>
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	f043 0302 	orr.w	r3, r3, #2
 8008a42:	81a3      	strh	r3, [r4, #12]
 8008a44:	e7e2      	b.n	8008a0c <__smakebuf_r+0xc>
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	6020      	str	r0, [r4, #0]
 8008a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a4e:	81a3      	strh	r3, [r4, #12]
 8008a50:	9b01      	ldr	r3, [sp, #4]
 8008a52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a56:	b15b      	cbz	r3, 8008a70 <__smakebuf_r+0x70>
 8008a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f000 f81d 	bl	8008a9c <_isatty_r>
 8008a62:	b128      	cbz	r0, 8008a70 <__smakebuf_r+0x70>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f023 0303 	bic.w	r3, r3, #3
 8008a6a:	f043 0301 	orr.w	r3, r3, #1
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	431d      	orrs	r5, r3
 8008a74:	81a5      	strh	r5, [r4, #12]
 8008a76:	e7cf      	b.n	8008a18 <__smakebuf_r+0x18>

08008a78 <_fstat_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	@ (8008a98 <_fstat_r+0x20>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	4611      	mov	r1, r2
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	f7f9 fb47 	bl	8002118 <_fstat>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	d102      	bne.n	8008a94 <_fstat_r+0x1c>
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	b103      	cbz	r3, 8008a94 <_fstat_r+0x1c>
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	bd38      	pop	{r3, r4, r5, pc}
 8008a96:	bf00      	nop
 8008a98:	20001240 	.word	0x20001240

08008a9c <_isatty_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d06      	ldr	r5, [pc, #24]	@ (8008ab8 <_isatty_r+0x1c>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7f9 fb46 	bl	8002138 <_isatty>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_isatty_r+0x1a>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_isatty_r+0x1a>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	20001240 	.word	0x20001240

08008abc <abort>:
 8008abc:	b508      	push	{r3, lr}
 8008abe:	2006      	movs	r0, #6
 8008ac0:	f000 f82c 	bl	8008b1c <raise>
 8008ac4:	2001      	movs	r0, #1
 8008ac6:	f7f9 faf3 	bl	80020b0 <_exit>

08008aca <_raise_r>:
 8008aca:	291f      	cmp	r1, #31
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4605      	mov	r5, r0
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	d904      	bls.n	8008ade <_raise_r+0x14>
 8008ad4:	2316      	movs	r3, #22
 8008ad6:	6003      	str	r3, [r0, #0]
 8008ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8008adc:	bd38      	pop	{r3, r4, r5, pc}
 8008ade:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ae0:	b112      	cbz	r2, 8008ae8 <_raise_r+0x1e>
 8008ae2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ae6:	b94b      	cbnz	r3, 8008afc <_raise_r+0x32>
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f000 f831 	bl	8008b50 <_getpid_r>
 8008aee:	4622      	mov	r2, r4
 8008af0:	4601      	mov	r1, r0
 8008af2:	4628      	mov	r0, r5
 8008af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008af8:	f000 b818 	b.w	8008b2c <_kill_r>
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d00a      	beq.n	8008b16 <_raise_r+0x4c>
 8008b00:	1c59      	adds	r1, r3, #1
 8008b02:	d103      	bne.n	8008b0c <_raise_r+0x42>
 8008b04:	2316      	movs	r3, #22
 8008b06:	6003      	str	r3, [r0, #0]
 8008b08:	2001      	movs	r0, #1
 8008b0a:	e7e7      	b.n	8008adc <_raise_r+0x12>
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b12:	4620      	mov	r0, r4
 8008b14:	4798      	blx	r3
 8008b16:	2000      	movs	r0, #0
 8008b18:	e7e0      	b.n	8008adc <_raise_r+0x12>
	...

08008b1c <raise>:
 8008b1c:	4b02      	ldr	r3, [pc, #8]	@ (8008b28 <raise+0xc>)
 8008b1e:	4601      	mov	r1, r0
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	f7ff bfd2 	b.w	8008aca <_raise_r>
 8008b26:	bf00      	nop
 8008b28:	20000084 	.word	0x20000084

08008b2c <_kill_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d07      	ldr	r5, [pc, #28]	@ (8008b4c <_kill_r+0x20>)
 8008b30:	2300      	movs	r3, #0
 8008b32:	4604      	mov	r4, r0
 8008b34:	4608      	mov	r0, r1
 8008b36:	4611      	mov	r1, r2
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	f7f9 faa9 	bl	8002090 <_kill>
 8008b3e:	1c43      	adds	r3, r0, #1
 8008b40:	d102      	bne.n	8008b48 <_kill_r+0x1c>
 8008b42:	682b      	ldr	r3, [r5, #0]
 8008b44:	b103      	cbz	r3, 8008b48 <_kill_r+0x1c>
 8008b46:	6023      	str	r3, [r4, #0]
 8008b48:	bd38      	pop	{r3, r4, r5, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20001240 	.word	0x20001240

08008b50 <_getpid_r>:
 8008b50:	f7f9 ba96 	b.w	8002080 <_getpid>

08008b54 <_init>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr

08008b60 <_fini>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	bf00      	nop
 8008b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b66:	bc08      	pop	{r3}
 8008b68:	469e      	mov	lr, r3
 8008b6a:	4770      	bx	lr
